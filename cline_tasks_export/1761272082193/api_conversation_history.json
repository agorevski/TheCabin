[{"role":"user","content":[{"type":"text","text":"<task>\n'The_Cabin_Game_Design_Doc.md' (see below for file content) \nI would like to implement this game in Android, using Maui components.  Please create a detailed game design document and architecture and store the information as numbered markdown files under a \\docs\\ folder\n</task>\n\n<file_content path=\"The_Cabin_Game_Design_Doc.md\">\n# üéÆ The Cabin (Android Voice Edition)\n### Game Design Document (v3)\n\n---\n\n## 1. Overview\n\n**The Cabin (Voice Edition)** is a modern reimagining of the classic text adventure genre ‚Äî an immersive voice-controlled interactive fiction game for Android.\n\nPlayers explore a mysterious cabin by *speaking commands* instead of typing them. Speech recognition, natural language parsing, and dynamic text-to-speech narration create a hands-free, story-driven experience.\n\n---\n\n## 2. Core Gameplay Loop\n\n1. **Listen:** The app activates the microphone and records the player‚Äôs command.\n2. **Transcribe:** Speech-to-text (STT) ML model converts voice ‚Üí text.\n3. **Parse:** A GPT-based parser interprets player intent and generates structured JSON commands.\n4. **Simulate:** The game engine updates the world state based on those commands.\n5. **Respond:** Narration text (and optional TTS) describes the outcome.\n6. **Repeat:** The player continues exploring until the mystery resolves.\n\n---\n\n## 3. UX / UI Design\n\n### 3.1 Screen Layout\n- **Top Bar:** Location name and player stats (health, light, time).\n- **Main Text Panel:** Scrollable story feed with dynamic narrative text.\n- **Voice Control Section:**\n  - Central microphone button with waveform animation.\n  - Transcript preview (‚ÄúYou said: look under the bed‚Äù).\n- **Inventory Drawer:** Slide-up panel showing objects and tools.\n- **Settings Menu:** TTS toggle, difficulty, theme selection.\n\n### 3.2 Voice Experience\n- Tap or say ‚ÄúListen‚Äù to activate the mic.\n- Speech recognition uses an on-device model (Whisper.cpp or Android SpeechRecognizer).\n- Short-term context memory keeps the last 10 player actions for narrative continuity.\n\n---\n\n## 4. System Architecture\n\n### 4.1 Data Flow\n```\nPlayer Voice\n   ‚Üì\nSpeech-to-Text (STT)\n   ‚Üì\nParser (LLM / GPT)\n   ‚Üì\nGame Engine (State Machine)\n   ‚Üì\nResponse Text\n   ‚Üì\nText-to-Speech (TTS) ‚Üí Audio Output\n```\n\n### 4.2 Components\n\n| Layer | Technology | Description |\n|-------|-------------|-------------|\n| **Frontend** | Kotlin + Jetpack Compose | UI, voice controls, and game loop management. |\n| **STT Layer** | Whisper.cpp / Android SpeechRecognizer | Converts player voice into text. |\n| **Parser Layer** | GPT-based API or local intent model | Translates text commands into structured JSON actions. |\n| **Engine** | Kotlin state machine | Manages rooms, inventory, puzzles, and outcomes. |\n| **TTS Layer** | Android TextToSpeech / OpenAI TTS | Narrates game responses. |\n| **Storage** | RoomDB or JSON files | Saves world definitions, progress, and content packs. |\n| **Optional Backend** | Firebase / AWS | Theme content delivery, analytics, updates. |\n\n---\n\n## 5. Data Models\n\n### 5.1 Room Model\n```json\n{\n  \"id\": \"cabin_main\",\n  \"description\": \"You stand in a dimly lit wooden cabin...\",\n  \"objects\": [\"lantern\", \"door\"],\n  \"exits\": {\"north\": \"forest_edge\"}\n}\n```\n\n### 5.2 Object Model\n```json\n{\n  \"id\": \"lantern\",\n  \"state\": \"unlit\",\n  \"actions\": {\n    \"take\": \"You pick up the lantern.\",\n    \"light\": \"It flickers to life.\"\n  }\n}\n```\n\n### 5.3 Player State\n```json\n{\n  \"inventory\": [\"note\"],\n  \"health\": 100,\n  \"location\": \"cabin_main\",\n  \"light_level\": \"low\"\n}\n```\n\n---\n\n## 6. Implementation Details\n\n### 6.1 Speech Recognition\n- Default: Android‚Äôs built-in **SpeechRecognizer** API.\n- Offline mode: Integrate **Whisper.cpp** or **Vosk** for on-device inference.\n- Output confidence threshold: 0.75 (re-prompt player if lower).\n\n### 6.2 Command Parsing\n- Use GPT-4o-mini or local distilled LLM to translate text into structured JSON commands.\n- Example Input: ‚ÄúPick up the lantern on the table.‚Äù  \n- Example Output:\n  ```json\n  {\"verb\": \"take\", \"object\": \"lantern\", \"context\": \"table\"}\n  ```\n\n### 6.3 Game Engine\n- Built in Kotlin as a finite state machine.\n- Each command triggers transitions between rooms, updates object states, and appends to the story log.\n- Use coroutine scopes for async I/O (voice recording, GPT calls, TTS playback).\n\n### 6.4 TTS Narration\n- Uses Android TextToSpeech by default.\n- Supports dynamic voice selection and speech speed adjustment.\n- Optional: integrate OpenAI or ElevenLabs API for realistic narration.\n\n### 6.5 Content Management\n- Each theme pack (JSON) is stored in `/assets/themes/`.\n- New packs can be downloaded or generated dynamically from GPT.\n\n---\n\n## 7. Thematic Packs\n\nPrebuilt content packs (5 included):\n- **Classic Horror:** Haunted log cabin, decaying interiors, candlelight.\n- **Arctic Survival:** Polar outpost, dwindling power, freezing tension.\n- **Fantasy Magic:** Wizard‚Äôs workshop, glowing runes, spellcraft puzzles.\n- **Sci-Fi Isolation:** Derelict space module, system malfunctions, alien dread.\n- **Cozy Mystery:** Snowbound lodge, warm atmosphere, hidden secrets.\n\n---\n\n## 8. Meta-Prompts (for Generating New Content)\n\n### Theme Generator\n```\nGenerate 10 new themes for 'The Cabin' game.\nEach should include: setting, mood, gameplay style, and short pitch.\n```\n\n### Content Pack Creator\n```\nUsing theme [THEME], generate a JSON content bundle:\n- theme, description, 6-10 rooms, interconnected exits\n- each room has id, description, objects, exits\nEnsure thematic consistency.\n```\n\n### Object Expansion\n```\nGenerate JSON behaviors for objects in theme [THEME]:\n- actions (take, use, open, combine)\n- state transitions\n```\n\n### Dynamic Events\n```\nFor theme [THEME], produce 5 random narrative events:\n- trigger_condition\n- event_text\n- consequences\n```\n\n---\n\n## 9. Technical Challenges & Solutions\n\n| Challenge | Solution |\n|------------|-----------|\n| Latency | Cache TTS + use streaming Whisper for low delay. |\n| STT accuracy | Confidence fallback ‚Üí re-prompt user. |\n| LLM cost | Cache parsed commands; use smaller local models for frequent actions. |\n| Offline support | Store all JSON content locally and use embedded STT/TTS. |\n\n---\n\n## 10. Future Expansions\n- Multiplayer voice sessions (‚Äútwo explorers trapped together‚Äù).\n- Daily procedural cabin stories.\n- AR overlay (physical-world cabin mapping).\n- Integration with smart speakers for ambient play.\n\n---\n\n</file_content>"},{"type":"text","text":"\n\n# Todo List (Optional - Plan Mode)\n\n\n\nWhile in PLAN MODE, if you've outlined concrete steps or requirements for the user, you may include a preliminary todo list using the task_progress parameter.\n\nReminder on how to use the task_progress parameter:\n\n\n\n1. To create or update a todo list, include the task_progress parameter in the next tool call\n\n2. Review each item and update its status:\n\n   - Mark completed items with: - [x]\n\n   - Keep incomplete items as: - [ ]\n\n   - Add new items if you discover additional steps\n\n3. Modify the list as needed:\n\n\t\t- Add any new steps you've discovered\n\n\t\t- Reorder if the sequence has changed\n\n4. Ensure the list accurately reflects the current state\n\n\n\n**Remember:** Keeping the todo list updated helps track progress and ensures nothing is missed."},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\nThe_Cabin_Game_Design_Doc.md\n\n# Visual Studio Code Open Tabs\nThe_Cabin_Game_Design_Doc.md\n\n# Current Time\n10/23/2025, 7:14:43 PM (America/Los_Angeles, UTC-7:00)\n\n# Current Working Directory (c:/GIT/agorevski/TheCabin) Files\narctic_survival.json\nclassic_horror.json\ncozy_mystery.json\nfantasy_magic.json\nsci_fi_isolation.json\nThe_Cabin_Game_Design_Doc.md\n\n# Workspace Configuration\n{\n  \"workspaces\": {\n    \"c:\\\\GIT\\\\agorevski\\\\TheCabin\": {\n      \"hint\": \"TheCabin\",\n      \"associatedRemoteUrls\": [\n        \"origin: https://github.com/agorevski/TheCabin.git\"\n      ]\n    }\n  }\n}\n\n# Detected CLI Tools\nThese are some of the tools on the user's machine, and may be useful if needed to accomplish the task: git, docker, kubectl, az, npm, yarn, pnpm, pip, go, curl, cmake, python, node, code, dotnet. This list is not exhaustive, and other tools may be available.\n\n# Context Window Usage\n0 / 128K tokens used (0%)\n\n# Current Mode\nPLAN MODE\nIn this mode you should focus on information gathering, asking questions, and architecting a solution. Once you have a plan, use the plan_mode_respond tool to engage in a conversational back and forth with the user. Do not use the plan_mode_respond tool until you've gathered all the information you need e.g. with read_file or ask_followup_question.\n(Remember: If it seems the user wants you to use tools only available in Act Mode, you should ask the user to \"toggle to Act mode\" (use those words) - they will have to manually do this themselves with the Plan/Act toggle button below. You do not have the ability to switch to Act Mode yourself, and must wait for the user to do it themselves once they are satisfied with the plan. You also cannot present an option to toggle to Act mode, as this will be something you need to direct the user to do manually themselves.)\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll analyze the game design document and create a comprehensive architecture document for implementing The Cabin as a .NET MAUI Android application. Let me first examine the existing JSON files to understand the content structure better.\n\n<read_file>\n<path>classic_horror.json</path>\n</read_file>\n\n<read_file>\n<path>arctic_survival.json</path>\n</read_file>\n\n[Response interrupted by a tool use result. Only one tool may be used at a time and should be placed at the end of the message.]"}]},{"role":"user","content":[{"type":"text","text":"[read_file for 'classic_horror.json'] Result:"},{"type":"text","text":"The tool execution failed with the following error:\n<error>\nTool execution failed: Error: File not found: c:\\GIT\\agorevski\\TheCabin\\classic_horror.json\n</error>"},{"type":"text","text":"[read_file for 'classic_horror.json'] Result:"},{"type":"text","text":"The tool execution failed with the following error:\n<error>\nError executing read_file: File not found: c:\\GIT\\agorevski\\TheCabin\\classic_horror.json\n</error>"},{"type":"text","text":"Tool [read_file] was not executed because a tool has already been used in this message. Only one tool may be used per message. You must assess the first tool's result before proceeding to use the next tool."},{"type":"text","text":"\n\n# Todo List (Optional - Plan Mode)\n\n\n\nWhile in PLAN MODE, if you've outlined concrete steps or requirements for the user, you may include a preliminary todo list using the task_progress parameter.\n\nReminder on how to use the task_progress parameter:\n\n\n\n1. To create or update a todo list, include the task_progress parameter in the next tool call\n\n2. Review each item and update its status:\n\n   - Mark completed items with: - [x]\n\n   - Keep incomplete items as: - [ ]\n\n   - Add new items if you discover additional steps\n\n3. Modify the list as needed:\n\n\t\t- Add any new steps you've discovered\n\n\t\t- Reorder if the sequence has changed\n\n4. Ensure the list accurately reflects the current state\n\n\n\n**Remember:** Keeping the todo list updated helps track progress and ensures nothing is missed."},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndata_packs/sci_fi_isolation.json\n\n# Visual Studio Code Open Tabs\ndata_packs/sci_fi_isolation.json\n\n# Current Time\n10/23/2025, 7:14:57 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n0 / 127.805K tokens used (0%)\n\n# Current Mode\nPLAN MODE\nIn this mode you should focus on information gathering, asking questions, and architecting a solution. Once you have a plan, use the plan_mode_respond tool to engage in a conversational back and forth with the user. Do not use the plan_mode_respond tool until you've gathered all the information you need e.g. with read_file or ask_followup_question.\n(Remember: If it seems the user wants you to use tools only available in Act Mode, you should ask the user to \"toggle to Act mode\" (use those words) - they will have to manually do this themselves with the Plan/Act toggle button below. You do not have the ability to switch to Act Mode yourself, and must wait for the user to do it themselves once they are satisfied with the plan. You also cannot present an option to toggle to Act mode, as this will be something you need to direct the user to do manually themselves.)\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I see the JSON files aren't in the root directory. Let me explore the directory structure to understand the current project layout.\n\n<list_files>\n<path>.</path>\n<recursive>true</recursive>\n</list_files>"}]},{"role":"user","content":[{"type":"text","text":"[list_files for '.'] Result:"},{"type":"text","text":"The_Cabin_Game_Design_Doc.md\ndata_packs/\ndata_packs/arctic_survival.json\ndata_packs/classic_horror.json\ndata_packs/cozy_mystery.json\ndata_packs/fantasy_magic.json\ndata_packs/sci_fi_isolation.json"},{"type":"text","text":"\n\n# Todo List (Optional - Plan Mode)\n\n\n\nWhile in PLAN MODE, if you've outlined concrete steps or requirements for the user, you may include a preliminary todo list using the task_progress parameter.\n\nReminder on how to use the task_progress parameter:\n\n\n\n1. To create or update a todo list, include the task_progress parameter in the next tool call\n\n2. Review each item and update its status:\n\n   - Mark completed items with: - [x]\n\n   - Keep incomplete items as: - [ ]\n\n   - Add new items if you discover additional steps\n\n3. Modify the list as needed:\n\n\t\t- Add any new steps you've discovered\n\n\t\t- Reorder if the sequence has changed\n\n4. Ensure the list accurately reflects the current state\n\n\n\n**Remember:** Keeping the todo list updated helps track progress and ensures nothing is missed."},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndata_packs/sci_fi_isolation.json\n\n# Visual Studio Code Open Tabs\ndata_packs/sci_fi_isolation.json\n\n# Current Time\n10/23/2025, 7:15:02 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n15,775 / 127.805K tokens used (12%)\n\n# Current Mode\nPLAN MODE\nIn this mode you should focus on information gathering, asking questions, and architecting a solution. Once you have a plan, use the plan_mode_respond tool to engage in a conversational back and forth with the user. Do not use the plan_mode_respond tool until you've gathered all the information you need e.g. with read_file or ask_followup_question.\n(Remember: If it seems the user wants you to use tools only available in Act Mode, you should ask the user to \"toggle to Act mode\" (use those words) - they will have to manually do this themselves with the Plan/Act toggle button below. You do not have the ability to switch to Act Mode yourself, and must wait for the user to do it themselves once they are satisfied with the plan. You also cannot present an option to toggle to Act mode, as this will be something you need to direct the user to do manually themselves.)\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"<read_file>\n<path>data_packs/classic_horror.json</path>\n</read_file>"}]},{"role":"user","content":[{"type":"text","text":"[read_file for 'data_packs/classic_horror.json'] Result:"},{"type":"text","text":"The tool execution failed with the following error:\n<error>\nTool execution failed: Error: File not found: c:\\GIT\\agorevski\\TheCabin\\data_packs\\classic_horror.json\n</error>"},{"type":"text","text":"[read_file for 'data_packs/classic_horror.json'] Result:"},{"type":"text","text":"The tool execution failed with the following error:\n<error>\nError executing read_file: File not found: c:\\GIT\\agorevski\\TheCabin\\data_packs\\classic_horror.json\n</error>"},{"type":"text","text":"\n\n# Todo List (Optional - Plan Mode)\n\n\n\nWhile in PLAN MODE, if you've outlined concrete steps or requirements for the user, you may include a preliminary todo list using the task_progress parameter.\n\nReminder on how to use the task_progress parameter:\n\n\n\n1. To create or update a todo list, include the task_progress parameter in the next tool call\n\n2. Review each item and update its status:\n\n   - Mark completed items with: - [x]\n\n   - Keep incomplete items as: - [ ]\n\n   - Add new items if you discover additional steps\n\n3. Modify the list as needed:\n\n\t\t- Add any new steps you've discovered\n\n\t\t- Reorder if the sequence has changed\n\n4. Ensure the list accurately reflects the current state\n\n\n\n**Remember:** Keeping the todo list updated helps track progress and ensures nothing is missed."},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\nstory_packs/sci_fi_isolation.json\n\n# Visual Studio Code Open Tabs\nstory_packs/sci_fi_isolation.json\n\n# Current Time\n10/23/2025, 7:15:06 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n16,345 / 127.805K tokens used (13%)\n\n# Current Mode\nPLAN MODE\nIn this mode you should focus on information gathering, asking questions, and architecting a solution. Once you have a plan, use the plan_mode_respond tool to engage in a conversational back and forth with the user. Do not use the plan_mode_respond tool until you've gathered all the information you need e.g. with read_file or ask_followup_question.\n(Remember: If it seems the user wants you to use tools only available in Act Mode, you should ask the user to \"toggle to Act mode\" (use those words) - they will have to manually do this themselves with the Plan/Act toggle button below. You do not have the ability to switch to Act Mode yourself, and must wait for the user to do it themselves once they are satisfied with the plan. You also cannot present an option to toggle to Act mode, as this will be something you need to direct the user to do manually themselves.)\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"<list_files>\n<path>.</path>\n<recursive>false</recursive>\n</list_files>"}]},{"role":"user","content":[{"type":"text","text":"[list_files for '.'] Result:"},{"type":"text","text":"The_Cabin_Game_Design_Doc.md\n.git/\nstory_packs/"},{"type":"text","text":"\n\n# Todo List (Optional - Plan Mode)\n\n\n\nWhile in PLAN MODE, if you've outlined concrete steps or requirements for the user, you may include a preliminary todo list using the task_progress parameter.\n\nReminder on how to use the task_progress parameter:\n\n\n\n1. To create or update a todo list, include the task_progress parameter in the next tool call\n\n2. Review each item and update its status:\n\n   - Mark completed items with: - [x]\n\n   - Keep incomplete items as: - [ ]\n\n   - Add new items if you discover additional steps\n\n3. Modify the list as needed:\n\n\t\t- Add any new steps you've discovered\n\n\t\t- Reorder if the sequence has changed\n\n4. Ensure the list accurately reflects the current state\n\n\n\n**Remember:** Keeping the todo list updated helps track progress and ensures nothing is missed."},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\nstory_packs/sci_fi_isolation.json\n\n# Visual Studio Code Open Tabs\nstory_packs/sci_fi_isolation.json\n\n# Current Time\n10/23/2025, 7:15:10 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n16,973 / 127.805K tokens used (13%)\n\n# Current Mode\nPLAN MODE\nIn this mode you should focus on information gathering, asking questions, and architecting a solution. Once you have a plan, use the plan_mode_respond tool to engage in a conversational back and forth with the user. Do not use the plan_mode_respond tool until you've gathered all the information you need e.g. with read_file or ask_followup_question.\n(Remember: If it seems the user wants you to use tools only available in Act Mode, you should ask the user to \"toggle to Act mode\" (use those words) - they will have to manually do this themselves with the Plan/Act toggle button below. You do not have the ability to switch to Act Mode yourself, and must wait for the user to do it themselves once they are satisfied with the plan. You also cannot present an option to toggle to Act mode, as this will be something you need to direct the user to do manually themselves.)\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"<read_file>\n<path>story_packs/sci_fi_isolation.json</path>\n</read_file>"}]},{"role":"user","content":[{"type":"text","text":"[read_file for 'story_packs/sci_fi_isolation.json'] Result:"},{"type":"text","text":"{\n  \"theme\": \"Sci-Fi Isolation\",\n  \"description\": \"Trapped in a failing cabin aboard a derelict spacecraft orbiting a dead planet.\",\n  \"rooms\": [\n    {\n      \"id\": \"bridge\",\n      \"description\": \"Broken panels flicker erratically. A viewport reveals the planet\\u2019s red storms.\",\n      \"objects\": [\n        \"panel\",\n        \"helmet\",\n        \"console\"\n      ],\n      \"exits\": {\n        \"south\": \"quarters\"\n      }\n    },\n    {\n      \"id\": \"quarters\",\n      \"description\": \"Your cryopod lies shattered. A log recorder blinks with a red light.\",\n      \"objects\": [\n        \"cryopod\",\n        \"log_recorder\"\n      ],\n      \"exits\": {\n        \"north\": \"bridge\",\n        \"east\": \"engine_room\"\n      }\n    },\n    {\n      \"id\": \"engine_room\",\n      \"description\": \"Pipes hiss steam. A reactor core pulses weakly in the gloom.\",\n      \"objects\": [\n        \"reactor\",\n        \"toolkit\"\n      ],\n      \"exits\": {\n        \"west\": \"quarters\"\n      }\n    }\n  ]\n}"},{"type":"text","text":"\n\n# Todo List (Optional - Plan Mode)\n\n\n\nWhile in PLAN MODE, if you've outlined concrete steps or requirements for the user, you may include a preliminary todo list using the task_progress parameter.\n\nReminder on how to use the task_progress parameter:\n\n\n\n1. To create or update a todo list, include the task_progress parameter in the next tool call\n\n2. Review each item and update its status:\n\n   - Mark completed items with: - [x]\n\n   - Keep incomplete items as: - [ ]\n\n   - Add new items if you discover additional steps\n\n3. Modify the list as needed:\n\n\t\t- Add any new steps you've discovered\n\n\t\t- Reorder if the sequence has changed\n\n4. Ensure the list accurately reflects the current state\n\n\n\n**Remember:** Keeping the todo list updated helps track progress and ensures nothing is missed."},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\nstory_packs/sci_fi_isolation.json\n\n# Visual Studio Code Open Tabs\nstory_packs/sci_fi_isolation.json\n\n# Current Time\n10/23/2025, 7:15:13 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n17,507 / 127.805K tokens used (14%)\n\n# Current Mode\nPLAN MODE\nIn this mode you should focus on information gathering, asking questions, and architecting a solution. Once you have a plan, use the plan_mode_respond tool to engage in a conversational back and forth with the user. Do not use the plan_mode_respond tool until you've gathered all the information you need e.g. with read_file or ask_followup_question.\n(Remember: If it seems the user wants you to use tools only available in Act Mode, you should ask the user to \"toggle to Act mode\" (use those words) - they will have to manually do this themselves with the Plan/Act toggle button below. You do not have the ability to switch to Act Mode yourself, and must wait for the user to do it themselves once they are satisfied with the plan. You also cannot present an option to toggle to Act mode, as this will be something you need to direct the user to do manually themselves.)\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"<plan_mode_respond>\n<response>\nI've analyzed the game design document and examined the existing story pack structure. I'll create a comprehensive set of architecture and design documents for implementing The Cabin as a .NET MAUI Android application.\n\n## Proposed Documentation Structure\n\nI'll create the following numbered markdown files in a `/docs/` folder:\n\n### **01-project-overview.md**\n- Executive summary\n- Project goals and scope\n- Technology stack justification\n- Target platform specifics (Android via MAUI)\n\n### **02-system-architecture.md**\n- High-level architecture diagram\n- Layer definitions (Presentation, Business Logic, Data, Services)\n- Component interaction flows\n- MAUI-specific architectural patterns (MVVM)\n\n### **03-technical-stack.md**\n- .NET MAUI framework details\n- Speech recognition options (Android SpeechRecognizer vs. offline alternatives)\n- LLM integration approaches (OpenAI API, local models)\n- Text-to-Speech implementation\n- Database options (SQLite, LiteDB)\n- Required NuGet packages\n\n### **04-data-models.md**\n- Detailed C# class definitions for:\n  - Room, Object, Player State, Inventory\n  - Command structures (parsed voice inputs)\n  - Game state and save data\n  - Theme/Story pack definitions\n- JSON schema specifications\n\n### **05-voice-pipeline.md**\n- Speech-to-Text implementation details\n- Voice command processing workflow\n- Parser integration (GPT/LLM)\n- Error handling and confidence thresholds\n- Offline vs. online modes\n\n### **06-game-engine.md**\n- State machine architecture\n- Command processing logic\n- Room navigation system\n- Inventory management\n- Puzzle/interaction system\n- Save/load mechanisms\n\n### **07-ui-ux-design.md**\n- MAUI UI component breakdown\n- Screen layouts and navigation\n- Voice interface patterns\n- Accessibility considerations\n- Theme and styling approach\n\n### **08-maui-implementation.md**\n- Project structure and organization\n- MVVM pattern implementation\n- Platform-specific code (Android)\n- Dependency injection setup\n- Service registration\n\n### **09-content-management.md**\n- Story pack format and structure\n- Asset organization\n- Dynamic content loading\n- Theme switching mechanism\n- Content validation\n\n### **10-deployment-strategy.md**\n- Build and packaging\n- Android manifest configuration\n- Permissions requirements\n- Testing strategy\n- Distribution (Google Play considerations)\n\n### **11-future-roadmap.md**\n- Phase 1 MVP features\n- Phase 2 enhancements\n- Phase 3 advanced features\n- Scalability considerations\n\nEach document will include:\n- Detailed technical specifications\n- Code examples and snippets\n- Architecture diagrams (in markdown)\n- Implementation notes specific to MAUI\n- Best practices and recommendations\n\nWould you like me to proceed with creating these documents? Are there any specific aspects you'd like me to emphasize or any additional documents you'd like included?\n</response>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [ ] Create documentation structure in /docs/ folder\n- [ ] Write 01-project-overview.md\n- [ ] Write 02-system-architecture.md\n- [ ] Write 03-technical-stack.md\n- [ ] Write 04-data-models.md\n- [ ] Write 05-voice-pipeline.md\n- [ ] Write 06-game-engine.md\n- [ ] Write 07-ui-ux-design.md\n- [ ] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</plan_mode_respond>"}]},{"role":"user","content":[{"type":"text","text":"[plan_mode_respond] Result:"},{"type":"text","text":"[The user has switched to ACT MODE, so you may now proceed with the task.]"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\nstory_packs/sci_fi_isolation.json\n\n# Visual Studio Code Open Tabs\nstory_packs/sci_fi_isolation.json\n\n# Current Time\n10/23/2025, 7:15:37 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n19,117 / 128K tokens used (15%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll now create the comprehensive documentation structure. Let me start by creating the docs folder and the first document.\n\n<write_to_file>\n<path>docs/01-project-overview.md</path>\n<content># 01 - Project Overview\n\n## Executive Summary\n\n**The Cabin** is a voice-controlled interactive fiction game for Android, built using .NET MAUI. Players explore mysterious environments by speaking commands, experiencing an immersive narrative-driven adventure that combines classic text adventure gameplay with modern speech recognition and AI-powered natural language processing.\n\n## Project Goals\n\n### Primary Objectives\n1. **Voice-First Experience**: Create a hands-free gaming experience using speech recognition and text-to-speech\n2. **Cross-Platform Foundation**: Leverage .NET MAUI for potential future iOS support while initially targeting Android\n3. **AI-Enhanced Gameplay**: Integrate LLM-based command parsing for natural language understanding\n4. **Rich Narrative Content**: Support multiple thematic story packs with extensible content system\n5. **Offline Capability**: Ensure core gameplay functions without internet connectivity\n\n### Success Criteria\n- Speech recognition accuracy > 90% for common commands\n- Command processing latency < 2 seconds\n- Smooth 60 FPS UI performance\n- Support for 5+ thematic story packs\n- Battery consumption < 15% per hour of gameplay\n\n## Scope\n\n### In Scope\n- Android application (API Level 23+, Android 6.0+)\n- Voice input and output\n- 5 pre-built thematic story packs\n- Local game state persistence\n- Offline speech recognition option\n- Online LLM integration for command parsing\n- Text-based gameplay with voice narration\n- Inventory and puzzle systems\n- Save/load functionality\n\n### Out of Scope (MVP)\n- iOS implementation\n- Multiplayer functionality\n- AR/VR features\n- Smart speaker integration\n- Real-time voice synthesis during gameplay\n- User-generated content tools\n- Cloud save synchronization\n\n### Future Considerations\n- iOS version via MAUI\n- Procedurally generated content\n- Community content marketplace\n- Accessibility features (visual impairment support)\n- Localization and multi-language support\n\n## Technology Stack Justification\n\n### .NET MAUI\n**Chosen for:**\n- Native Android performance\n- C# language benefits (strong typing, async/await, LINQ)\n- Extensive library ecosystem\n- Future cross-platform expansion (iOS, Windows)\n- Mature MVVM framework support\n- Microsoft backing and long-term support\n\n**Alternatives Considered:**\n- Native Kotlin: Limited to Android only\n- Flutter: Dart language less familiar to .NET developers\n- React Native: Performance concerns for real-time audio\n- Xamarin.Forms: Deprecated in favor of MAUI\n\n### Android Target Platform\n**Minimum SDK**: API Level 23 (Android 6.0 Marshmallow)\n- 95%+ device coverage\n- Runtime permissions model support\n- Modern speech recognition APIs\n\n**Target SDK**: API Level 34 (Android 14)\n- Latest security and performance features\n- Predictive back gesture support\n- Enhanced privacy controls\n\n## Key Technical Challenges\n\n### 1. Speech Recognition Accuracy\n**Challenge**: Ambient noise, accents, and command variations\n**Mitigation**: \n- Confidence threshold filtering\n- Context-aware re-prompting\n- Multiple recognition engine support\n- User calibration option\n\n### 2. LLM Integration Latency\n**Challenge**: Network delays affecting gameplay flow\n**Mitigation**:\n- Command caching for common actions\n- Local fallback parser for basic commands\n- Async processing with loading indicators\n- Optimistic UI updates\n\n### 3. Battery Consumption\n**Challenge**: Continuous microphone and CPU usage\n**Mitigation**:\n- Push-to-talk option alongside voice activation\n- Efficient audio processing\n- TTS caching\n- Background processing optimization\n\n### 4. Offline Functionality\n**Challenge**: LLM dependency for command parsing\n**Mitigation**:\n- Local rule-based parser for standard commands\n- Offline-capable ML model integration (optional)\n- Graceful degradation of features\n- Clear online/offline mode indicators\n\n## Project Timeline (Estimated)\n\n### Phase 1: Foundation (4-6 weeks)\n- Project setup and architecture\n- Core MAUI application structure\n- Basic UI implementation\n- Data models and storage layer\n\n### Phase 2: Voice Pipeline (4-6 weeks)\n- Speech recognition integration\n- LLM parser implementation\n- TTS integration\n- Command processing engine\n\n### Phase 3: Game Engine (6-8 weeks)\n- State machine implementation\n- Room navigation system\n- Inventory and puzzle mechanics\n- Story pack loader\n\n### Phase 4: Polish & Testing (4-6 weeks)\n- UI/UX refinement\n- Performance optimization\n- Testing and bug fixes\n- Documentation\n\n### Phase 5: Deployment (2-3 weeks)\n- Google Play preparation\n- Beta testing\n- Release preparation\n\n**Total Estimated Timeline**: 20-29 weeks (5-7 months)\n\n## Success Metrics\n\n### Technical Metrics\n- App startup time < 3 seconds\n- Memory usage < 150 MB\n- APK size < 50 MB\n- Crash rate < 1%\n\n### User Experience Metrics\n- Voice command success rate > 85%\n- Average session length > 15 minutes\n- Game completion rate > 40%\n- User rating target: 4.0+ stars\n\n### Performance Metrics\n- 60 FPS UI rendering\n- Audio latency < 200ms\n- Command processing < 2 seconds\n- Battery drain < 15% per hour\n\n## Risk Assessment\n\n| Risk | Probability | Impact | Mitigation |\n|------|-------------|--------|------------|\n| Speech recognition accuracy insufficient | Medium | High | Multiple engine support, fallback text input |\n| LLM costs too high | Medium | Medium | Local parser fallback, command caching |\n| Battery drain excessive | Low | High | Push-to-talk mode, optimization |\n| Content creation bottleneck | Medium | Medium | AI-assisted content generation tools |\n| Android fragmentation issues | Medium | Medium | Extensive device testing, graceful degradation |\n\n## Team Structure Requirements\n\n### Core Team\n- **Lead Developer/Architect**: MAUI & Android expertise\n- **ML/AI Engineer**: Speech recognition & LLM integration\n- **Game Designer**: Narrative and puzzle design\n- **UI/UX Designer**: Voice interface patterns\n- **QA Engineer**: Mobile testing expertise\n\n### Supporting Roles\n- Technical Writer (documentation)\n- Sound Designer (audio feedback)\n- Content Writer (story packs)\n\n## Next Steps\n\n1. Review and approve architecture documents (02-11)\n2. Set up development environment and project structure\n3. Implement proof-of-concept for voice pipeline\n4. Design and validate data models\n5. Create first MVP iteration\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Status**: Draft for Review\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [ ] Write 02-system-architecture.md\n- [ ] Write 03-technical-stack.md\n- [ ] Write 04-data-models.md\n- [ ] Write 05-voice-pipeline.md\n- [ ] Write 06-game-engine.md\n- [ ] Write 07-ui-ux-design.md\n- [ ] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/01-project-overview.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/01-project-overview.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/01-project-overview.md\">\n# 01 - Project Overview\n\n## Executive Summary\n\n**The Cabin** is a voice-controlled interactive fiction game for Android, built using .NET MAUI. Players explore mysterious environments by speaking commands, experiencing an immersive narrative-driven adventure that combines classic text adventure gameplay with modern speech recognition and AI-powered natural language processing.\n\n## Project Goals\n\n### Primary Objectives\n1. **Voice-First Experience**: Create a hands-free gaming experience using speech recognition and text-to-speech\n2. **Cross-Platform Foundation**: Leverage .NET MAUI for potential future iOS support while initially targeting Android\n3. **AI-Enhanced Gameplay**: Integrate LLM-based command parsing for natural language understanding\n4. **Rich Narrative Content**: Support multiple thematic story packs with extensible content system\n5. **Offline Capability**: Ensure core gameplay functions without internet connectivity\n\n### Success Criteria\n- Speech recognition accuracy > 90% for common commands\n- Command processing latency < 2 seconds\n- Smooth 60 FPS UI performance\n- Support for 5+ thematic story packs\n- Battery consumption < 15% per hour of gameplay\n\n## Scope\n\n### In Scope\n- Android application (API Level 23+, Android 6.0+)\n- Voice input and output\n- 5 pre-built thematic story packs\n- Local game state persistence\n- Offline speech recognition option\n- Online LLM integration for command parsing\n- Text-based gameplay with voice narration\n- Inventory and puzzle systems\n- Save/load functionality\n\n### Out of Scope (MVP)\n- iOS implementation\n- Multiplayer functionality\n- AR/VR features\n- Smart speaker integration\n- Real-time voice synthesis during gameplay\n- User-generated content tools\n- Cloud save synchronization\n\n### Future Considerations\n- iOS version via MAUI\n- Procedurally generated content\n- Community content marketplace\n- Accessibility features (visual impairment support)\n- Localization and multi-language support\n\n## Technology Stack Justification\n\n### .NET MAUI\n**Chosen for:**\n- Native Android performance\n- C# language benefits (strong typing, async/await, LINQ)\n- Extensive library ecosystem\n- Future cross-platform expansion (iOS, Windows)\n- Mature MVVM framework support\n- Microsoft backing and long-term support\n\n**Alternatives Considered:**\n- Native Kotlin: Limited to Android only\n- Flutter: Dart language less familiar to .NET developers\n- React Native: Performance concerns for real-time audio\n- Xamarin.Forms: Deprecated in favor of MAUI\n\n### Android Target Platform\n**Minimum SDK**: API Level 23 (Android 6.0 Marshmallow)\n- 95%+ device coverage\n- Runtime permissions model support\n- Modern speech recognition APIs\n\n**Target SDK**: API Level 34 (Android 14)\n- Latest security and performance features\n- Predictive back gesture support\n- Enhanced privacy controls\n\n## Key Technical Challenges\n\n### 1. Speech Recognition Accuracy\n**Challenge**: Ambient noise, accents, and command variations\n**Mitigation**: \n- Confidence threshold filtering\n- Context-aware re-prompting\n- Multiple recognition engine support\n- User calibration option\n\n### 2. LLM Integration Latency\n**Challenge**: Network delays affecting gameplay flow\n**Mitigation**:\n- Command caching for common actions\n- Local fallback parser for basic commands\n- Async processing with loading indicators\n- Optimistic UI updates\n\n### 3. Battery Consumption\n**Challenge**: Continuous microphone and CPU usage\n**Mitigation**:\n- Push-to-talk option alongside voice activation\n- Efficient audio processing\n- TTS caching\n- Background processing optimization\n\n### 4. Offline Functionality\n**Challenge**: LLM dependency for command parsing\n**Mitigation**:\n- Local rule-based parser for standard commands\n- Offline-capable ML model integration (optional)\n- Graceful degradation of features\n- Clear online/offline mode indicators\n\n## Project Timeline (Estimated)\n\n### Phase 1: Foundation (4-6 weeks)\n- Project setup and architecture\n- Core MAUI application structure\n- Basic UI implementation\n- Data models and storage layer\n\n### Phase 2: Voice Pipeline (4-6 weeks)\n- Speech recognition integration\n- LLM parser implementation\n- TTS integration\n- Command processing engine\n\n### Phase 3: Game Engine (6-8 weeks)\n- State machine implementation\n- Room navigation system\n- Inventory and puzzle mechanics\n- Story pack loader\n\n### Phase 4: Polish & Testing (4-6 weeks)\n- UI/UX refinement\n- Performance optimization\n- Testing and bug fixes\n- Documentation\n\n### Phase 5: Deployment (2-3 weeks)\n- Google Play preparation\n- Beta testing\n- Release preparation\n\n**Total Estimated Timeline**: 20-29 weeks (5-7 months)\n\n## Success Metrics\n\n### Technical Metrics\n- App startup time < 3 seconds\n- Memory usage < 150 MB\n- APK size < 50 MB\n- Crash rate < 1%\n\n### User Experience Metrics\n- Voice command success rate > 85%\n- Average session length > 15 minutes\n- Game completion rate > 40%\n- User rating target: 4.0+ stars\n\n### Performance Metrics\n- 60 FPS UI rendering\n- Audio latency < 200ms\n- Command processing < 2 seconds\n- Battery drain < 15% per hour\n\n## Risk Assessment\n\n| Risk | Probability | Impact | Mitigation |\n|------|-------------|--------|------------|\n| Speech recognition accuracy insufficient | Medium | High | Multiple engine support, fallback text input |\n| LLM costs too high | Medium | Medium | Local parser fallback, command caching |\n| Battery drain excessive | Low | High | Push-to-talk mode, optimization |\n| Content creation bottleneck | Medium | Medium | AI-assisted content generation tools |\n| Android fragmentation issues | Medium | Medium | Extensive device testing, graceful degradation |\n\n## Team Structure Requirements\n\n### Core Team\n- **Lead Developer/Architect**: MAUI & Android expertise\n- **ML/AI Engineer**: Speech recognition & LLM integration\n- **Game Designer**: Narrative and puzzle design\n- **UI/UX Designer**: Voice interface patterns\n- **QA Engineer**: Mobile testing expertise\n\n### Supporting Roles\n- Technical Writer (documentation)\n- Sound Designer (audio feedback)\n- Content Writer (story packs)\n\n## Next Steps\n\n1. Review and approve architecture documents (02-11)\n2. Set up development environment and project structure\n3. Implement proof-of-concept for voice pipeline\n4. Design and validate data models\n5. Create first MVP iteration\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Status**: Draft for Review\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/01-project-overview.md\n\n# Visual Studio Code Open Tabs\nstory_packs/arctic_survival.json\ndocs/01-project-overview.md\n\n# Current Time\n10/23/2025, 7:16:22 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n22,286 / 127.805K tokens used (17%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"<write_to_file>\n<path>docs/02-system-architecture.md</path>\n<content># 02 - System Architecture\n\n## High-Level Architecture\n\nThe Cabin follows a layered architecture pattern optimized for .NET MAUI mobile applications, emphasizing separation of concerns, testability, and maintainability.\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                    PRESENTATION LAYER                        ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ\n‚îÇ  ‚îÇ   Views    ‚îÇ  ‚îÇ ViewModels ‚îÇ  ‚îÇ  Value Converters  ‚îÇ    ‚îÇ\n‚îÇ  ‚îÇ  (XAML/C#) ‚îÇ‚óÑ‚îÄ‚î§   (MVVM)   ‚îÇ  ‚îÇ    Behaviors       ‚îÇ    ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                            ‚îÇ\n                            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                   APPLICATION LAYER                          ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇ   Services   ‚îÇ  ‚îÇ  Orchestrators‚îÇ  ‚îÇ   State Mgmt    ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ (Business    ‚îÇ  ‚îÇ  (Game Flow)  ‚îÇ  ‚îÇ   (Game State)  ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ  Logic)      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                                            ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                            ‚îÇ\n                            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                     DOMAIN LAYER                             ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇ Game Engine  ‚îÇ  ‚îÇ Command      ‚îÇ  ‚îÇ  Story Pack     ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ (Core Logic) ‚îÇ  ‚îÇ Processor    ‚îÇ  ‚îÇ  Loader         ‚îÇ   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                            ‚îÇ\n                            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                 INFRASTRUCTURE LAYER                         ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇ Voice Services‚îÇ  ‚îÇ Data Access  ‚îÇ  ‚îÇ  External APIs  ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ (STT/TTS)    ‚îÇ  ‚îÇ (Repository) ‚îÇ  ‚îÇ  (LLM)          ‚îÇ   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                            ‚îÇ\n                            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                    PLATFORM LAYER                            ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇAndroid APIs  ‚îÇ  ‚îÇ  File System ‚îÇ  ‚îÇ   Database      ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ(Native)      ‚îÇ  ‚îÇ   Storage    ‚îÇ  ‚îÇ   (SQLite)      ‚îÇ   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## Core Components\n\n### 1. Presentation Layer\n\n#### Views (XAML + Code-Behind)\n- **MainPage**: Primary game interface\n- **InventoryPage**: Item management\n- **SettingsPage**: Configuration options\n- **StoryPackSelectorPage**: Theme selection\n- **LoadGamePage**: Save game management\n\n#### ViewModels (MVVM Pattern)\n- **MainViewModel**: Orchestrates game flow and UI state\n- **InventoryViewModel**: Manages inventory display\n- **SettingsViewModel**: Configuration management\n- **StoryPackViewModel**: Theme selection logic\n\n#### UI Components\n- **VoiceControlPanel**: Microphone button, waveform animation\n- **NarrativeTextView**: Story text display with scrolling\n- **StatsBar**: Health, light level, time indicators\n- **TranscriptPreview**: Real-time speech recognition feedback\n\n### 2. Application Layer\n\n#### Services\n```csharp\n// Service interfaces\npublic interface IVoiceRecognitionService\npublic interface ITextToSpeechService\npublic interface ICommandParserService\npublic interface IGameStateService\npublic interface IStoryPackService\npublic interface ISettingsService\n```\n\n#### Orchestrators\n- **GameFlowOrchestrator**: Coordinates voice ‚Üí parse ‚Üí execute ‚Üí respond cycle\n- **SaveGameOrchestrator**: Manages game state persistence\n- **ThemeOrchestrator**: Handles theme switching\n\n### 3. Domain Layer\n\n#### Game Engine\n- **GameStateMachine**: Core state management and room transitions\n- **ActionExecutor**: Processes validated commands\n- **PuzzleEngine**: Handles puzzle logic and state\n- **InventoryManager**: Item collection and usage\n\n#### Command Processing\n- **CommandParser**: Converts parsed JSON to domain commands\n- **CommandValidator**: Validates commands against game state\n- **ContextManager**: Maintains conversation history\n\n#### Models (See Document 04 for details)\n- Room, Object, Player, Inventory, Command structures\n\n### 4. Infrastructure Layer\n\n#### Voice Services\n- **AndroidSpeechRecognizer**: Platform-specific STT\n- **WhisperService**: Offline speech recognition (optional)\n- **TtsService**: Text-to-speech implementation\n- **AudioManager**: Audio resource management\n\n#### Data Access\n- **StoryPackRepository**: Loads theme JSON files\n- **GameStateRepository**: Saves/loads game progress\n- **CacheRepository**: Stores parsed command cache\n\n#### External Services\n- **LlmApiClient**: OpenAI/Azure OpenAI integration\n- **LocalParserService**: Fallback rule-based parser\n\n### 5. Platform Layer (Android-Specific)\n\n#### Android Services\n- Permission management (RECORD_AUDIO, etc.)\n- Background service support\n- Notification handling\n- Battery optimization handling\n\n## Data Flow Diagrams\n\n### Primary Game Loop Flow\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Player    ‚îÇ\n‚îÇ   Speaks    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  VoiceRecognitionService            ‚îÇ\n‚îÇ  - Activates microphone             ‚îÇ\n‚îÇ  - Records audio                    ‚îÇ\n‚îÇ  - Calls Android SpeechRecognizer   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ (Audio ‚Üí Text)\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  TranscriptPreview (UI Update)      ‚îÇ\n‚îÇ  \"You said: take the lantern\"       ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  CommandParserService               ‚îÇ\n‚îÇ  - Checks cache first               ‚îÇ\n‚îÇ  - Falls back to LLM API            ‚îÇ\n‚îÇ  - Returns structured JSON          ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ (Text ‚Üí Command)\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  GameStateMachine                   ‚îÇ\n‚îÇ  - Validates command                ‚îÇ\n‚îÇ  - Checks game state                ‚îÇ\n‚îÇ  - Executes action                  ‚îÇ\n‚îÇ  - Updates state                    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ (Command ‚Üí Result)\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  NarrativeTextView (UI Update)      ‚îÇ\n‚îÇ  \"You pick up the dusty lantern\"    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  TextToSpeechService (Optional)     ‚îÇ\n‚îÇ  - Synthesizes narration            ‚îÇ\n‚îÇ  - Plays audio                      ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### Command Parsing Flow\n\n```\nRaw Text Input: \"Pick up the lantern on the table\"\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Cache Check                        ‚îÇ\n‚îÇ  Key: hash(text + context)          ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚îú‚îÄ Cache Hit ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n       ‚îÇ                     ‚îÇ\n       ‚îú‚îÄ Cache Miss         ‚îÇ\n       ‚îÇ      ‚ñº              ‚îÇ\n       ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îÇ\n       ‚îÇ  ‚îÇ LLM API    ‚îÇ     ‚îÇ\n       ‚îÇ  ‚îÇ Call       ‚îÇ     ‚îÇ\n       ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îÇ\n       ‚îÇ        ‚îÇ            ‚îÇ\n       ‚ñº        ‚ñº            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Parsed Command JSON                ‚îÇ\n‚îÇ  {                                  ‚îÇ\n‚îÇ    \"verb\": \"take\",                  ‚îÇ\n‚îÇ    \"object\": \"lantern\",             ‚îÇ\n‚îÇ    \"context\": \"table\",              ‚îÇ\n‚îÇ    \"confidence\": 0.95               ‚îÇ\n‚îÇ  }                                  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Command Validator                  ‚îÇ\n‚îÇ  - Object exists in current room?   ‚îÇ\n‚îÇ  - Action allowed in current state? ‚îÇ\n‚îÇ  - Required items in inventory?     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚îú‚îÄ Valid ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n       ‚îÇ                      ‚îÇ\n       ‚îú‚îÄ Invalid             ‚îÇ\n       ‚îÇ      ‚ñº               ‚îÇ\n       ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îÇ\n       ‚îÇ  ‚îÇ Error      ‚îÇ      ‚îÇ\n       ‚îÇ  ‚îÇ Response   ‚îÇ      ‚îÇ\n       ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îÇ\n       ‚îÇ                      ‚îÇ\n       ‚ñº                      ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  ActionExecutor                     ‚îÇ\n‚îÇ  - Execute game logic               ‚îÇ\n‚îÇ  - Update game state                ‚îÇ\n‚îÇ  - Generate response text           ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## MVVM Pattern Implementation\n\n### ViewModel Structure\n\n```csharp\npublic class MainViewModel : BaseViewModel\n{\n    // Services (injected)\n    private readonly IVoiceRecognitionService _voiceService;\n    private readonly ICommandParserService _parserService;\n    private readonly IGameStateService _gameStateService;\n    private readonly ITextToSpeechService _ttsService;\n    \n    // Observable Properties\n    public ObservableCollection<NarrativeEntry> StoryFeed { get; }\n    public string CurrentLocation { get; set; }\n    public int PlayerHealth { get; set; }\n    public string LightLevel { get; set; }\n    public string TranscriptText { get; set; }\n    public bool IsListening { get; set; }\n    public bool IsProcessing { get; set; }\n    \n    // Commands (ICommand)\n    public ICommand StartListeningCommand { get; }\n    public ICommand StopListeningCommand { get; }\n    public ICommand ShowInventoryCommand { get; }\n    public ICommand SaveGameCommand { get; }\n    \n    // Methods\n    public async Task ProcessVoiceCommandAsync();\n    private async Task ExecuteGameCommandAsync(ParsedCommand cmd);\n    private void UpdateUIState();\n}\n```\n\n### Dependency Injection Setup\n\n```csharp\n// MauiProgram.cs\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        \n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts => { /* ... */ });\n        \n        // Register Services\n        builder.Services.AddSingleton<IVoiceRecognitionService, AndroidSpeechRecognizer>();\n        builder.Services.AddSingleton<ITextToSpeechService, MauiTtsService>();\n        builder.Services.AddSingleton<ICommandParserService, LlmCommandParser>();\n        builder.Services.AddSingleton<IGameStateService, GameStateService>();\n        builder.Services.AddSingleton<IStoryPackService, StoryPackService>();\n        \n        // Register ViewModels\n        builder.Services.AddTransient<MainViewModel>();\n        builder.Services.AddTransient<InventoryViewModel>();\n        builder.Services.AddTransient<SettingsViewModel>();\n        \n        // Register Views\n        builder.Services.AddTransient<MainPage>();\n        builder.Services.AddTransient<InventoryPage>();\n        builder.Services.AddTransient<SettingsPage>();\n        \n        return builder.Build();\n    }\n}\n```\n\n## State Management\n\n### Game State Hierarchy\n\n```\nGameState (Root)\n‚îú‚îÄ‚îÄ PlayerState\n‚îÇ   ‚îú‚îÄ‚îÄ CurrentLocation\n‚îÇ   ‚îú‚îÄ‚îÄ Health\n‚îÇ   ‚îú‚îÄ‚îÄ Inventory[]\n‚îÇ   ‚îî‚îÄ‚îÄ StatusEffects[]\n‚îú‚îÄ‚îÄ WorldState\n‚îÇ   ‚îú‚îÄ‚îÄ CurrentTheme\n‚îÇ   ‚îú‚îÄ‚îÄ Rooms[]\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RoomState\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Objects[]\n‚îÇ   ‚îî‚îÄ‚îÄ GlobalVariables{}\n‚îú‚îÄ‚îÄ ProgressState\n‚îÇ   ‚îú‚îÄ‚îÄ CompletedPuzzles[]\n‚îÇ   ‚îú‚îÄ‚îÄ UnlockedAreas[]\n‚îÇ   ‚îî‚îÄ‚îÄ StoryFlags{}\n‚îî‚îÄ‚îÄ MetaState\n    ‚îú‚îÄ‚îÄ PlayTime\n    ‚îú‚îÄ‚îÄ SaveTimestamp\n    ‚îî‚îÄ‚îÄ Version\n```\n\n### State Persistence Strategy\n\n1. **In-Memory State**: Active game state held in `GameStateService`\n2. **Auto-Save**: State persisted every significant action\n3. **Manual Save**: Player-triggered save to named slots\n4. **Checkpoint System**: Automatic checkpoints at major story points\n\n## Communication Patterns\n\n### Event Aggregator Pattern\n\n```csharp\npublic interface IEventAggregator\n{\n    void Subscribe<T>(Action<T> handler);\n    void Publish<T>(T eventData);\n}\n\n// Events\npublic class GameStateChangedEvent { }\npublic class InventoryUpdatedEvent { }\npublic class LocationChangedEvent { }\npublic class CommandProcessedEvent { }\n```\n\n### Message Flow\n\n```\nView ‚Üí ViewModel ‚Üí Service ‚Üí Domain ‚Üí Repository\n  ‚Üë                                        ‚Üì\n  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Events/Notifications ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## Error Handling Strategy\n\n### Layered Error Handling\n\n1. **UI Layer**: User-friendly error messages\n2. **Service Layer**: Retry logic and fallbacks\n3. **Domain Layer**: Business rule validation\n4. **Infrastructure Layer**: Exception logging\n\n### Specific Strategies\n\n```csharp\n// Voice Recognition Errors\ntry\n{\n    var result = await _voiceService.RecognizeSpeechAsync();\n}\ncatch (PermissionException ex)\n{\n    // Prompt user for microphone permission\n}\ncatch (SpeechRecognitionException ex)\n{\n    // Show \"Didn't catch that, please try again\"\n}\n\n// LLM API Errors\ntry\n{\n    var parsed = await _llmService.ParseCommandAsync(text);\n}\ncatch (ApiException ex)\n{\n    // Fall back to local parser\n    var parsed = await _localParser.ParseCommandAsync(text);\n}\ncatch (NetworkException ex)\n{\n    // Queue command for retry or offer offline mode\n}\n```\n\n## Performance Considerations\n\n### Optimization Strategies\n\n1. **Lazy Loading**: Load story packs on demand\n2. **Object Pooling**: Reuse audio buffers and UI elements\n3. **Async/Await**: Non-blocking operations for all I/O\n4. **Caching**: Command cache, TTS audio cache, image cache\n5. **Virtual Scrolling**: For long story text feeds\n6. **Background Processing**: Parse commands off UI thread\n\n### Memory Management\n\n- Dispose audio resources properly\n- Clear old story text beyond certain threshold\n- Unload unused theme assets\n- Monitor memory pressure events\n\n## Security Considerations\n\n### Data Protection\n\n1. **API Keys**: Stored in secure storage, never in code\n2. **Permissions**: Runtime permission requests\n3. **Network Security**: HTTPS only for API calls\n4. **Data Encryption**: Encrypt save files (optional)\n\n### Privacy\n\n- Voice data processed locally or transmitted securely\n- No persistent audio recording storage\n- Clear privacy policy for any telemetry\n\n## Testing Architecture\n\n### Test Pyramid\n\n```\n        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n        ‚îÇ    E2E    ‚îÇ  (10%)\n        ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n        ‚îÇIntegration‚îÇ  (20%)\n        ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n        ‚îÇ   Unit    ‚îÇ  (70%)\n        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### Test Strategy\n\n1. **Unit Tests**: Services, ViewModels, Domain Logic\n2. **Integration Tests**: Service interactions, Data access\n3. **UI Tests**: Critical user flows\n4. **Manual Tests**: Voice recognition accuracy, Device compatibility\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 03-technical-stack.md, 04-data-models.md, 08-maui-implementation.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [ ] Write 03-technical-stack.md\n- [ ] Write 04-data-models.md\n- [ ] Write 05-voice-pipeline.md\n- [ ] Write 06-game-engine.md\n- [ ] Write 07-ui-ux-design.md\n- [ ] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/02-system-architecture.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/02-system-architecture.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/02-system-architecture.md\">\n# 02 - System Architecture\n\n## High-Level Architecture\n\nThe Cabin follows a layered architecture pattern optimized for .NET MAUI mobile applications, emphasizing separation of concerns, testability, and maintainability.\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                    PRESENTATION LAYER                        ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ\n‚îÇ  ‚îÇ   Views    ‚îÇ  ‚îÇ ViewModels ‚îÇ  ‚îÇ  Value Converters  ‚îÇ    ‚îÇ\n‚îÇ  ‚îÇ  (XAML/C#) ‚îÇ‚óÑ‚îÄ‚î§   (MVVM)   ‚îÇ  ‚îÇ    Behaviors       ‚îÇ    ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                            ‚îÇ\n                            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                   APPLICATION LAYER                          ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇ   Services   ‚îÇ  ‚îÇ  Orchestrators‚îÇ  ‚îÇ   State Mgmt    ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ (Business    ‚îÇ  ‚îÇ  (Game Flow)  ‚îÇ  ‚îÇ   (Game State)  ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ  Logic)      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                                            ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                            ‚îÇ\n                            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                     DOMAIN LAYER                             ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇ Game Engine  ‚îÇ  ‚îÇ Command      ‚îÇ  ‚îÇ  Story Pack     ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ (Core Logic) ‚îÇ  ‚îÇ Processor    ‚îÇ  ‚îÇ  Loader         ‚îÇ   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                            ‚îÇ\n                            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                 INFRASTRUCTURE LAYER                         ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇ Voice Services‚îÇ  ‚îÇ Data Access  ‚îÇ  ‚îÇ  External APIs  ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ (STT/TTS)    ‚îÇ  ‚îÇ (Repository) ‚îÇ  ‚îÇ  (LLM)          ‚îÇ   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                            ‚îÇ\n                            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                    PLATFORM LAYER                            ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ\n‚îÇ  ‚îÇAndroid APIs  ‚îÇ  ‚îÇ  File System ‚îÇ  ‚îÇ   Database      ‚îÇ   ‚îÇ\n‚îÇ  ‚îÇ(Native)      ‚îÇ  ‚îÇ   Storage    ‚îÇ  ‚îÇ   (SQLite)      ‚îÇ   ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## Core Components\n\n### 1. Presentation Layer\n\n#### Views (XAML + Code-Behind)\n- **MainPage**: Primary game interface\n- **InventoryPage**: Item management\n- **SettingsPage**: Configuration options\n- **StoryPackSelectorPage**: Theme selection\n- **LoadGamePage**: Save game management\n\n#### ViewModels (MVVM Pattern)\n- **MainViewModel**: Orchestrates game flow and UI state\n- **InventoryViewModel**: Manages inventory display\n- **SettingsViewModel**: Configuration management\n- **StoryPackViewModel**: Theme selection logic\n\n#### UI Components\n- **VoiceControlPanel**: Microphone button, waveform animation\n- **NarrativeTextView**: Story text display with scrolling\n- **StatsBar**: Health, light level, time indicators\n- **TranscriptPreview**: Real-time speech recognition feedback\n\n### 2. Application Layer\n\n#### Services\n```csharp\n// Service interfaces\npublic interface IVoiceRecognitionService\npublic interface ITextToSpeechService\npublic interface ICommandParserService\npublic interface IGameStateService\npublic interface IStoryPackService\npublic interface ISettingsService\n```\n\n#### Orchestrators\n- **GameFlowOrchestrator**: Coordinates voice ‚Üí parse ‚Üí execute ‚Üí respond cycle\n- **SaveGameOrchestrator**: Manages game state persistence\n- **ThemeOrchestrator**: Handles theme switching\n\n### 3. Domain Layer\n\n#### Game Engine\n- **GameStateMachine**: Core state management and room transitions\n- **ActionExecutor**: Processes validated commands\n- **PuzzleEngine**: Handles puzzle logic and state\n- **InventoryManager**: Item collection and usage\n\n#### Command Processing\n- **CommandParser**: Converts parsed JSON to domain commands\n- **CommandValidator**: Validates commands against game state\n- **ContextManager**: Maintains conversation history\n\n#### Models (See Document 04 for details)\n- Room, Object, Player, Inventory, Command structures\n\n### 4. Infrastructure Layer\n\n#### Voice Services\n- **AndroidSpeechRecognizer**: Platform-specific STT\n- **WhisperService**: Offline speech recognition (optional)\n- **TtsService**: Text-to-speech implementation\n- **AudioManager**: Audio resource management\n\n#### Data Access\n- **StoryPackRepository**: Loads theme JSON files\n- **GameStateRepository**: Saves/loads game progress\n- **CacheRepository**: Stores parsed command cache\n\n#### External Services\n- **LlmApiClient**: OpenAI/Azure OpenAI integration\n- **LocalParserService**: Fallback rule-based parser\n\n### 5. Platform Layer (Android-Specific)\n\n#### Android Services\n- Permission management (RECORD_AUDIO, etc.)\n- Background service support\n- Notification handling\n- Battery optimization handling\n\n## Data Flow Diagrams\n\n### Primary Game Loop Flow\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   Player    ‚îÇ\n‚îÇ   Speaks    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  VoiceRecognitionService            ‚îÇ\n‚îÇ  - Activates microphone             ‚îÇ\n‚îÇ  - Records audio                    ‚îÇ\n‚îÇ  - Calls Android SpeechRecognizer   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ (Audio ‚Üí Text)\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  TranscriptPreview (UI Update)      ‚îÇ\n‚îÇ  \"You said: take the lantern\"       ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  CommandParserService               ‚îÇ\n‚îÇ  - Checks cache first               ‚îÇ\n‚îÇ  - Falls back to LLM API            ‚îÇ\n‚îÇ  - Returns structured JSON          ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ (Text ‚Üí Command)\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  GameStateMachine                   ‚îÇ\n‚îÇ  - Validates command                ‚îÇ\n‚îÇ  - Checks game state                ‚îÇ\n‚îÇ  - Executes action                  ‚îÇ\n‚îÇ  - Updates state                    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ (Command ‚Üí Result)\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  NarrativeTextView (UI Update)      ‚îÇ\n‚îÇ  \"You pick up the dusty lantern\"    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  TextToSpeechService (Optional)     ‚îÇ\n‚îÇ  - Synthesizes narration            ‚îÇ\n‚îÇ  - Plays audio                      ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### Command Parsing Flow\n\n```\nRaw Text Input: \"Pick up the lantern on the table\"\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Cache Check                        ‚îÇ\n‚îÇ  Key: hash(text + context)          ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚îú‚îÄ Cache Hit ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n       ‚îÇ                     ‚îÇ\n       ‚îú‚îÄ Cache Miss         ‚îÇ\n       ‚îÇ      ‚ñº              ‚îÇ\n       ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îÇ\n       ‚îÇ  ‚îÇ LLM API    ‚îÇ     ‚îÇ\n       ‚îÇ  ‚îÇ Call       ‚îÇ     ‚îÇ\n       ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îÇ\n       ‚îÇ        ‚îÇ            ‚îÇ\n       ‚ñº        ‚ñº            ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Parsed Command JSON                ‚îÇ\n‚îÇ  {                                  ‚îÇ\n‚îÇ    \"verb\": \"take\",                  ‚îÇ\n‚îÇ    \"object\": \"lantern\",             ‚îÇ\n‚îÇ    \"context\": \"table\",              ‚îÇ\n‚îÇ    \"confidence\": 0.95               ‚îÇ\n‚îÇ  }                                  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Command Validator                  ‚îÇ\n‚îÇ  - Object exists in current room?   ‚îÇ\n‚îÇ  - Action allowed in current state? ‚îÇ\n‚îÇ  - Required items in inventory?     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n       ‚îÇ\n       ‚îú‚îÄ Valid ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n       ‚îÇ                      ‚îÇ\n       ‚îú‚îÄ Invalid             ‚îÇ\n       ‚îÇ      ‚ñº               ‚îÇ\n       ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îÇ\n       ‚îÇ  ‚îÇ Error      ‚îÇ      ‚îÇ\n       ‚îÇ  ‚îÇ Response   ‚îÇ      ‚îÇ\n       ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îÇ\n       ‚îÇ                      ‚îÇ\n       ‚ñº                      ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  ActionExecutor                     ‚îÇ\n‚îÇ  - Execute game logic               ‚îÇ\n‚îÇ  - Update game state                ‚îÇ\n‚îÇ  - Generate response text           ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## MVVM Pattern Implementation\n\n### ViewModel Structure\n\n```csharp\npublic class MainViewModel : BaseViewModel\n{\n    // Services (injected)\n    private readonly IVoiceRecognitionService _voiceService;\n    private readonly ICommandParserService _parserService;\n    private readonly IGameStateService _gameStateService;\n    private readonly ITextToSpeechService _ttsService;\n    \n    // Observable Properties\n    public ObservableCollection<NarrativeEntry> StoryFeed { get; }\n    public string CurrentLocation { get; set; }\n    public int PlayerHealth { get; set; }\n    public string LightLevel { get; set; }\n    public string TranscriptText { get; set; }\n    public bool IsListening { get; set; }\n    public bool IsProcessing { get; set; }\n    \n    // Commands (ICommand)\n    public ICommand StartListeningCommand { get; }\n    public ICommand StopListeningCommand { get; }\n    public ICommand ShowInventoryCommand { get; }\n    public ICommand SaveGameCommand { get; }\n    \n    // Methods\n    public async Task ProcessVoiceCommandAsync();\n    private async Task ExecuteGameCommandAsync(ParsedCommand cmd);\n    private void UpdateUIState();\n}\n```\n\n### Dependency Injection Setup\n\n```csharp\n// MauiProgram.cs\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        \n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts => { /* ... */ });\n        \n        // Register Services\n        builder.Services.AddSingleton<IVoiceRecognitionService, AndroidSpeechRecognizer>();\n        builder.Services.AddSingleton<ITextToSpeechService, MauiTtsService>();\n        builder.Services.AddSingleton<ICommandParserService, LlmCommandParser>();\n        builder.Services.AddSingleton<IGameStateService, GameStateService>();\n        builder.Services.AddSingleton<IStoryPackService, StoryPackService>();\n        \n        // Register ViewModels\n        builder.Services.AddTransient<MainViewModel>();\n        builder.Services.AddTransient<InventoryViewModel>();\n        builder.Services.AddTransient<SettingsViewModel>();\n        \n        // Register Views\n        builder.Services.AddTransient<MainPage>();\n        builder.Services.AddTransient<InventoryPage>();\n        builder.Services.AddTransient<SettingsPage>();\n        \n        return builder.Build();\n    }\n}\n```\n\n## State Management\n\n### Game State Hierarchy\n\n```\nGameState (Root)\n‚îú‚îÄ‚îÄ PlayerState\n‚îÇ   ‚îú‚îÄ‚îÄ CurrentLocation\n‚îÇ   ‚îú‚îÄ‚îÄ Health\n‚îÇ   ‚îú‚îÄ‚îÄ Inventory[]\n‚îÇ   ‚îî‚îÄ‚îÄ StatusEffects[]\n‚îú‚îÄ‚îÄ WorldState\n‚îÇ   ‚îú‚îÄ‚îÄ CurrentTheme\n‚îÇ   ‚îú‚îÄ‚îÄ Rooms[]\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RoomState\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Objects[]\n‚îÇ   ‚îî‚îÄ‚îÄ GlobalVariables{}\n‚îú‚îÄ‚îÄ ProgressState\n‚îÇ   ‚îú‚îÄ‚îÄ CompletedPuzzles[]\n‚îÇ   ‚îú‚îÄ‚îÄ UnlockedAreas[]\n‚îÇ   ‚îî‚îÄ‚îÄ StoryFlags{}\n‚îî‚îÄ‚îÄ MetaState\n    ‚îú‚îÄ‚îÄ PlayTime\n    ‚îú‚îÄ‚îÄ SaveTimestamp\n    ‚îî‚îÄ‚îÄ Version\n```\n\n### State Persistence Strategy\n\n1. **In-Memory State**: Active game state held in `GameStateService`\n2. **Auto-Save**: State persisted every significant action\n3. **Manual Save**: Player-triggered save to named slots\n4. **Checkpoint System**: Automatic checkpoints at major story points\n\n## Communication Patterns\n\n### Event Aggregator Pattern\n\n```csharp\npublic interface IEventAggregator\n{\n    void Subscribe<T>(Action<T> handler);\n    void Publish<T>(T eventData);\n}\n\n// Events\npublic class GameStateChangedEvent { }\npublic class InventoryUpdatedEvent { }\npublic class LocationChangedEvent { }\npublic class CommandProcessedEvent { }\n```\n\n### Message Flow\n\n```\nView ‚Üí ViewModel ‚Üí Service ‚Üí Domain ‚Üí Repository\n  ‚Üë                                        ‚Üì\n  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Events/Notifications ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## Error Handling Strategy\n\n### Layered Error Handling\n\n1. **UI Layer**: User-friendly error messages\n2. **Service Layer**: Retry logic and fallbacks\n3. **Domain Layer**: Business rule validation\n4. **Infrastructure Layer**: Exception logging\n\n### Specific Strategies\n\n```csharp\n// Voice Recognition Errors\ntry\n{\n    var result = await _voiceService.RecognizeSpeechAsync();\n}\ncatch (PermissionException ex)\n{\n    // Prompt user for microphone permission\n}\ncatch (SpeechRecognitionException ex)\n{\n    // Show \"Didn't catch that, please try again\"\n}\n\n// LLM API Errors\ntry\n{\n    var parsed = await _llmService.ParseCommandAsync(text);\n}\ncatch (ApiException ex)\n{\n    // Fall back to local parser\n    var parsed = await _localParser.ParseCommandAsync(text);\n}\ncatch (NetworkException ex)\n{\n    // Queue command for retry or offer offline mode\n}\n```\n\n## Performance Considerations\n\n### Optimization Strategies\n\n1. **Lazy Loading**: Load story packs on demand\n2. **Object Pooling**: Reuse audio buffers and UI elements\n3. **Async/Await**: Non-blocking operations for all I/O\n4. **Caching**: Command cache, TTS audio cache, image cache\n5. **Virtual Scrolling**: For long story text feeds\n6. **Background Processing**: Parse commands off UI thread\n\n### Memory Management\n\n- Dispose audio resources properly\n- Clear old story text beyond certain threshold\n- Unload unused theme assets\n- Monitor memory pressure events\n\n## Security Considerations\n\n### Data Protection\n\n1. **API Keys**: Stored in secure storage, never in code\n2. **Permissions**: Runtime permission requests\n3. **Network Security**: HTTPS only for API calls\n4. **Data Encryption**: Encrypt save files (optional)\n\n### Privacy\n\n- Voice data processed locally or transmitted securely\n- No persistent audio recording storage\n- Clear privacy policy for any telemetry\n\n## Testing Architecture\n\n### Test Pyramid\n\n```\n        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n        ‚îÇ    E2E    ‚îÇ  (10%)\n        ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n        ‚îÇIntegration‚îÇ  (20%)\n        ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n        ‚îÇ   Unit    ‚îÇ  (70%)\n        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### Test Strategy\n\n1. **Unit Tests**: Services, ViewModels, Domain Logic\n2. **Integration Tests**: Service interactions, Data access\n3. **UI Tests**: Critical user flows\n4. **Manual Tests**: Voice recognition accuracy, Device compatibility\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 03-technical-stack.md, 04-data-models.md, 08-maui-implementation.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/02-system-architecture.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\n\n# Current Time\n10/23/2025, 7:17:40 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n26,692 / 127.805K tokens used (21%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"<write_to_file>\n<path>docs/03-technical-stack.md</path>\n<content># 03 - Technical Stack\n\n## Overview\n\nThis document details the complete technology stack for The Cabin, including frameworks, libraries, tools, and platform-specific components required for Android development using .NET MAUI.\n\n## Core Framework\n\n### .NET MAUI (Multi-platform App UI)\n\n**Version**: .NET 8.0 or higher  \n**Target Frameworks**: `net8.0-android`\n\n**Key Features Utilized**:\n- Single project structure\n- XAML-based UI with C# code-behind\n- Platform-specific code via conditional compilation\n- Hot reload for rapid development\n- Native Android API access via bindings\n\n**MAUI Advantages**:\n- Unified codebase with platform customization\n- Native performance\n- Direct Android API access\n- Extensive community and Microsoft support\n- Familiar C# development experience\n\n## Development Environment\n\n### Required Tools\n\n| Tool | Version | Purpose |\n|------|---------|---------|\n| Visual Studio 2022 | 17.8+ | Primary IDE |\n| .NET SDK | 8.0+ | Runtime and libraries |\n| Android SDK | API 23-34 | Android development |\n| Android Emulator | Latest | Testing |\n| Git | 2.40+ | Version control |\n\n### Optional Tools\n\n| Tool | Purpose |\n|------|---------|\n| Visual Studio Code | Alternative editor |\n| Android Studio | Advanced Android debugging |\n| Postman | API testing |\n| DB Browser for SQLite | Database inspection |\n\n### Build Configuration\n\n```xml\n<!-- .csproj settings -->\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>net8.0-android</TargetFrameworks>\n    <OutputType>Exe</OutputType>\n    <RootNamespace>TheCabin</RootNamespace>\n    <UseMaui>true</UseMaui>\n    <SingleProject>true</SingleProject>\n    \n    <!-- Android specific -->\n    <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'\">23.0</SupportedOSPlatformVersion>\n    <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n    <AndroidPackageFormat>apk</AndroidPackageFormat>\n    \n    <!-- App info -->\n    <ApplicationTitle>The Cabin</ApplicationTitle>\n    <ApplicationId>com.thecabin.voiceadventure</ApplicationId>\n    <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>\n    <ApplicationVersion>1</ApplicationVersion>\n  </PropertyGroup>\n</Project>\n```\n\n## NuGet Packages\n\n### Core MAUI Packages\n\n```xml\n<!-- Included by default with MAUI -->\n<PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Maui.Controls.Compatibility\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"8.0.0\" />\n```\n\n### Speech Recognition\n\n#### Option 1: Android SpeechRecognizer (Built-in)\n```csharp\n// Platform API - No package required\n// Use: Android.Speech.SpeechRecognizer\n```\n\n#### Option 2: Whisper.NET (Offline Alternative)\n```xml\n<PackageReference Include=\"Whisper.net\" Version=\"1.5.0\" />\n<PackageReference Include=\"Whisper.net.Runtime\" Version=\"1.5.0\" />\n```\n\n**Whisper Model Options**:\n- `tiny`: 75 MB, fastest, lower accuracy\n- `base`: 142 MB, good balance\n- `small`: 466 MB, better accuracy\n- Recommended: **base** model for mobile\n\n### Text-to-Speech\n\n#### MAUI Built-in TTS\n```csharp\n// Platform API included with MAUI\n// Use: Microsoft.Maui.Media.TextToSpeech\n```\n\n#### Alternative: Azure Cognitive Services TTS\n```xml\n<PackageReference Include=\"Microsoft.CognitiveServices.Speech\" Version=\"1.34.0\" />\n```\n\n### LLM Integration\n\n#### OpenAI API Client\n```xml\n<PackageReference Include=\"Azure.AI.OpenAI\" Version=\"1.0.0-beta.12\" />\n```\n**Alternative**:\n```xml\n<PackageReference Include=\"OpenAI\" Version=\"1.10.0\" />\n```\n\n#### HTTP Client Extensions\n```xml\n<PackageReference Include=\"Microsoft.Extensions.Http\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Http.Polly\" Version=\"8.0.0\" />\n```\n\n### Data Storage\n\n#### SQLite (Recommended)\n```xml\n<PackageReference Include=\"sqlite-net-pcl\" Version=\"1.8.116\" />\n<PackageReference Include=\"SQLitePCLRaw.bundle_green\" Version=\"2.1.7\" />\n```\n\n#### JSON Serialization\n```xml\n<PackageReference Include=\"System.Text.Json\" Version=\"8.0.0\" />\n<!-- or -->\n<PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n```\n\n### MVVM Framework\n\n#### CommunityToolkit.Mvvm (Recommended)\n```xml\n<PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.2\" />\n```\n\n**Features**:\n- Source generators for MVVM boilerplate\n- `ObservableProperty` attribute\n- `RelayCommand` attribute\n- Messenger for loosely coupled communication\n\n#### Alternative: ReactiveUI\n```xml\n<PackageReference Include=\"ReactiveUI.Maui\" Version=\"19.5.31\" />\n```\n\n### UI Enhancements\n\n```xml\n<!-- Additional UI controls -->\n<PackageReference Include=\"CommunityToolkit.Maui\" Version=\"7.0.0\" />\n\n<!-- Animations -->\n<PackageReference Include=\"Microsoft.Maui.Graphics\" Version=\"8.0.0\" />\n\n<!-- Icons -->\n<PackageReference Include=\"Plugin.Maui.Audio\" Version=\"2.0.0\" />\n```\n\n### Utilities\n\n```xml\n<!-- Dependency Injection -->\n<PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"8.0.0\" />\n\n<!-- Configuration -->\n<PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"8.0.0\" />\n\n<!-- Logging -->\n<PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n\n<!-- Caching -->\n<PackageReference Include=\"Microsoft.Extensions.Caching.Memory\" Version=\"8.0.0\" />\n\n<!-- Polly (Resilience) -->\n<PackageReference Include=\"Polly\" Version=\"8.2.0\" />\n```\n\n## Speech-to-Text Options\n\n### Option 1: Android SpeechRecognizer (Default)\n\n**Pros**:\n- Built into Android platform\n- No additional dependencies\n- Low memory footprint\n- Regular updates from Google\n- Supports multiple languages\n\n**Cons**:\n- Requires internet connection for best accuracy\n- Limited customization\n- Privacy concerns (data sent to Google)\n\n**Implementation**:\n```csharp\nusing Android.Speech;\nusing Android.Content;\n\npublic class AndroidSpeechRecognizer : IVoiceRecognitionService\n{\n    private SpeechRecognizer _recognizer;\n    private Intent _recognizerIntent;\n    \n    public async Task<string> RecognizeSpeechAsync()\n    {\n        _recognizerIntent = new Intent(RecognizerIntent.ActionRecognizeSpeech);\n        _recognizerIntent.PutExtra(RecognizerIntent.ExtraLanguageModel, \n            RecognizerIntent.LanguageModelFreeForm);\n        _recognizerIntent.PutExtra(RecognizerIntent.ExtraCallingPackage, \n            Package);\n        _recognizerIntent.PutExtra(RecognizerIntent.ExtraMaxResults, 1);\n        \n        _recognizer.StartListening(_recognizerIntent);\n        // Return recognized text\n    }\n}\n```\n\n### Option 2: Whisper.NET (Offline)\n\n**Pros**:\n- Fully offline functionality\n- High accuracy\n- Privacy-focused (on-device)\n- Multiple model sizes\n- Open source\n\n**Cons**:\n- Large model files (75-466 MB)\n- Higher CPU/battery usage\n- Slower than cloud solutions\n- Requires model download/bundling\n\n**Implementation**:\n```csharp\nusing Whisper.net;\n\npublic class WhisperRecognitionService : IVoiceRecognitionService\n{\n    private WhisperFactory _factory;\n    private WhisperProcessor _processor;\n    \n    public async Task InitializeAsync()\n    {\n        var modelPath = Path.Combine(FileSystem.AppDataDirectory, \n            \"ggml-base.bin\");\n        _factory = WhisperFactory.FromPath(modelPath);\n        _processor = _factory.CreateBuilder().Build();\n    }\n    \n    public async Task<string> RecognizeSpeechAsync(string audioFile)\n    {\n        await foreach (var result in _processor.ProcessAsync(audioFile))\n        {\n            return result.Text;\n        }\n    }\n}\n```\n\n### Option 3: Azure Cognitive Services\n\n**Pros**:\n- Excellent accuracy\n- Real-time streaming\n- Custom models available\n- Extensive language support\n\n**Cons**:\n- Requires internet\n- Usage costs\n- Additional SDK size\n- Azure account needed\n\n**Cost Estimate**: ~$1 per hour of audio (Standard tier)\n\n## LLM Integration Options\n\n### Option 1: OpenAI GPT-4o-mini (Recommended)\n\n**API Endpoint**: `https://api.openai.com/v1/chat/completions`\n\n**Model**: `gpt-4o-mini`\n\n**Pricing**:\n- Input: $0.150 per 1M tokens\n- Output: $0.600 per 1M tokens\n- Est. cost per command: $0.0001-0.0003\n\n**Estimated Monthly Cost** (1000 active users):\n- Avg. 50 commands/user/month = 50,000 commands\n- Cost: ~$5-15/month\n\n**Implementation**:\n```csharp\nusing Azure.AI.OpenAI;\n\npublic class OpenAICommandParser : ICommandParserService\n{\n    private readonly OpenAIClient _client;\n    \n    public async Task<ParsedCommand> ParseAsync(string input, string context)\n    {\n        var messages = new[]\n        {\n            new ChatRequestSystemMessage(\n                \"Parse player commands into JSON: {verb, object, context}\"),\n            new ChatRequestUserMessage($\"Context: {context}\\nCommand: {input}\")\n        };\n        \n        var response = await _client.GetChatCompletionsAsync(\n            new ChatCompletionsOptions(\"gpt-4o-mini\", messages)\n            {\n                Temperature = 0.3f,\n                MaxTokens = 100\n            });\n        \n        return JsonSerializer.Deserialize<ParsedCommand>(\n            response.Value.Choices[0].Message.Content);\n    }\n}\n```\n\n### Option 2: Azure OpenAI Service\n\n**Benefits**:\n- Enterprise features\n- Data residency control\n- Private endpoint support\n- SLA guarantees\n\n**Pricing**: Similar to OpenAI, with added Azure fees\n\n### Option 3: Local LLM (Phi-3, Llama)\n\n**Options**:\n- Phi-3 Mini (3.8B parameters, ~2GB)\n- Llama 3.2 (3B parameters, ~2GB)\n\n**Implementation** (using LLamaSharp):\n```xml\n<PackageReference Include=\"LLamaSharp\" Version=\"0.10.0\" />\n<PackageReference Include=\"LLamaSharp.Backend.Cpu\" Version=\"0.10.0\" />\n```\n\n**Pros**:\n- No API costs\n- Full offline support\n- Privacy\n\n**Cons**:\n- Large app size (2-4GB)\n- High memory usage\n- Slower inference\n- Battery drain\n\n### Option 4: Hybrid Approach (Recommended)\n\n```csharp\npublic class HybridCommandParser : ICommandParserService\n{\n    private readonly ILocalCommandParser _localParser;\n    private readonly ILlmApiClient _cloudParser;\n    private readonly IConnectivity _connectivity;\n    \n    public async Task<ParsedCommand> ParseAsync(string input, string context)\n    {\n        // Try cached result first\n        if (TryGetCached(input, out var cached))\n            return cached;\n        \n        // Check for simple/common commands\n        if (_localParser.CanHandle(input))\n            return await _localParser.ParseAsync(input, context);\n        \n        // Use cloud LLM for complex commands\n        if (_connectivity.NetworkAccess == NetworkAccess.Internet)\n        {\n            try\n            {\n                return await _cloudParser.ParseAsync(input, context);\n            }\n            catch\n            {\n                // Fallback to local\n                return await _localParser.ParseAsync(input, context);\n            }\n        }\n        \n        // Offline fallback\n        return await _localParser.ParseAsync(input, context);\n    }\n}\n```\n\n## Text-to-Speech Options\n\n### Option 1: MAUI TextToSpeech (Default)\n\n**Implementation**:\n```csharp\nusing Microsoft.Maui.Media;\n\npublic class MauiTtsService : ITextToSpeechService\n{\n    public async Task SpeakAsync(string text)\n    {\n        var locales = await TextToSpeech.Default.GetLocalesAsync();\n        var settings = new SpeechOptions\n        {\n            Pitch = 1.0f,\n            Volume = 1.0f,\n            Locale = locales.FirstOrDefault()\n        };\n        \n        await TextToSpeech.Default.SpeakAsync(text, settings);\n    }\n}\n```\n\n**Pros**:\n- Built-in, no extra packages\n- Works offline\n- Low battery usage\n\n**Cons**:\n- Robotic voice quality\n- Limited voice options\n- No emotion/expression\n\n### Option 2: Azure Cognitive Services TTS\n\n**Best Voices**: Neural TTS with SSML support\n\n**Implementation**:\n```csharp\nusing Microsoft.CognitiveServices.Speech;\n\npublic class AzureTtsService : ITextToSpeechService\n{\n    private SpeechSynthesizer _synthesizer;\n    \n    public async Task SpeakAsync(string text)\n    {\n        var ssml = $@\"\n            <speak version='1.0' xml:lang='en-US'>\n                <voice name='en-US-JennyNeural'>\n                    <prosody rate='0.9' pitch='0%'>\n                        {text}\n                    </prosody>\n                </voice>\n            </speak>\";\n        \n        await _synthesizer.SpeakSsmlAsync(ssml);\n    }\n}\n```\n\n**Pricing**: $16 per 1M characters (Neural voices)\n\n### Option 3: ElevenLabs (Premium)\n\n**Pros**:\n- Most realistic voices\n- Emotion control\n- Voice cloning\n\n**Cons**:\n- Expensive ($5-330/month)\n- Requires internet\n- Latency\n\n## Database Options\n\n### SQLite (Recommended)\n\n**Why SQLite**:\n- Embedded database\n- No server required\n- Small footprint (~1MB)\n- ACID compliant\n- Wide platform support\n\n**Schema Example**:\n```sql\n-- Game saves\nCREATE TABLE GameSaves (\n    Id INTEGER PRIMARY KEY,\n    Name TEXT NOT NULL,\n    ThemeId TEXT NOT NULL,\n    GameStateJson TEXT NOT NULL,\n    Timestamp INTEGER NOT NULL\n);\n\n-- Command cache\nCREATE TABLE CommandCache (\n    CommandHash TEXT PRIMARY KEY,\n    ContextHash TEXT NOT NULL,\n    ParsedJson TEXT NOT NULL,\n    Confidence REAL,\n    Timestamp INTEGER\n);\n\n-- Settings\nCREATE TABLE Settings (\n    Key TEXT PRIMARY KEY,\n    Value TEXT NOT NULL\n);\n```\n\n### Alternative: LiteDB\n\n```xml\n<PackageReference Include=\"LiteDB\" Version=\"5.0.17\" />\n```\n\n**Pros**:\n- NoSQL document database\n- No SQL required\n- Simple API\n- Good for JSON storage\n\n## Android Permissions\n\n### Required Permissions\n\n```xml\n<!-- AndroidManifest.xml -->\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n<uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n<uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n\n<!-- Optional -->\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n```\n\n### Runtime Permission Handling\n\n```csharp\npublic async Task<bool> RequestMicrophonePermissionAsync()\n{\n    var status = await Permissions.CheckStatusAsync<Permissions.Microphone>();\n    \n    if (status != PermissionStatus.Granted)\n    {\n        status = await Permissions.RequestAsync<Permissions.Microphone>();\n    }\n    \n    return status == PermissionStatus.Granted;\n}\n```\n\n## Build and Deployment\n\n### Android Build Configurations\n\n**Debug**:\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n    <AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>\n    <AndroidLinkMode>None</AndroidLinkMode>\n    <DebugSymbols>true</DebugSymbols>\n</PropertyGroup>\n```\n\n**Release**:\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n    <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n    <AndroidLinkMode>SdkOnly</AndroidLinkMode>\n    <AndroidUseAapt2>true</AndroidUseAapt2>\n    <AndroidCreatePackagePerAbi>false</AndroidCreatePackagePerAbi>\n    <EnableLLVM>false</EnableLLVM>\n</PropertyGroup>\n```\n\n### APK Size Optimization\n\n1. **Enable ProGuard/R8 shrinking**\n2. **Use APK splits for different architectures**\n3. **Compress assets**\n4. **Remove unused resources**\n5. **Use vector drawables instead of PNGs**\n\n**Target Size**: < 50 MB (without Whisper model)\n\n## Development Workflow\n\n### Recommended Git Workflow\n\n```bash\nmain (production)\n  ‚îú‚îÄ develop (integration)\n  ‚îÇ   ‚îú‚îÄ feature/voice-pipeline\n  ‚îÇ   ‚îú‚îÄ feature/game-engine\n  ‚îÇ   ‚îî‚îÄ feature/ui-components\n  ‚îî‚îÄ hotfix/* (urgent fixes)\n```\n\n### CI/CD Considerations\n\n- GitHub Actions or Azure DevOps\n- Automated testing on every PR\n- APK builds on merge to develop\n- Release builds tagged in main\n\n## Performance Profiling Tools\n\n- Android Studio Profiler\n- Visual Studio Performance Profiler\n- dotTrace (JetBrains)\n- MAUI Blazor DevTools\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 02-system-architecture.md, 05-voice-pipeline.md, 08-maui-implementation.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [ ] Write 04-data-models.md\n- [ ] Write 05-voice-pipeline.md\n- [ ] Write 06-game-engine.md\n- [ ] Write 07-ui-ux-design.md\n- [ ] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/03-technical-stack.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/03-technical-stack.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/03-technical-stack.md\">\n# 03 - Technical Stack\n\n## Overview\n\nThis document details the complete technology stack for The Cabin, including frameworks, libraries, tools, and platform-specific components required for Android development using .NET MAUI.\n\n## Core Framework\n\n### .NET MAUI (Multi-platform App UI)\n\n**Version**: .NET 8.0 or higher  \n**Target Frameworks**: `net8.0-android`\n\n**Key Features Utilized**:\n- Single project structure\n- XAML-based UI with C# code-behind\n- Platform-specific code via conditional compilation\n- Hot reload for rapid development\n- Native Android API access via bindings\n\n**MAUI Advantages**:\n- Unified codebase with platform customization\n- Native performance\n- Direct Android API access\n- Extensive community and Microsoft support\n- Familiar C# development experience\n\n## Development Environment\n\n### Required Tools\n\n| Tool | Version | Purpose |\n|------|---------|---------|\n| Visual Studio 2022 | 17.8+ | Primary IDE |\n| .NET SDK | 8.0+ | Runtime and libraries |\n| Android SDK | API 23-34 | Android development |\n| Android Emulator | Latest | Testing |\n| Git | 2.40+ | Version control |\n\n### Optional Tools\n\n| Tool | Purpose |\n|------|---------|\n| Visual Studio Code | Alternative editor |\n| Android Studio | Advanced Android debugging |\n| Postman | API testing |\n| DB Browser for SQLite | Database inspection |\n\n### Build Configuration\n\n```xml\n<!-- .csproj settings -->\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <TargetFrameworks>net8.0-android</TargetFrameworks>\n    <OutputType>Exe</OutputType>\n    <RootNamespace>TheCabin</RootNamespace>\n    <UseMaui>true</UseMaui>\n    <SingleProject>true</SingleProject>\n    \n    <!-- Android specific -->\n    <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'\">23.0</SupportedOSPlatformVersion>\n    <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n    <AndroidPackageFormat>apk</AndroidPackageFormat>\n    \n    <!-- App info -->\n    <ApplicationTitle>The Cabin</ApplicationTitle>\n    <ApplicationId>com.thecabin.voiceadventure</ApplicationId>\n    <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>\n    <ApplicationVersion>1</ApplicationVersion>\n  </PropertyGroup>\n</Project>\n```\n\n## NuGet Packages\n\n### Core MAUI Packages\n\n```xml\n<!-- Included by default with MAUI -->\n<PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Maui.Controls.Compatibility\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"8.0.0\" />\n```\n\n### Speech Recognition\n\n#### Option 1: Android SpeechRecognizer (Built-in)\n```csharp\n// Platform API - No package required\n// Use: Android.Speech.SpeechRecognizer\n```\n\n#### Option 2: Whisper.NET (Offline Alternative)\n```xml\n<PackageReference Include=\"Whisper.net\" Version=\"1.5.0\" />\n<PackageReference Include=\"Whisper.net.Runtime\" Version=\"1.5.0\" />\n```\n\n**Whisper Model Options**:\n- `tiny`: 75 MB, fastest, lower accuracy\n- `base`: 142 MB, good balance\n- `small`: 466 MB, better accuracy\n- Recommended: **base** model for mobile\n\n### Text-to-Speech\n\n#### MAUI Built-in TTS\n```csharp\n// Platform API included with MAUI\n// Use: Microsoft.Maui.Media.TextToSpeech\n```\n\n#### Alternative: Azure Cognitive Services TTS\n```xml\n<PackageReference Include=\"Microsoft.CognitiveServices.Speech\" Version=\"1.34.0\" />\n```\n\n### LLM Integration\n\n#### OpenAI API Client\n```xml\n<PackageReference Include=\"Azure.AI.OpenAI\" Version=\"1.0.0-beta.12\" />\n```\n**Alternative**:\n```xml\n<PackageReference Include=\"OpenAI\" Version=\"1.10.0\" />\n```\n\n#### HTTP Client Extensions\n```xml\n<PackageReference Include=\"Microsoft.Extensions.Http\" Version=\"8.0.0\" />\n<PackageReference Include=\"Microsoft.Extensions.Http.Polly\" Version=\"8.0.0\" />\n```\n\n### Data Storage\n\n#### SQLite (Recommended)\n```xml\n<PackageReference Include=\"sqlite-net-pcl\" Version=\"1.8.116\" />\n<PackageReference Include=\"SQLitePCLRaw.bundle_green\" Version=\"2.1.7\" />\n```\n\n#### JSON Serialization\n```xml\n<PackageReference Include=\"System.Text.Json\" Version=\"8.0.0\" />\n<!-- or -->\n<PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n```\n\n### MVVM Framework\n\n#### CommunityToolkit.Mvvm (Recommended)\n```xml\n<PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.2\" />\n```\n\n**Features**:\n- Source generators for MVVM boilerplate\n- `ObservableProperty` attribute\n- `RelayCommand` attribute\n- Messenger for loosely coupled communication\n\n#### Alternative: ReactiveUI\n```xml\n<PackageReference Include=\"ReactiveUI.Maui\" Version=\"19.5.31\" />\n```\n\n### UI Enhancements\n\n```xml\n<!-- Additional UI controls -->\n<PackageReference Include=\"CommunityToolkit.Maui\" Version=\"7.0.0\" />\n\n<!-- Animations -->\n<PackageReference Include=\"Microsoft.Maui.Graphics\" Version=\"8.0.0\" />\n\n<!-- Icons -->\n<PackageReference Include=\"Plugin.Maui.Audio\" Version=\"2.0.0\" />\n```\n\n### Utilities\n\n```xml\n<!-- Dependency Injection -->\n<PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"8.0.0\" />\n\n<!-- Configuration -->\n<PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"8.0.0\" />\n\n<!-- Logging -->\n<PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"8.0.0\" />\n<PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n\n<!-- Caching -->\n<PackageReference Include=\"Microsoft.Extensions.Caching.Memory\" Version=\"8.0.0\" />\n\n<!-- Polly (Resilience) -->\n<PackageReference Include=\"Polly\" Version=\"8.2.0\" />\n```\n\n## Speech-to-Text Options\n\n### Option 1: Android SpeechRecognizer (Default)\n\n**Pros**:\n- Built into Android platform\n- No additional dependencies\n- Low memory footprint\n- Regular updates from Google\n- Supports multiple languages\n\n**Cons**:\n- Requires internet connection for best accuracy\n- Limited customization\n- Privacy concerns (data sent to Google)\n\n**Implementation**:\n```csharp\nusing Android.Speech;\nusing Android.Content;\n\npublic class AndroidSpeechRecognizer : IVoiceRecognitionService\n{\n    private SpeechRecognizer _recognizer;\n    private Intent _recognizerIntent;\n    \n    public async Task<string> RecognizeSpeechAsync()\n    {\n        _recognizerIntent = new Intent(RecognizerIntent.ActionRecognizeSpeech);\n        _recognizerIntent.PutExtra(RecognizerIntent.ExtraLanguageModel, \n            RecognizerIntent.LanguageModelFreeForm);\n        _recognizerIntent.PutExtra(RecognizerIntent.ExtraCallingPackage, \n            Package);\n        _recognizerIntent.PutExtra(RecognizerIntent.ExtraMaxResults, 1);\n        \n        _recognizer.StartListening(_recognizerIntent);\n        // Return recognized text\n    }\n}\n```\n\n### Option 2: Whisper.NET (Offline)\n\n**Pros**:\n- Fully offline functionality\n- High accuracy\n- Privacy-focused (on-device)\n- Multiple model sizes\n- Open source\n\n**Cons**:\n- Large model files (75-466 MB)\n- Higher CPU/battery usage\n- Slower than cloud solutions\n- Requires model download/bundling\n\n**Implementation**:\n```csharp\nusing Whisper.net;\n\npublic class WhisperRecognitionService : IVoiceRecognitionService\n{\n    private WhisperFactory _factory;\n    private WhisperProcessor _processor;\n    \n    public async Task InitializeAsync()\n    {\n        var modelPath = Path.Combine(FileSystem.AppDataDirectory, \n            \"ggml-base.bin\");\n        _factory = WhisperFactory.FromPath(modelPath);\n        _processor = _factory.CreateBuilder().Build();\n    }\n    \n    public async Task<string> RecognizeSpeechAsync(string audioFile)\n    {\n        await foreach (var result in _processor.ProcessAsync(audioFile))\n        {\n            return result.Text;\n        }\n    }\n}\n```\n\n### Option 3: Azure Cognitive Services\n\n**Pros**:\n- Excellent accuracy\n- Real-time streaming\n- Custom models available\n- Extensive language support\n\n**Cons**:\n- Requires internet\n- Usage costs\n- Additional SDK size\n- Azure account needed\n\n**Cost Estimate**: ~$1 per hour of audio (Standard tier)\n\n## LLM Integration Options\n\n### Option 1: OpenAI GPT-4o-mini (Recommended)\n\n**API Endpoint**: `https://api.openai.com/v1/chat/completions`\n\n**Model**: `gpt-4o-mini`\n\n**Pricing**:\n- Input: $0.150 per 1M tokens\n- Output: $0.600 per 1M tokens\n- Est. cost per command: $0.0001-0.0003\n\n**Estimated Monthly Cost** (1000 active users):\n- Avg. 50 commands/user/month = 50,000 commands\n- Cost: ~$5-15/month\n\n**Implementation**:\n```csharp\nusing Azure.AI.OpenAI;\n\npublic class OpenAICommandParser : ICommandParserService\n{\n    private readonly OpenAIClient _client;\n    \n    public async Task<ParsedCommand> ParseAsync(string input, string context)\n    {\n        var messages = new[]\n        {\n            new ChatRequestSystemMessage(\n                \"Parse player commands into JSON: {verb, object, context}\"),\n            new ChatRequestUserMessage($\"Context: {context}\\nCommand: {input}\")\n        };\n        \n        var response = await _client.GetChatCompletionsAsync(\n            new ChatCompletionsOptions(\"gpt-4o-mini\", messages)\n            {\n                Temperature = 0.3f,\n                MaxTokens = 100\n            });\n        \n        return JsonSerializer.Deserialize<ParsedCommand>(\n            response.Value.Choices[0].Message.Content);\n    }\n}\n```\n\n### Option 2: Azure OpenAI Service\n\n**Benefits**:\n- Enterprise features\n- Data residency control\n- Private endpoint support\n- SLA guarantees\n\n**Pricing**: Similar to OpenAI, with added Azure fees\n\n### Option 3: Local LLM (Phi-3, Llama)\n\n**Options**:\n- Phi-3 Mini (3.8B parameters, ~2GB)\n- Llama 3.2 (3B parameters, ~2GB)\n\n**Implementation** (using LLamaSharp):\n```xml\n<PackageReference Include=\"LLamaSharp\" Version=\"0.10.0\" />\n<PackageReference Include=\"LLamaSharp.Backend.Cpu\" Version=\"0.10.0\" />\n```\n\n**Pros**:\n- No API costs\n- Full offline support\n- Privacy\n\n**Cons**:\n- Large app size (2-4GB)\n- High memory usage\n- Slower inference\n- Battery drain\n\n### Option 4: Hybrid Approach (Recommended)\n\n```csharp\npublic class HybridCommandParser : ICommandParserService\n{\n    private readonly ILocalCommandParser _localParser;\n    private readonly ILlmApiClient _cloudParser;\n    private readonly IConnectivity _connectivity;\n    \n    public async Task<ParsedCommand> ParseAsync(string input, string context)\n    {\n        // Try cached result first\n        if (TryGetCached(input, out var cached))\n            return cached;\n        \n        // Check for simple/common commands\n        if (_localParser.CanHandle(input))\n            return await _localParser.ParseAsync(input, context);\n        \n        // Use cloud LLM for complex commands\n        if (_connectivity.NetworkAccess == NetworkAccess.Internet)\n        {\n            try\n            {\n                return await _cloudParser.ParseAsync(input, context);\n            }\n            catch\n            {\n                // Fallback to local\n                return await _localParser.ParseAsync(input, context);\n            }\n        }\n        \n        // Offline fallback\n        return await _localParser.ParseAsync(input, context);\n    }\n}\n```\n\n## Text-to-Speech Options\n\n### Option 1: MAUI TextToSpeech (Default)\n\n**Implementation**:\n```csharp\nusing Microsoft.Maui.Media;\n\npublic class MauiTtsService : ITextToSpeechService\n{\n    public async Task SpeakAsync(string text)\n    {\n        var locales = await TextToSpeech.Default.GetLocalesAsync();\n        var settings = new SpeechOptions\n        {\n            Pitch = 1.0f,\n            Volume = 1.0f,\n            Locale = locales.FirstOrDefault()\n        };\n        \n        await TextToSpeech.Default.SpeakAsync(text, settings);\n    }\n}\n```\n\n**Pros**:\n- Built-in, no extra packages\n- Works offline\n- Low battery usage\n\n**Cons**:\n- Robotic voice quality\n- Limited voice options\n- No emotion/expression\n\n### Option 2: Azure Cognitive Services TTS\n\n**Best Voices**: Neural TTS with SSML support\n\n**Implementation**:\n```csharp\nusing Microsoft.CognitiveServices.Speech;\n\npublic class AzureTtsService : ITextToSpeechService\n{\n    private SpeechSynthesizer _synthesizer;\n    \n    public async Task SpeakAsync(string text)\n    {\n        var ssml = $@\"\n            <speak version='1.0' xml:lang='en-US'>\n                <voice name='en-US-JennyNeural'>\n                    <prosody rate='0.9' pitch='0%'>\n                        {text}\n                    </prosody>\n                </voice>\n            </speak>\";\n        \n        await _synthesizer.SpeakSsmlAsync(ssml);\n    }\n}\n```\n\n**Pricing**: $16 per 1M characters (Neural voices)\n\n### Option 3: ElevenLabs (Premium)\n\n**Pros**:\n- Most realistic voices\n- Emotion control\n- Voice cloning\n\n**Cons**:\n- Expensive ($5-330/month)\n- Requires internet\n- Latency\n\n## Database Options\n\n### SQLite (Recommended)\n\n**Why SQLite**:\n- Embedded database\n- No server required\n- Small footprint (~1MB)\n- ACID compliant\n- Wide platform support\n\n**Schema Example**:\n```sql\n-- Game saves\nCREATE TABLE GameSaves (\n    Id INTEGER PRIMARY KEY,\n    Name TEXT NOT NULL,\n    ThemeId TEXT NOT NULL,\n    GameStateJson TEXT NOT NULL,\n    Timestamp INTEGER NOT NULL\n);\n\n-- Command cache\nCREATE TABLE CommandCache (\n    CommandHash TEXT PRIMARY KEY,\n    ContextHash TEXT NOT NULL,\n    ParsedJson TEXT NOT NULL,\n    Confidence REAL,\n    Timestamp INTEGER\n);\n\n-- Settings\nCREATE TABLE Settings (\n    Key TEXT PRIMARY KEY,\n    Value TEXT NOT NULL\n);\n```\n\n### Alternative: LiteDB\n\n```xml\n<PackageReference Include=\"LiteDB\" Version=\"5.0.17\" />\n```\n\n**Pros**:\n- NoSQL document database\n- No SQL required\n- Simple API\n- Good for JSON storage\n\n## Android Permissions\n\n### Required Permissions\n\n```xml\n<!-- AndroidManifest.xml -->\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n<uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n<uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n\n<!-- Optional -->\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n```\n\n### Runtime Permission Handling\n\n```csharp\npublic async Task<bool> RequestMicrophonePermissionAsync()\n{\n    var status = await Permissions.CheckStatusAsync<Permissions.Microphone>();\n    \n    if (status != PermissionStatus.Granted)\n    {\n        status = await Permissions.RequestAsync<Permissions.Microphone>();\n    }\n    \n    return status == PermissionStatus.Granted;\n}\n```\n\n## Build and Deployment\n\n### Android Build Configurations\n\n**Debug**:\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n    <AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>\n    <AndroidLinkMode>None</AndroidLinkMode>\n    <DebugSymbols>true</DebugSymbols>\n</PropertyGroup>\n```\n\n**Release**:\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n    <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n    <AndroidLinkMode>SdkOnly</AndroidLinkMode>\n    <AndroidUseAapt2>true</AndroidUseAapt2>\n    <AndroidCreatePackagePerAbi>false</AndroidCreatePackagePerAbi>\n    <EnableLLVM>false</EnableLLVM>\n</PropertyGroup>\n```\n\n### APK Size Optimization\n\n1. **Enable ProGuard/R8 shrinking**\n2. **Use APK splits for different architectures**\n3. **Compress assets**\n4. **Remove unused resources**\n5. **Use vector drawables instead of PNGs**\n\n**Target Size**: < 50 MB (without Whisper model)\n\n## Development Workflow\n\n### Recommended Git Workflow\n\n```bash\nmain (production)\n  ‚îú‚îÄ develop (integration)\n  ‚îÇ   ‚îú‚îÄ feature/voice-pipeline\n  ‚îÇ   ‚îú‚îÄ feature/game-engine\n  ‚îÇ   ‚îî‚îÄ feature/ui-components\n  ‚îî‚îÄ hotfix/* (urgent fixes)\n```\n\n### CI/CD Considerations\n\n- GitHub Actions or Azure DevOps\n- Automated testing on every PR\n- APK builds on merge to develop\n- Release builds tagged in main\n\n## Performance Profiling Tools\n\n- Android Studio Profiler\n- Visual Studio Performance Profiler\n- dotTrace (JetBrains)\n- MAUI Blazor DevTools\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 02-system-architecture.md, 05-voice-pipeline.md, 08-maui-implementation.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/03-technical-stack.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/03-technical-stack.md\n\n# Current Time\n10/23/2025, 7:19:05 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n34,740 / 127.805K tokens used (27%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"<write_to_file>\n<path>docs/04-data-models.md</path>\n<content># 04 - Data Models\n\n## Overview\n\nThis document defines all data models, entities, and data transfer objects (DTOs) used throughout The Cabin application. Models are organized by layer and purpose.\n\n## Domain Models\n\n### Room Model\n\nRepresents a physical location in the game world.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class Room\n    {\n        public string Id { get; set; }\n        public string Description { get; set; }\n        public List<string> ObjectIds { get; set; }\n        public Dictionary<string, string> Exits { get; set; }\n        public RoomState State { get; set; }\n        public bool IsVisited { get; set; }\n        public string AmbientSound { get; set; }\n        public LightLevel LightLevel { get; set; }\n        \n        public Room()\n        {\n            ObjectIds = new List<string>();\n            Exits = new Dictionary<string, string>();\n            State = new RoomState();\n        }\n    }\n    \n    public class RoomState\n    {\n        public bool IsLocked { get; set; }\n        public Dictionary<string, bool> Flags { get; set; }\n        public List<string> VisibleObjectIds { get; set; }\n        \n        public RoomState()\n        {\n            Flags = new Dictionary<string, bool>();\n            VisibleObjectIds = new List<string>();\n        }\n    }\n    \n    public enum LightLevel\n    {\n        Bright,\n        Normal,\n        Dim,\n        Dark,\n        PitchBlack\n    }\n}\n```\n\n**JSON Schema**:\n```json\n{\n  \"id\": \"cabin_main\",\n  \"description\": \"You stand in a dimly lit wooden cabin...\",\n  \"objects\": [\"lantern\", \"door\", \"table\"],\n  \"exits\": {\n    \"north\": \"forest_edge\",\n    \"up\": \"cabin_loft\"\n  },\n  \"state\": {\n    \"isLocked\": false,\n    \"flags\": {\n      \"fire_lit\": false\n    },\n    \"visibleObjectIds\": [\"lantern\", \"door\"]\n  },\n  \"isVisited\": false,\n  \"ambientSound\": \"wind_howling.mp3\",\n  \"lightLevel\": \"Dim\"\n}\n```\n\n### Object Model\n\nRepresents interactive items in the game world.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class GameObject\n    {\n        public string Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public ObjectType Type { get; set; }\n        public ObjectState State { get; set; }\n        public Dictionary<string, ActionDefinition> Actions { get; set; }\n        public List<string> RequiredItems { get; set; }\n        public bool IsCollectable { get; set; }\n        public bool IsVisible { get; set; }\n        public int Weight { get; set; }\n        \n        public GameObject()\n        {\n            Actions = new Dictionary<string, ActionDefinition>();\n            RequiredItems = new List<string>();\n            State = new ObjectState();\n        }\n    }\n    \n    public class ObjectState\n    {\n        public string CurrentState { get; set; }\n        public Dictionary<string, bool> Flags { get; set; }\n        public int UsageCount { get; set; }\n        \n        public ObjectState()\n        {\n            CurrentState = \"default\";\n            Flags = new Dictionary<string, bool>();\n            UsageCount = 0;\n        }\n    }\n    \n    public enum ObjectType\n    {\n        Item,\n        Tool,\n        Furniture,\n        Door,\n        Container,\n        Light,\n        Puzzle,\n        Decoration\n    }\n    \n    public class ActionDefinition\n    {\n        public string Verb { get; set; }\n        public string SuccessMessage { get; set; }\n        public string FailureMessage { get; set; }\n        public List<StateChange> StateChanges { get; set; }\n        public List<string> RequiredFlags { get; set; }\n        public bool ConsumesItem { get; set; }\n        \n        public ActionDefinition()\n        {\n            StateChanges = new List<StateChange>();\n            RequiredFlags = new List<string>();\n        }\n    }\n    \n    public class StateChange\n    {\n        public string Target { get; set; }  // \"self\", \"room\", or object ID\n        public string Property { get; set; }\n        public object NewValue { get; set; }\n    }\n}\n```\n\n**JSON Schema**:\n```json\n{\n  \"id\": \"lantern\",\n  \"name\": \"Rusty Lantern\",\n  \"description\": \"An old brass lantern covered in rust and cobwebs\",\n  \"type\": \"Light\",\n  \"state\": {\n    \"currentState\": \"unlit\",\n    \"flags\": {\n      \"has_oil\": true\n    },\n    \"usageCount\": 0\n  },\n  \"actions\": {\n    \"take\": {\n      \"verb\": \"take\",\n      \"successMessage\": \"You pick up the lantern. It feels heavy with oil.\",\n      \"failureMessage\": \"You can't take that.\",\n      \"stateChanges\": [\n        {\n          \"target\": \"self\",\n          \"property\": \"isVisible\",\n          \"newValue\": false\n        }\n      ],\n      \"requiredFlags\": [],\n      \"consumesItem\": false\n    },\n    \"light\": {\n      \"verb\": \"light\",\n      \"successMessage\": \"The lantern flickers to life, casting dancing shadows.\",\n      \"failureMessage\": \"You need something to light it with.\",\n      \"stateChanges\": [\n        {\n          \"target\": \"self\",\n          \"property\": \"currentState\",\n          \"newValue\": \"lit\"\n        },\n        {\n          \"target\": \"room\",\n          \"property\": \"lightLevel\",\n          \"newValue\": \"Bright\"\n        }\n      ],\n      \"requiredFlags\": [\"has_oil\"],\n      \"consumesItem\": false\n    }\n  },\n  \"requiredItems\": [],\n  \"isCollectable\": true,\n  \"isVisible\": true,\n  \"weight\": 3\n}\n```\n\n### Player Model\n\nRepresents the player's state and inventory.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class Player\n    {\n        public string Name { get; set; }\n        public string CurrentLocationId { get; set; }\n        public int Health { get; set; }\n        public int MaxHealth { get; set; }\n        public Inventory Inventory { get; set; }\n        public PlayerStats Stats { get; set; }\n        public List<StatusEffect> StatusEffects { get; set; }\n        public int CarryCapacity { get; set; }\n        \n        public Player()\n        {\n            Health = 100;\n            MaxHealth = 100;\n            CarryCapacity = 20;\n            Inventory = new Inventory();\n            Stats = new PlayerStats();\n            StatusEffects = new List<StatusEffect>();\n        }\n    }\n    \n    public class Inventory\n    {\n        public List<GameObject> Items { get; set; }\n        public int TotalWeight { get; set; }\n        public int MaxCapacity { get; set; }\n        \n        public Inventory()\n        {\n            Items = new List<GameObject>();\n            MaxCapacity = 20;\n        }\n        \n        public bool CanAdd(GameObject item)\n        {\n            return TotalWeight + item.Weight <= MaxCapacity;\n        }\n        \n        public bool HasItem(string itemId)\n        {\n            return Items.Any(i => i.Id == itemId);\n        }\n        \n        public GameObject GetItem(string itemId)\n        {\n            return Items.FirstOrDefault(i => i.Id == itemId);\n        }\n    }\n    \n    public class PlayerStats\n    {\n        public TimeSpan PlayTime { get; set; }\n        public int CommandsExecuted { get; set; }\n        public int RoomsExplored { get; set; }\n        public int ItemsCollected { get; set; }\n        public int PuzzlesSolved { get; set; }\n        public DateTime StartTime { get; set; }\n    }\n    \n    public class StatusEffect\n    {\n        public string Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public int Duration { get; set; }  // In turns/actions\n        public EffectType Type { get; set; }\n        public int Magnitude { get; set; }\n    }\n    \n    public enum EffectType\n    {\n        Health,\n        Speed,\n        Vision,\n        Strength\n    }\n}\n```\n\n### Command Models\n\nRepresents player commands and their parsed structure.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class ParsedCommand\n    {\n        public string Verb { get; set; }\n        public string Object { get; set; }\n        public string Target { get; set; }\n        public string Context { get; set; }\n        public double Confidence { get; set; }\n        public string RawInput { get; set; }\n        public DateTime Timestamp { get; set; }\n        \n        public ParsedCommand()\n        {\n            Timestamp = DateTime.UtcNow;\n        }\n    }\n    \n    public class CommandResult\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public List<string> AdditionalMessages { get; set; }\n        public GameStateChange StateChange { get; set; }\n        public CommandResultType Type { get; set; }\n        \n        public CommandResult()\n        {\n            AdditionalMessages = new List<string>();\n        }\n    }\n    \n    public enum CommandResultType\n    {\n        Success,\n        Failure,\n        InvalidCommand,\n        RequirementsNotMet,\n        AmbiguousCommand,\n        SystemMessage\n    }\n    \n    public class GameStateChange\n    {\n        public string LocationChanged { get; set; }\n        public List<string> ItemsAdded { get; set; }\n        public List<string> ItemsRemoved { get; set; }\n        public int HealthChange { get; set; }\n        public Dictionary<string, bool> FlagsChanged { get; set; }\n        \n        public GameStateChange()\n        {\n            ItemsAdded = new List<string>();\n            ItemsRemoved = new List<string>();\n            FlagsChanged = new Dictionary<string, bool>();\n        }\n    }\n}\n```\n\n### Story Pack Model\n\nRepresents a complete theme/story package.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class StoryPack\n    {\n        public string Id { get; set; }\n        public string Theme { get; set; }\n        public string Description { get; set; }\n        public string Version { get; set; }\n        public string Author { get; set; }\n        public List<Room> Rooms { get; set; }\n        public Dictionary<string, GameObject> Objects { get; set; }\n        public StoryMetadata Metadata { get; set; }\n        public string StartingRoomId { get; set; }\n        public List<Achievement> Achievements { get; set; }\n        \n        public StoryPack()\n        {\n            Rooms = new List<Room>();\n            Objects = new Dictionary<string, GameObject>();\n            Achievements = new List<Achievement>();\n        }\n    }\n    \n    public class StoryMetadata\n    {\n        public Difficulty Difficulty { get; set; }\n        public int EstimatedPlayTime { get; set; }  // In minutes\n        public List<string> Tags { get; set; }\n        public string CoverImage { get; set; }\n        public string ThemeColor { get; set; }\n        public DateTime CreatedDate { get; set; }\n        public DateTime ModifiedDate { get; set; }\n        \n        public StoryMetadata()\n        {\n            Tags = new List<string>();\n        }\n    }\n    \n    public enum Difficulty\n    {\n        Easy,\n        Medium,\n        Hard,\n        Expert\n    }\n    \n    public class Achievement\n    {\n        public string Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public List<string> RequiredFlags { get; set; }\n        public bool IsUnlocked { get; set; }\n    }\n}\n```\n\n## Game State Models\n\n### Complete Game State\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class GameState\n    {\n        public Guid Id { get; set; }\n        public string SaveName { get; set; }\n        public Player Player { get; set; }\n        public WorldState World { get; set; }\n        public ProgressState Progress { get; set; }\n        public MetaState Meta { get; set; }\n        public List<NarrativeEntry> StoryLog { get; set; }\n        \n        public GameState()\n        {\n            Id = Guid.NewGuid();\n            Player = new Player();\n            World = new WorldState();\n            Progress = new ProgressState();\n            Meta = new MetaState();\n            StoryLog = new List<NarrativeEntry>();\n        }\n    }\n    \n    public class WorldState\n    {\n        public string CurrentThemeId { get; set; }\n        public Dictionary<string, Room> Rooms { get; set; }\n        public Dictionary<string, GameObject> Objects { get; set; }\n        public Dictionary<string, object> GlobalVariables { get; set; }\n        public int TurnNumber { get; set; }\n        \n        public WorldState()\n        {\n            Rooms = new Dictionary<string, Room>();\n            Objects = new Dictionary<string, GameObject>();\n            GlobalVariables = new Dictionary<string, object>();\n        }\n    }\n    \n    public class ProgressState\n    {\n        public List<string> CompletedPuzzles { get; set; }\n        public List<string> UnlockedAreas { get; set; }\n        public List<string> DiscoveredSecrets { get; set; }\n        public Dictionary<string, bool> StoryFlags { get; set; }\n        public int Score { get; set; }\n        public List<string> UnlockedAchievements { get; set; }\n        \n        public ProgressState()\n        {\n            CompletedPuzzles = new List<string>();\n            UnlockedAreas = new List<string>();\n            DiscoveredSecrets = new List<string>();\n            StoryFlags = new Dictionary<string, bool>();\n            UnlockedAchievements = new List<string>();\n        }\n    }\n    \n    public class MetaState\n    {\n        public DateTime SaveTimestamp { get; set; }\n        public string Version { get; set; }\n        public TimeSpan TotalPlayTime { get; set; }\n        public int SaveCount { get; set; }\n        public string DeviceId { get; set; }\n        \n        public MetaState()\n        {\n            SaveTimestamp = DateTime.UtcNow;\n            Version = \"1.0.0\";\n        }\n    }\n}\n```\n\n## UI Models\n\n### Narrative Entry\n\n```csharp\nnamespace TheCabin.Presentation.Models\n{\n    public class NarrativeEntry\n    {\n        public Guid Id { get; set; }\n        public string Text { get; set; }\n        public NarrativeType Type { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string SpeakerName { get; set; }\n        public Color TextColor { get; set; }\n        public bool IsImportant { get; set; }\n        \n        public NarrativeEntry()\n        {\n            Id = Guid.NewGuid();\n            Timestamp = DateTime.Now;\n        }\n    }\n    \n    public enum NarrativeType\n    {\n        Description,\n        PlayerCommand,\n        SystemMessage,\n        Success,\n        Failure,\n        Dialogue,\n        Discovery\n    }\n}\n```\n\n### Voice Recognition Models\n\n```csharp\nnamespace TheCabin.Services.Models\n{\n    public class VoiceRecognitionResult\n    {\n        public bool Success { get; set; }\n        public string TranscribedText { get; set; }\n        public double Confidence { get; set; }\n        public List<string> Alternatives { get; set; }\n        public TimeSpan Duration { get; set; }\n        public string ErrorMessage { get; set; }\n        \n        public VoiceRecognitionResult()\n        {\n            Alternatives = new List<string>();\n        }\n    }\n    \n    public class VoiceSettings\n    {\n        public bool IsEnabled { get; set; }\n        public bool AutoListen { get; set; }\n        public bool UsePushToTalk { get; set; }\n        public float ConfidenceThreshold { get; set; }\n        public string PreferredEngine { get; set; }\n        public bool OfflineMode { get; set; }\n        \n        public VoiceSettings()\n        {\n            IsEnabled = true;\n            AutoListen = false;\n            UsePushToTalk = true;\n            ConfidenceThreshold = 0.75f;\n            PreferredEngine = \"Android\";\n            OfflineMode = false;\n        }\n    }\n}\n```\n\n### TTS Models\n\n```csharp\nnamespace TheCabin.Services.Models\n{\n    public class TtsSettings\n    {\n        public bool IsEnabled { get; set; }\n        public float SpeechRate { get; set; }\n        public float Pitch { get; set; }\n        public float Volume { get; set; }\n        public string PreferredVoice { get; set; }\n        public bool AutoNarrate { get; set; }\n        \n        public TtsSettings()\n        {\n            IsEnabled = true;\n            SpeechRate = 1.0f;\n            Pitch = 1.0f;\n            Volume = 1.0f;\n            AutoNarrate = false;\n        }\n    }\n}\n```\n\n## Database Models (SQLite)\n\n### Save Game Table\n\n```csharp\nnamespace TheCabin.Data.Models\n{\n    [Table(\"GameSaves\")]\n    public class GameSaveEntity\n    {\n        [PrimaryKey, AutoIncrement]\n        public int Id { get; set; }\n        \n        [MaxLength(100)]\n        public string Name { get; set; }\n        \n        [MaxLength(50)]\n        public string ThemeId { get; set; }\n        \n        public string GameStateJson { get; set; }\n        \n        public long Timestamp { get; set; }\n        \n        [MaxLength(20)]\n        public string Version { get; set; }\n        \n        public int PlayTimeMinutes { get; set; }\n        \n        public byte[] Thumbnail { get; set; }\n    }\n}\n```\n\n### Command Cache Table\n\n```csharp\nnamespace TheCabin.Data.Models\n{\n    [Table(\"CommandCache\")]\n    public class CommandCacheEntity\n    {\n        [PrimaryKey, MaxLength(64)]\n        public string CommandHash { get; set; }\n        \n        [MaxLength(64)]\n        public string ContextHash { get; set; }\n        \n        public string ParsedJson { get; set; }\n        \n        public float Confidence { get; set; }\n        \n        public long Timestamp { get; set; }\n        \n        public int HitCount { get; set; }\n        \n        [Indexed]\n        public long ExpiryTimestamp { get; set; }\n    }\n}\n```\n\n### Settings Table\n\n```csharp\nnamespace TheCabin.Data.Models\n{\n    [Table(\"Settings\")]\n    public class SettingEntity\n    {\n        [PrimaryKey, MaxLength(50)]\n        public string Key { get; set; }\n        \n        public string Value { get; set; }\n        \n        public string Type { get; set; }\n        \n        public long ModifiedTimestamp { get; set; }\n    }\n}\n```\n\n## API Models (LLM Integration)\n\n### LLM Request\n\n```csharp\nnamespace TheCabin.Services.Models\n{\n    public class LlmParseRequest\n    {\n        public string Input { get; set; }\n        public string CurrentLocation { get; set; }\n        public List<string> VisibleObjects { get; set; }\n        public List<string> InventoryItems { get; set; }\n        public List<string> RecentCommands { get; set; }\n        public Dictionary<string, bool> GameFlags { get; set; }\n        \n        public LlmParseRequest()\n        {\n            VisibleObjects = new List<string>();\n            InventoryItems = new List<string>();\n            RecentCommands = new List<string>();\n            GameFlags = new Dictionary<string, bool>();\n        }\n    }\n    \n    public class LlmParseResponse\n    {\n        public string Verb { get; set; }\n        public string Object { get; set; }\n        public string Target { get; set; }\n        public string Context { get; set; }\n        public double Confidence { get; set; }\n        public string Reasoning { get; set; }\n        public List<string> AlternativeInterpretations { get; set; }\n        \n        public LlmParseResponse()\n        {\n            AlternativeInterpretations = new List<string>();\n        }\n    }\n}\n```\n\n## Validation and Constraints\n\n### Command Verbs (Standard Set)\n\n```csharp\nnamespace TheCabin.Domain.Constants\n{\n    public static class CommandVerbs\n    {\n        // Movement\n        public const string Go = \"go\";\n        public const string Move = \"move\";\n        public const string Walk = \"walk\";\n        public const string Run = \"run\";\n        \n        // Interaction\n        public const string Take = \"take\";\n        public const string Drop = \"drop\";\n        public const string Use = \"use\";\n        public const string Open = \"open\";\n        public const string Close = \"close\";\n        public const string Push = \"push\";\n        public const string Pull = \"pull\";\n        \n        // Examination\n        public const string Look = \"look\";\n        public const string Examine = \"examine\";\n        public const string Search = \"search\";\n        public const string Read = \"read\";\n        \n        // Inventory\n        public const string Inventory = \"inventory\";\n        public const string Equipment = \"equipment\";\n        \n        // System\n        public const string Help = \"help\";\n        public const string Save = \"save\";\n        public const string Load = \"load\";\n        public const string Quit = \"quit\";\n        \n        public static readonly HashSet<string> AllVerbs = new()\n        {\n            Go, Move, Walk, Run,\n            Take, Drop, Use, Open, Close, Push, Pull,\n            Look, Examine, Search, Read,\n            Inventory, Equipment,\n            Help, Save, Load, Quit\n        };\n    }\n}\n```\n\n## Model Relationships Diagram\n\n```\nStoryPack\n    ‚îú‚îÄ Rooms[]\n    ‚îÇ   ‚îú‚îÄ Objects[] (references)\n    ‚îÇ   ‚îî‚îÄ Exits{} ‚Üí Room IDs\n    ‚îî‚îÄ Objects{} (dictionary)\n\nGameState\n    ‚îú‚îÄ Player\n    ‚îÇ   ‚îú‚îÄ Inventory\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ Items[] (GameObject references)\n    ‚îÇ   ‚îî‚îÄ StatusEffects[]\n    ‚îú‚îÄ WorldState\n    ‚îÇ   ‚îú‚îÄ Rooms{}\n    ‚îÇ   ‚îî‚îÄ Objects{}\n    ‚îú‚îÄ ProgressState\n    ‚îî‚îÄ MetaState\n\nParsedCommand ‚Üí CommandResult ‚Üí GameStateChange\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 02-system-architecture.md, 06-game-engine.md, 09-content-management.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [ ] Write 05-voice-pipeline.md\n- [ ] Write 06-game-engine.md\n- [ ] Write 07-ui-ux-design.md\n- [ ] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/04-data-models.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/04-data-models.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/04-data-models.md\">\n# 04 - Data Models\n\n## Overview\n\nThis document defines all data models, entities, and data transfer objects (DTOs) used throughout The Cabin application. Models are organized by layer and purpose.\n\n## Domain Models\n\n### Room Model\n\nRepresents a physical location in the game world.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class Room\n    {\n        public string Id { get; set; }\n        public string Description { get; set; }\n        public List<string> ObjectIds { get; set; }\n        public Dictionary<string, string> Exits { get; set; }\n        public RoomState State { get; set; }\n        public bool IsVisited { get; set; }\n        public string AmbientSound { get; set; }\n        public LightLevel LightLevel { get; set; }\n        \n        public Room()\n        {\n            ObjectIds = new List<string>();\n            Exits = new Dictionary<string, string>();\n            State = new RoomState();\n        }\n    }\n    \n    public class RoomState\n    {\n        public bool IsLocked { get; set; }\n        public Dictionary<string, bool> Flags { get; set; }\n        public List<string> VisibleObjectIds { get; set; }\n        \n        public RoomState()\n        {\n            Flags = new Dictionary<string, bool>();\n            VisibleObjectIds = new List<string>();\n        }\n    }\n    \n    public enum LightLevel\n    {\n        Bright,\n        Normal,\n        Dim,\n        Dark,\n        PitchBlack\n    }\n}\n```\n\n**JSON Schema**:\n```json\n{\n  \"id\": \"cabin_main\",\n  \"description\": \"You stand in a dimly lit wooden cabin...\",\n  \"objects\": [\"lantern\", \"door\", \"table\"],\n  \"exits\": {\n    \"north\": \"forest_edge\",\n    \"up\": \"cabin_loft\"\n  },\n  \"state\": {\n    \"isLocked\": false,\n    \"flags\": {\n      \"fire_lit\": false\n    },\n    \"visibleObjectIds\": [\"lantern\", \"door\"]\n  },\n  \"isVisited\": false,\n  \"ambientSound\": \"wind_howling.mp3\",\n  \"lightLevel\": \"Dim\"\n}\n```\n\n### Object Model\n\nRepresents interactive items in the game world.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class GameObject\n    {\n        public string Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public ObjectType Type { get; set; }\n        public ObjectState State { get; set; }\n        public Dictionary<string, ActionDefinition> Actions { get; set; }\n        public List<string> RequiredItems { get; set; }\n        public bool IsCollectable { get; set; }\n        public bool IsVisible { get; set; }\n        public int Weight { get; set; }\n        \n        public GameObject()\n        {\n            Actions = new Dictionary<string, ActionDefinition>();\n            RequiredItems = new List<string>();\n            State = new ObjectState();\n        }\n    }\n    \n    public class ObjectState\n    {\n        public string CurrentState { get; set; }\n        public Dictionary<string, bool> Flags { get; set; }\n        public int UsageCount { get; set; }\n        \n        public ObjectState()\n        {\n            CurrentState = \"default\";\n            Flags = new Dictionary<string, bool>();\n            UsageCount = 0;\n        }\n    }\n    \n    public enum ObjectType\n    {\n        Item,\n        Tool,\n        Furniture,\n        Door,\n        Container,\n        Light,\n        Puzzle,\n        Decoration\n    }\n    \n    public class ActionDefinition\n    {\n        public string Verb { get; set; }\n        public string SuccessMessage { get; set; }\n        public string FailureMessage { get; set; }\n        public List<StateChange> StateChanges { get; set; }\n        public List<string> RequiredFlags { get; set; }\n        public bool ConsumesItem { get; set; }\n        \n        public ActionDefinition()\n        {\n            StateChanges = new List<StateChange>();\n            RequiredFlags = new List<string>();\n        }\n    }\n    \n    public class StateChange\n    {\n        public string Target { get; set; }  // \"self\", \"room\", or object ID\n        public string Property { get; set; }\n        public object NewValue { get; set; }\n    }\n}\n```\n\n**JSON Schema**:\n```json\n{\n  \"id\": \"lantern\",\n  \"name\": \"Rusty Lantern\",\n  \"description\": \"An old brass lantern covered in rust and cobwebs\",\n  \"type\": \"Light\",\n  \"state\": {\n    \"currentState\": \"unlit\",\n    \"flags\": {\n      \"has_oil\": true\n    },\n    \"usageCount\": 0\n  },\n  \"actions\": {\n    \"take\": {\n      \"verb\": \"take\",\n      \"successMessage\": \"You pick up the lantern. It feels heavy with oil.\",\n      \"failureMessage\": \"You can't take that.\",\n      \"stateChanges\": [\n        {\n          \"target\": \"self\",\n          \"property\": \"isVisible\",\n          \"newValue\": false\n        }\n      ],\n      \"requiredFlags\": [],\n      \"consumesItem\": false\n    },\n    \"light\": {\n      \"verb\": \"light\",\n      \"successMessage\": \"The lantern flickers to life, casting dancing shadows.\",\n      \"failureMessage\": \"You need something to light it with.\",\n      \"stateChanges\": [\n        {\n          \"target\": \"self\",\n          \"property\": \"currentState\",\n          \"newValue\": \"lit\"\n        },\n        {\n          \"target\": \"room\",\n          \"property\": \"lightLevel\",\n          \"newValue\": \"Bright\"\n        }\n      ],\n      \"requiredFlags\": [\"has_oil\"],\n      \"consumesItem\": false\n    }\n  },\n  \"requiredItems\": [],\n  \"isCollectable\": true,\n  \"isVisible\": true,\n  \"weight\": 3\n}\n```\n\n### Player Model\n\nRepresents the player's state and inventory.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class Player\n    {\n        public string Name { get; set; }\n        public string CurrentLocationId { get; set; }\n        public int Health { get; set; }\n        public int MaxHealth { get; set; }\n        public Inventory Inventory { get; set; }\n        public PlayerStats Stats { get; set; }\n        public List<StatusEffect> StatusEffects { get; set; }\n        public int CarryCapacity { get; set; }\n        \n        public Player()\n        {\n            Health = 100;\n            MaxHealth = 100;\n            CarryCapacity = 20;\n            Inventory = new Inventory();\n            Stats = new PlayerStats();\n            StatusEffects = new List<StatusEffect>();\n        }\n    }\n    \n    public class Inventory\n    {\n        public List<GameObject> Items { get; set; }\n        public int TotalWeight { get; set; }\n        public int MaxCapacity { get; set; }\n        \n        public Inventory()\n        {\n            Items = new List<GameObject>();\n            MaxCapacity = 20;\n        }\n        \n        public bool CanAdd(GameObject item)\n        {\n            return TotalWeight + item.Weight <= MaxCapacity;\n        }\n        \n        public bool HasItem(string itemId)\n        {\n            return Items.Any(i => i.Id == itemId);\n        }\n        \n        public GameObject GetItem(string itemId)\n        {\n            return Items.FirstOrDefault(i => i.Id == itemId);\n        }\n    }\n    \n    public class PlayerStats\n    {\n        public TimeSpan PlayTime { get; set; }\n        public int CommandsExecuted { get; set; }\n        public int RoomsExplored { get; set; }\n        public int ItemsCollected { get; set; }\n        public int PuzzlesSolved { get; set; }\n        public DateTime StartTime { get; set; }\n    }\n    \n    public class StatusEffect\n    {\n        public string Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public int Duration { get; set; }  // In turns/actions\n        public EffectType Type { get; set; }\n        public int Magnitude { get; set; }\n    }\n    \n    public enum EffectType\n    {\n        Health,\n        Speed,\n        Vision,\n        Strength\n    }\n}\n```\n\n### Command Models\n\nRepresents player commands and their parsed structure.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class ParsedCommand\n    {\n        public string Verb { get; set; }\n        public string Object { get; set; }\n        public string Target { get; set; }\n        public string Context { get; set; }\n        public double Confidence { get; set; }\n        public string RawInput { get; set; }\n        public DateTime Timestamp { get; set; }\n        \n        public ParsedCommand()\n        {\n            Timestamp = DateTime.UtcNow;\n        }\n    }\n    \n    public class CommandResult\n    {\n        public bool Success { get; set; }\n        public string Message { get; set; }\n        public List<string> AdditionalMessages { get; set; }\n        public GameStateChange StateChange { get; set; }\n        public CommandResultType Type { get; set; }\n        \n        public CommandResult()\n        {\n            AdditionalMessages = new List<string>();\n        }\n    }\n    \n    public enum CommandResultType\n    {\n        Success,\n        Failure,\n        InvalidCommand,\n        RequirementsNotMet,\n        AmbiguousCommand,\n        SystemMessage\n    }\n    \n    public class GameStateChange\n    {\n        public string LocationChanged { get; set; }\n        public List<string> ItemsAdded { get; set; }\n        public List<string> ItemsRemoved { get; set; }\n        public int HealthChange { get; set; }\n        public Dictionary<string, bool> FlagsChanged { get; set; }\n        \n        public GameStateChange()\n        {\n            ItemsAdded = new List<string>();\n            ItemsRemoved = new List<string>();\n            FlagsChanged = new Dictionary<string, bool>();\n        }\n    }\n}\n```\n\n### Story Pack Model\n\nRepresents a complete theme/story package.\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class StoryPack\n    {\n        public string Id { get; set; }\n        public string Theme { get; set; }\n        public string Description { get; set; }\n        public string Version { get; set; }\n        public string Author { get; set; }\n        public List<Room> Rooms { get; set; }\n        public Dictionary<string, GameObject> Objects { get; set; }\n        public StoryMetadata Metadata { get; set; }\n        public string StartingRoomId { get; set; }\n        public List<Achievement> Achievements { get; set; }\n        \n        public StoryPack()\n        {\n            Rooms = new List<Room>();\n            Objects = new Dictionary<string, GameObject>();\n            Achievements = new List<Achievement>();\n        }\n    }\n    \n    public class StoryMetadata\n    {\n        public Difficulty Difficulty { get; set; }\n        public int EstimatedPlayTime { get; set; }  // In minutes\n        public List<string> Tags { get; set; }\n        public string CoverImage { get; set; }\n        public string ThemeColor { get; set; }\n        public DateTime CreatedDate { get; set; }\n        public DateTime ModifiedDate { get; set; }\n        \n        public StoryMetadata()\n        {\n            Tags = new List<string>();\n        }\n    }\n    \n    public enum Difficulty\n    {\n        Easy,\n        Medium,\n        Hard,\n        Expert\n    }\n    \n    public class Achievement\n    {\n        public string Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public List<string> RequiredFlags { get; set; }\n        public bool IsUnlocked { get; set; }\n    }\n}\n```\n\n## Game State Models\n\n### Complete Game State\n\n```csharp\nnamespace TheCabin.Domain.Models\n{\n    public class GameState\n    {\n        public Guid Id { get; set; }\n        public string SaveName { get; set; }\n        public Player Player { get; set; }\n        public WorldState World { get; set; }\n        public ProgressState Progress { get; set; }\n        public MetaState Meta { get; set; }\n        public List<NarrativeEntry> StoryLog { get; set; }\n        \n        public GameState()\n        {\n            Id = Guid.NewGuid();\n            Player = new Player();\n            World = new WorldState();\n            Progress = new ProgressState();\n            Meta = new MetaState();\n            StoryLog = new List<NarrativeEntry>();\n        }\n    }\n    \n    public class WorldState\n    {\n        public string CurrentThemeId { get; set; }\n        public Dictionary<string, Room> Rooms { get; set; }\n        public Dictionary<string, GameObject> Objects { get; set; }\n        public Dictionary<string, object> GlobalVariables { get; set; }\n        public int TurnNumber { get; set; }\n        \n        public WorldState()\n        {\n            Rooms = new Dictionary<string, Room>();\n            Objects = new Dictionary<string, GameObject>();\n            GlobalVariables = new Dictionary<string, object>();\n        }\n    }\n    \n    public class ProgressState\n    {\n        public List<string> CompletedPuzzles { get; set; }\n        public List<string> UnlockedAreas { get; set; }\n        public List<string> DiscoveredSecrets { get; set; }\n        public Dictionary<string, bool> StoryFlags { get; set; }\n        public int Score { get; set; }\n        public List<string> UnlockedAchievements { get; set; }\n        \n        public ProgressState()\n        {\n            CompletedPuzzles = new List<string>();\n            UnlockedAreas = new List<string>();\n            DiscoveredSecrets = new List<string>();\n            StoryFlags = new Dictionary<string, bool>();\n            UnlockedAchievements = new List<string>();\n        }\n    }\n    \n    public class MetaState\n    {\n        public DateTime SaveTimestamp { get; set; }\n        public string Version { get; set; }\n        public TimeSpan TotalPlayTime { get; set; }\n        public int SaveCount { get; set; }\n        public string DeviceId { get; set; }\n        \n        public MetaState()\n        {\n            SaveTimestamp = DateTime.UtcNow;\n            Version = \"1.0.0\";\n        }\n    }\n}\n```\n\n## UI Models\n\n### Narrative Entry\n\n```csharp\nnamespace TheCabin.Presentation.Models\n{\n    public class NarrativeEntry\n    {\n        public Guid Id { get; set; }\n        public string Text { get; set; }\n        public NarrativeType Type { get; set; }\n        public DateTime Timestamp { get; set; }\n        public string SpeakerName { get; set; }\n        public Color TextColor { get; set; }\n        public bool IsImportant { get; set; }\n        \n        public NarrativeEntry()\n        {\n            Id = Guid.NewGuid();\n            Timestamp = DateTime.Now;\n        }\n    }\n    \n    public enum NarrativeType\n    {\n        Description,\n        PlayerCommand,\n        SystemMessage,\n        Success,\n        Failure,\n        Dialogue,\n        Discovery\n    }\n}\n```\n\n### Voice Recognition Models\n\n```csharp\nnamespace TheCabin.Services.Models\n{\n    public class VoiceRecognitionResult\n    {\n        public bool Success { get; set; }\n        public string TranscribedText { get; set; }\n        public double Confidence { get; set; }\n        public List<string> Alternatives { get; set; }\n        public TimeSpan Duration { get; set; }\n        public string ErrorMessage { get; set; }\n        \n        public VoiceRecognitionResult()\n        {\n            Alternatives = new List<string>();\n        }\n    }\n    \n    public class VoiceSettings\n    {\n        public bool IsEnabled { get; set; }\n        public bool AutoListen { get; set; }\n        public bool UsePushToTalk { get; set; }\n        public float ConfidenceThreshold { get; set; }\n        public string PreferredEngine { get; set; }\n        public bool OfflineMode { get; set; }\n        \n        public VoiceSettings()\n        {\n            IsEnabled = true;\n            AutoListen = false;\n            UsePushToTalk = true;\n            ConfidenceThreshold = 0.75f;\n            PreferredEngine = \"Android\";\n            OfflineMode = false;\n        }\n    }\n}\n```\n\n### TTS Models\n\n```csharp\nnamespace TheCabin.Services.Models\n{\n    public class TtsSettings\n    {\n        public bool IsEnabled { get; set; }\n        public float SpeechRate { get; set; }\n        public float Pitch { get; set; }\n        public float Volume { get; set; }\n        public string PreferredVoice { get; set; }\n        public bool AutoNarrate { get; set; }\n        \n        public TtsSettings()\n        {\n            IsEnabled = true;\n            SpeechRate = 1.0f;\n            Pitch = 1.0f;\n            Volume = 1.0f;\n            AutoNarrate = false;\n        }\n    }\n}\n```\n\n## Database Models (SQLite)\n\n### Save Game Table\n\n```csharp\nnamespace TheCabin.Data.Models\n{\n    [Table(\"GameSaves\")]\n    public class GameSaveEntity\n    {\n        [PrimaryKey, AutoIncrement]\n        public int Id { get; set; }\n        \n        [MaxLength(100)]\n        public string Name { get; set; }\n        \n        [MaxLength(50)]\n        public string ThemeId { get; set; }\n        \n        public string GameStateJson { get; set; }\n        \n        public long Timestamp { get; set; }\n        \n        [MaxLength(20)]\n        public string Version { get; set; }\n        \n        public int PlayTimeMinutes { get; set; }\n        \n        public byte[] Thumbnail { get; set; }\n    }\n}\n```\n\n### Command Cache Table\n\n```csharp\nnamespace TheCabin.Data.Models\n{\n    [Table(\"CommandCache\")]\n    public class CommandCacheEntity\n    {\n        [PrimaryKey, MaxLength(64)]\n        public string CommandHash { get; set; }\n        \n        [MaxLength(64)]\n        public string ContextHash { get; set; }\n        \n        public string ParsedJson { get; set; }\n        \n        public float Confidence { get; set; }\n        \n        public long Timestamp { get; set; }\n        \n        public int HitCount { get; set; }\n        \n        [Indexed]\n        public long ExpiryTimestamp { get; set; }\n    }\n}\n```\n\n### Settings Table\n\n```csharp\nnamespace TheCabin.Data.Models\n{\n    [Table(\"Settings\")]\n    public class SettingEntity\n    {\n        [PrimaryKey, MaxLength(50)]\n        public string Key { get; set; }\n        \n        public string Value { get; set; }\n        \n        public string Type { get; set; }\n        \n        public long ModifiedTimestamp { get; set; }\n    }\n}\n```\n\n## API Models (LLM Integration)\n\n### LLM Request\n\n```csharp\nnamespace TheCabin.Services.Models\n{\n    public class LlmParseRequest\n    {\n        public string Input { get; set; }\n        public string CurrentLocation { get; set; }\n        public List<string> VisibleObjects { get; set; }\n        public List<string> InventoryItems { get; set; }\n        public List<string> RecentCommands { get; set; }\n        public Dictionary<string, bool> GameFlags { get; set; }\n        \n        public LlmParseRequest()\n        {\n            VisibleObjects = new List<string>();\n            InventoryItems = new List<string>();\n            RecentCommands = new List<string>();\n            GameFlags = new Dictionary<string, bool>();\n        }\n    }\n    \n    public class LlmParseResponse\n    {\n        public string Verb { get; set; }\n        public string Object { get; set; }\n        public string Target { get; set; }\n        public string Context { get; set; }\n        public double Confidence { get; set; }\n        public string Reasoning { get; set; }\n        public List<string> AlternativeInterpretations { get; set; }\n        \n        public LlmParseResponse()\n        {\n            AlternativeInterpretations = new List<string>();\n        }\n    }\n}\n```\n\n## Validation and Constraints\n\n### Command Verbs (Standard Set)\n\n```csharp\nnamespace TheCabin.Domain.Constants\n{\n    public static class CommandVerbs\n    {\n        // Movement\n        public const string Go = \"go\";\n        public const string Move = \"move\";\n        public const string Walk = \"walk\";\n        public const string Run = \"run\";\n        \n        // Interaction\n        public const string Take = \"take\";\n        public const string Drop = \"drop\";\n        public const string Use = \"use\";\n        public const string Open = \"open\";\n        public const string Close = \"close\";\n        public const string Push = \"push\";\n        public const string Pull = \"pull\";\n        \n        // Examination\n        public const string Look = \"look\";\n        public const string Examine = \"examine\";\n        public const string Search = \"search\";\n        public const string Read = \"read\";\n        \n        // Inventory\n        public const string Inventory = \"inventory\";\n        public const string Equipment = \"equipment\";\n        \n        // System\n        public const string Help = \"help\";\n        public const string Save = \"save\";\n        public const string Load = \"load\";\n        public const string Quit = \"quit\";\n        \n        public static readonly HashSet<string> AllVerbs = new()\n        {\n            Go, Move, Walk, Run,\n            Take, Drop, Use, Open, Close, Push, Pull,\n            Look, Examine, Search, Read,\n            Inventory, Equipment,\n            Help, Save, Load, Quit\n        };\n    }\n}\n```\n\n## Model Relationships Diagram\n\n```\nStoryPack\n    ‚îú‚îÄ Rooms[]\n    ‚îÇ   ‚îú‚îÄ Objects[] (references)\n    ‚îÇ   ‚îî‚îÄ Exits{} ‚Üí Room IDs\n    ‚îî‚îÄ Objects{} (dictionary)\n\nGameState\n    ‚îú‚îÄ Player\n    ‚îÇ   ‚îú‚îÄ Inventory\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ Items[] (GameObject references)\n    ‚îÇ   ‚îî‚îÄ StatusEffects[]\n    ‚îú‚îÄ WorldState\n    ‚îÇ   ‚îú‚îÄ Rooms{}\n    ‚îÇ   ‚îî‚îÄ Objects{}\n    ‚îú‚îÄ ProgressState\n    ‚îî‚îÄ MetaState\n\nParsedCommand ‚Üí CommandResult ‚Üí GameStateChange\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 02-system-architecture.md, 06-game-engine.md, 09-content-management.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/04-data-models.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/04-data-models.md\ndocs/03-technical-stack.md\n\n# Current Time\n10/23/2025, 7:20:28 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n44,356 / 127.805K tokens used (35%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll continue creating the remaining documentation files. Let me create the voice pipeline document next.\n\n<write_to_file>\n<path>docs/05-voice-pipeline.md</path>\n<content># 05 - Voice Pipeline\n\n## Overview\n\nThe voice pipeline is the core feature of The Cabin, enabling hands-free gameplay through speech recognition and natural language processing. This document details the complete voice-to-command workflow.\n\n## Voice Pipeline Architecture\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                     VOICE PIPELINE                           ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n1. CAPTURE                    5. VALIDATION\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇMicrophone‚îÇ                 ‚îÇValidator ‚îÇ\n   ‚îÇ  Input   ‚îÇ                 ‚îÇ  Engine  ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        ‚îÇ                             ‚îÇ\n2. TRANSCRIBE              6. EXECUTION\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ   STT    ‚îÇ                 ‚îÇ  Game    ‚îÇ\n   ‚îÇ  Engine  ‚îÇ                 ‚îÇ  Engine  ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        ‚îÇ                             ‚îÇ\n3. PARSE                   7. RESPONSE\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ   LLM    ‚îÇ                 ‚îÇNarrative ‚îÇ\n   ‚îÇ  Parser  ‚îÇ                 ‚îÇGenerator ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        ‚îÇ                             ‚îÇ\n4. CACHE CHECK             8. NARRATION\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ  Cache   ‚îÇ                 ‚îÇ   TTS    ‚îÇ\n   ‚îÇ  Layer   ‚îÇ                 ‚îÇ  Engine  ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## Component Details\n\n### 1. Voice Capture\n\n#### Android Speech Recognizer Implementation\n\n```csharp\nnamespace TheCabin.Platforms.Android.Services\n{\n    public class AndroidVoiceRecognitionService : IVoiceRecognitionService\n    {\n        private readonly SpeechRecognizer _recognizer;\n        private readonly TaskCompletionSource<VoiceRecognitionResult> _tcs;\n        private readonly ILogger<AndroidVoiceRecognitionService> _logger;\n        \n        public AndroidVoiceRecognitionService(ILogger<AndroidVoiceRecognitionService> logger)\n        {\n            _logger = logger;\n            _recognizer = SpeechRecognizer.CreateSpeechRecognizer(\n                Platform.AppContext);\n            _recognizer.SetRecognitionListener(new RecognitionListener(this));\n        }\n        \n        public async Task<VoiceRecognitionResult> RecognizeSpeechAsync(\n            CancellationToken cancellationToken = default)\n        {\n            _tcs = new TaskCompletionSource<VoiceRecognitionResult>();\n            \n            // Check permissions\n            var permissionStatus = await Permissions\n                .CheckStatusAsync<Permissions.Microphone>();\n                \n            if (permissionStatus != PermissionStatus.Granted)\n            {\n                permissionStatus = await Permissions\n                    .RequestAsync<Permissions.Microphone>();\n                    \n                if (permissionStatus != PermissionStatus.Granted)\n                {\n                    return new VoiceRecognitionResult\n                    {\n                        Success = false,\n                        ErrorMessage = \"Microphone permission denied\"\n                    };\n                }\n            }\n            \n            // Configure intent\n            var intent = new Intent(RecognizerIntent.ActionRecognizeSpeech);\n            intent.PutExtra(RecognizerIntent.ExtraLanguageModel,\n                RecognizerIntent.LanguageModelFreeForm);\n            intent.PutExtra(RecognizerIntent.ExtraLanguage, \"en-US\");\n            intent.PutExtra(RecognizerIntent.ExtraMaxResults, 5);\n            intent.PutExtra(RecognizerIntent.ExtraPartialResults, true);\n            \n            // Start listening\n            _recognizer.StartListening(intent);\n            \n            // Wait for result or cancellation\n            using (cancellationToken.Register(() => \n            {\n                _recognizer.StopListening();\n                _tcs?.TrySetCanceled();\n            }))\n            {\n                return await _tcs.Task;\n            }\n        }\n        \n        public void StopListening()\n        {\n            _recognizer.StopListening();\n        }\n        \n        private class RecognitionListener : Java.Lang.Object, \n            IRecognitionListener\n        {\n            private readonly AndroidVoiceRecognitionService _service;\n            private readonly Stopwatch _stopwatch;\n            \n            public RecognitionListener(AndroidVoiceRecognitionService service)\n            {\n                _service = service;\n                _stopwatch = new Stopwatch();\n            }\n            \n            public void OnBeginningOfSpeech()\n            {\n                _stopwatch.Start();\n            }\n            \n            public void OnEndOfSpeech()\n            {\n                _stopwatch.Stop();\n            }\n            \n            public void OnResults(Bundle results)\n            {\n                var matches = results\n                    .GetStringArrayList(SpeechRecognizer.ResultsRecognition);\n                var confidences = results\n                    .GetFloatArray(SpeechRecognizer.ConfidenceScores);\n                \n                if (matches?.Count > 0)\n                {\n                    var result = new VoiceRecognitionResult\n                    {\n                        Success = true,\n                        TranscribedText = matches[0],\n                        Confidence = confidences?[0] ?? 0.0,\n                        Alternatives = matches.Skip(1).ToList(),\n                        Duration = _stopwatch.Elapsed\n                    };\n                    \n                    _service._tcs.TrySetResult(result);\n                }\n            }\n            \n            public void OnError(SpeechRecognizerError error)\n            {\n                var result = new VoiceRecognitionResult\n                {\n                    Success = false,\n                    ErrorMessage = GetErrorMessage(error)\n                };\n                \n                _service._tcs.TrySetResult(result);\n            }\n            \n            private string GetErrorMessage(SpeechRecognizerError error)\n            {\n                return error switch\n                {\n                    SpeechRecognizerError.Network => \n                        \"Network error. Check your connection.\",\n                    SpeechRecognizerError.NoMatch => \n                        \"Didn't catch that. Please try again.\",\n                    SpeechRecognizerError.Audio => \n                        \"Audio error. Check microphone.\",\n                    SpeechRecognizerError.InsufficientPermissions => \n                        \"Microphone permission required.\",\n                    _ => \"Recognition failed. Please try again.\"\n                };\n            }\n            \n            // Other interface methods (OnReadyForSpeech, OnRmsChanged, etc.)\n            public void OnReadyForSpeech(Bundle @params) { }\n            public void OnRmsChanged(float rmsdB) { }\n            public void OnBufferReceived(byte[] buffer) { }\n            public void OnPartialResults(Bundle partialResults) { }\n            public void OnEvent(int eventType, Bundle @params) { }\n        }\n    }\n}\n```\n\n#### Audio Quality Settings\n\n```csharp\npublic class AudioSettings\n{\n    // Microphone sensitivity (0.0 - 1.0)\n    public float Sensitivity { get; set; } = 0.7f;\n    \n    // Noise cancellation\n    public bool NoiseReduction { get; set; } = true;\n    \n    // Automatic gain control\n    public bool AutoGainControl { get; set; } = true;\n    \n    // Sample rate (Hz)\n    public int SampleRate { get; set; } = 16000;\n    \n    // Timeout for silence (ms)\n    public int SilenceTimeout { get; set; } = 2000;\n    \n    // Maximum recording duration (ms)\n    public int MaxDuration { get; set; } = 10000;\n}\n```\n\n### 2. Speech-to-Text (STT)\n\n#### Confidence Threshold Handler\n\n```csharp\npublic class SttConfidenceHandler\n{\n    private readonly float _minConfidence;\n    private readonly ILogger _logger;\n    \n    public SttConfidenceHandler(\n        IOptions<VoiceSettings> settings,\n        ILogger<SttConfidenceHandler> logger)\n    {\n        _minConfidence = settings.Value.ConfidenceThreshold;\n        _logger = logger;\n    }\n    \n    public async Task<VoiceRecognitionResult> HandleLowConfidence(\n        VoiceRecognitionResult result)\n    {\n        if (result.Confidence < _minConfidence)\n        {\n            _logger.LogWarning(\n                \"Low confidence: {Confidence:P} for '{Text}'\",\n                result.Confidence, result.TranscribedText);\n            \n            // Try alternatives if available\n            if (result.Alternatives?.Count > 0)\n            {\n                foreach (var alt in result.Alternatives)\n                {\n                    // Could implement fuzzy matching here\n                    // For now, just log alternatives\n                    _logger.LogInformation(\n                        \"Alternative: {Alternative}\", alt);\n                }\n            }\n            \n            // Request user confirmation\n            result.ErrorMessage = \n                $\"Did you say '{result.TranscribedText}'? \" +\n                $\"Please confirm or try again.\";\n        }\n        \n        return result;\n    }\n}\n```\n\n### 3. Command Parsing\n\n#### LLM-Based Parser\n\n```csharp\nnamespace TheCabin.Services\n{\n    public class LlmCommandParserService : ICommandParserService\n    {\n        private readonly OpenAIClient _client;\n        private readonly IMemoryCache _cache;\n        private readonly ILogger _logger;\n        \n        private const string SystemPrompt = @\"\nYou are a command parser for a text adventure game. \nParse the player's input into a structured JSON command.\n\nAvailable verbs: go, take, drop, use, open, close, examine, look, \nread, push, pull, inventory, help, save, load\n\nOutput format:\n{\n  \"\"verb\"\": \"\"action verb\"\",\n  \"\"object\"\": \"\"target object or null\"\",\n  \"\"target\"\": \"\"secondary object or null\"\",\n  \"\"context\"\": \"\"additional context\"\",\n  \"\"confidence\"\": 0.0-1.0\n}\n\nExamples:\nInput: 'go north' ‚Üí {\"\"verb\"\":\"\"go\"\",\"\"object\"\":\"\"north\"\",\"\"confidence\"\":0.95}\nInput: 'pick up the lantern' ‚Üí {\"\"verb\"\":\"\"take\"\",\"\"object\"\":\"\"lantern\"\",\"\"confidence\"\":0.9}\nInput: 'use key on door' ‚Üí {\"\"verb\"\":\"\"use\"\",\"\"object\"\":\"\"key\"\",\"\"target\"\":\"\"door\"\",\"\"confidence\"\":0.85}\n\";\n        \n        public async Task<ParsedCommand> ParseAsync(\n            string input,\n            GameContext context,\n            CancellationToken cancellationToken = default)\n        {\n            // Build cache key\n            var cacheKey = GenerateCacheKey(input, context);\n            \n            // Check cache\n            if (_cache.TryGetValue<ParsedCommand>(cacheKey, out var cached))\n            {\n                _logger.LogInformation(\n                    \"Cache hit for command: {Input}\", input);\n                return cached;\n            }\n            \n            // Prepare context information\n            var contextInfo = BuildContextInfo(context);\n            \n            // Build user prompt\n            var userPrompt = $@\"\nContext:\n- Location: {context.CurrentLocation}\n- Visible objects: {string.Join(\", \", context.VisibleObjects)}\n- Inventory: {string.Join(\", \", context.InventoryItems)}\n- Recent actions: {string.Join(\", \", context.RecentCommands.TakeLast(3))}\n\nPlayer input: \"\"{input}\"\"\n\nParse this command into JSON.\";\n            \n            try\n            {\n                var chatCompletion = await _client.GetChatCompletionsAsync(\n                    new ChatCompletionsOptions\n                    {\n                        DeploymentName = \"gpt-4o-mini\",\n                        Messages =\n                        {\n                            new ChatRequestSystemMessage(SystemPrompt),\n                            new ChatRequestUserMessage(userPrompt)\n                        },\n                        Temperature = 0.3f,\n                        MaxTokens = 150,\n                        ResponseFormat = ChatCompletionsResponseFormat.JsonObject\n                    },\n                    cancellationToken);\n                \n                var response = chatCompletion.Value.Choices[0].Message.Content;\n                var parsed = JsonSerializer.Deserialize<ParsedCommand>(response);\n                \n                if (parsed != null)\n                {\n                    parsed.RawInput = input;\n                    \n                    // Cache successful parse\n                    _cache.Set(cacheKey, parsed, TimeSpan.FromHours(24));\n                    \n                    _logger.LogInformation(\n                        \"Parsed '{Input}' ‚Üí Verb: {Verb}, Object: {Object}, Confidence: {Confidence:P}\",\n                        input, parsed.Verb, parsed.Object, parsed.Confidence);\n                    \n                    return parsed;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \n                    \"LLM parsing failed for input: {Input}\", input);\n            }\n            \n            // Fallback to local parser\n            return await FallbackParse(input);\n        }\n        \n        private string GenerateCacheKey(string input, GameContext context)\n        {\n            var contextHash = HashCode.Combine(\n                context.CurrentLocation,\n                string.Join(\",\", context.VisibleObjects.OrderBy(x => x)),\n                string.Join(\",\", context.InventoryItems.OrderBy(x => x))\n            );\n            \n            return $\"cmd:{input.ToLowerInvariant()}:ctx:{contextHash}\";\n        }\n        \n        private string BuildContextInfo(GameContext context)\n        {\n            return JsonSerializer.Serialize(new\n            {\n                location = context.CurrentLocation,\n                visible = context.VisibleObjects,\n                inventory = context.InventoryItems,\n                flags = context.GameFlags\n            });\n        }\n        \n        private async Task<ParsedCommand> FallbackParse(string input)\n        {\n            // Simple rule-based parser as fallback\n            var words = input.ToLower()\n                .Split(' ', StringSplitOptions.RemoveEmptyEntries);\n            \n            if (words.Length == 0)\n            {\n                return new ParsedCommand\n                {\n                    Verb = \"help\",\n                    Confidence = 0.5,\n                    RawInput = input\n                };\n            }\n            \n            var verb = words[0];\n            var obj = words.Length > 1 ? words[1] : null;\n            \n            // Map common variations\n            verb = verb switch\n            {\n                \"grab\" or \"get\" or \"pickup\" => \"take\",\n                \"leave\" or \"discard\" => \"drop\",\n                \"inspect\" or \"check\" => \"examine\",\n                \"see\" or \"view\" => \"look\",\n                _ => verb\n            };\n            \n            return new ParsedCommand\n            {\n                Verb = verb,\n                Object = obj,\n                Confidence = 0.6,\n                RawInput = input\n            };\n        }\n    }\n}\n```\n\n#### Local Rule-Based Parser (Fallback)\n\n```csharp\npublic class LocalCommandParser : ILocalCommandParser\n{\n    private static readonly Dictionary<string, List<string>> VerbSynonyms = new()\n    {\n        [\"take\"] = new() { \"get\", \"grab\", \"pickup\", \"pick\", \"collect\" },\n        [\"drop\"] = new() { \"leave\", \"discard\", \"put\", \"place\" },\n        [\"use\"] = new() { \"activate\", \"employ\", \"utilize\" },\n        [\"open\"] = new() { \"unlock\", \"unseals\" },\n        [\"close\"] = new() { \"shut\", \"lock\", \"seal\" },\n        [\"examine\"] = new() { \"inspect\", \"check\", \"study\", \"investigate\" },\n        [\"look\"] = new() { \"see\", \"view\", \"observe\", \"peek\" },\n        [\"go\"] = new() { \"move\", \"walk\", \"run\", \"travel\", \"head\" }\n    };\n    \n    public bool CanHandle(string input)\n    {\n        var words = input.ToLower().Split(' ');\n        var firstWord = words.FirstOrDefault();\n        \n        // Check if first word matches any known verb or synonym\n        return CommandVerbs.AllVerbs.Contains(firstWord) ||\n               VerbSynonyms.Values.Any(synonyms => \n                   synonyms.Contains(firstWord));\n    }\n    \n    public Task<ParsedCommand> ParseAsync(\n        string input, \n        GameContext context)\n    {\n        var words = input.ToLower()\n            .Split(' ', StringSplitOptions.RemoveEmptyEntries)\n            .ToList();\n        \n        if (words.Count == 0)\n            return Task.FromResult(CreateHelpCommand(input));\n        \n        // Normalize verb\n        var verb = NormalizeVerb(words[0]);\n        \n        // Extract object and target\n        string obj = null;\n        string target = null;\n        \n        if (words.Count > 1)\n        {\n            // Remove common filler words\n            var filtered = words.Skip(1)\n                .Where(w => !IsFillerWord(w))\n                .ToList();\n            \n            if (filtered.Count > 0)\n            {\n                obj = filtered[0];\n                \n                // Check for \"use X on Y\" pattern\n                if (filtered.Count > 2 && filtered[1] == \"on\")\n                {\n                    target = filtered[2];\n                }\n            }\n        }\n        \n        return Task.FromResult(new ParsedCommand\n        {\n            Verb = verb,\n            Object = obj,\n            Target = target,\n            Confidence = 0.7,\n            RawInput = input\n        });\n    }\n    \n    private string NormalizeVerb(string word)\n    {\n        // Direct match\n        if (CommandVerbs.AllVerbs.Contains(word))\n            return word;\n        \n        // Find in synonyms\n        foreach (var kvp in VerbSynonyms)\n        {\n            if (kvp.Value.Contains(word))\n                return kvp.Key;\n        }\n        \n        return word;\n    }\n    \n    private bool IsFillerWord(string word)\n    {\n        return new[] { \"the\", \"a\", \"an\", \"to\", \"at\", \"in\", \"on\" }\n            .Contains(word);\n    }\n    \n    private ParsedCommand CreateHelpCommand(string input)\n    {\n        return new ParsedCommand\n        {\n            Verb = \"help\",\n            Confidence = 0.5,\n            RawInput = input\n        };\n    }\n}\n```\n\n### 4. Command Caching\n\n```csharp\npublic class CommandCacheService\n{\n    private readonly ICommandCacheRepository _repository;\n    private readonly IMemoryCache _memoryCache;\n    private readonly ILogger _logger;\n    \n    public async Task<ParsedCommand> GetCachedAsync(\n        string commandHash,\n        string contextHash)\n    {\n        // Check memory cache first\n        var key = $\"{commandHash}:{contextHash}\";\n        if (_memoryCache.TryGetValue<ParsedCommand>(key, out var cached))\n        {\n            return cached;\n        }\n        \n        // Check database cache\n        var entity = await _repository.GetAsync(commandHash, contextHash);\n        if (entity != null && !IsExpired(entity))\n        {\n            var parsed = JsonSerializer\n                .Deserialize<ParsedCommand>(entity.ParsedJson);\n            \n            // Update memory cache\n            _memoryCache.Set(key, parsed, TimeSpan.FromMinutes(30));\n            \n            // Update hit count\n            await _repository.IncrementHitCountAsync(commandHash);\n            \n            return parsed;\n        }\n        \n        return null;\n    }\n    \n    public async Task CacheAsync(\n        string commandHash,\n        string contextHash,\n        ParsedCommand parsed)\n    {\n        var entity = new CommandCacheEntity\n        {\n            CommandHash = commandHash,\n            ContextHash = contextHash,\n            ParsedJson = JsonSerializer.Serialize(parsed),\n            Confidence = (float)parsed.Confidence,\n            Timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),\n            ExpiryTimestamp = DateTimeOffset.UtcNow\n                .AddDays(30).ToUnixTimeSeconds(),\n            HitCount = 0\n        };\n        \n        await _repository.UpsertAsync(entity);\n        \n        // Also cache in memory\n        var key = $\"{commandHash}:{contextHash}\";\n        _memoryCache.Set(key, parsed, TimeSpan.FromMinutes(30));\n    }\n    \n    private bool IsExpired(CommandCacheEntity entity)\n    {\n        var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n        return entity.ExpiryTimestamp < now;\n    }\n    \n    public async Task CleanupExpiredAsync()\n    {\n        var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n        await _repository.DeleteExpiredAsync(now);\n    }\n}\n```\n\n### 5. Error Handling & Retry Logic\n\n```csharp\npublic class VoiceCommandOrchestrator\n{\n    private readonly IVoiceRecognitionService _sttService;\n    private readonly ICommandParserService _parserService;\n    private readonly ITextToSpeechService _ttsService;\n    private readonly ILogger _logger;\n    \n    public async Task<ParsedCommand> ProcessVoiceCommandAsync(\n        GameContext context,\n        int maxRetries = 3)\n    {\n        for (int attempt = 1; attempt <= maxRetries; attempt++)\n        {\n            try\n            {\n                // Step 1: Voice recognition\n                var sttResult = await _sttService.RecognizeSpeechAsync();\n                \n                if (!sttResult.Success)\n                {\n                    if (attempt < maxRetries)\n                    {\n                        await _ttsService.SpeakAsync(\n                            sttResult.ErrorMessage ?? \n                            \"I didn't catch that. Please try again.\");\n                        continue;\n                    }\n                    throw new VoiceRecognitionException(sttResult.ErrorMessage);\n                }\n                \n                // Step 2: Check confidence\n                if (sttResult.Confidence < 0.7)\n                {\n                    // Ask for confirmation\n                    var confirmed = await ConfirmTranscription(\n                        sttResult.TranscribedText);\n                    if (!confirmed && attempt < maxRetries)\n                        continue;\n                }\n                \n                // Step 3: Parse command\n                var parsed = await _parserService.ParseAsync(\n                    sttResult.TranscribedText,\n                    context);\n                \n                // Step 4: Validate parse confidence\n                if (parsed.Confidence < 0.5)\n                {\n                    if (attempt < maxRetries)\n                    {\n                        await _ttsService.SpeakAsync(\n                            \"I'm not sure I understood that. \" +\n                            \"Could you rephrase?\");\n                        continue;\n                    }\n                }\n                \n                return parsed;\n            }\n            catch (Exception ex) when (attempt < maxRetries)\n            {\n                _logger.LogWarning(ex,\n                    \"Attempt {Attempt} failed, retrying...\", attempt);\n                \n                await _ttsService.SpeakAsync(\n                    \"Sorry, something went wrong. Let's try again.\");\n            }\n        }\n        \n        throw new MaxRetriesExceededException(\n            \"Failed to process voice command after maximum retries\");\n    }\n    \n    private async Task<bool> ConfirmTranscription(string text)\n    {\n        await _ttsService.SpeakAsync($\"Did you say '{text}'?\");\n        \n        var response = await _sttService.RecognizeSpeechAsync();\n        if (!response.Success)\n            return false;\n        \n        var confirmation = response.TranscribedText.ToLower();\n        return confirmation.Contains(\"yes\") || \n               confirmation.Contains(\"yeah\") || \n               confirmation.Contains(\"correct\");\n    }\n}\n```\n\n## Performance Optimization\n\n### Preloading and Warmup\n\n```csharp\npublic class VoicePipelineWarmup\n{\n    public async Task WarmupAsync()\n    {\n        // Initialize speech recognizer\n        await InitializeSpeechRecognizer();\n        \n        // Preload TTS voices\n        await PreloadTtsVoices();\n        \n        // Test LLM connection\n        await TestLlmConnection();\n        \n        // Load command cache\n        await LoadCommandCache();\n    }\n}\n```\n\n### Batch Processing\n\n```csharp\n// Process multiple cached commands at startup\npublic async Task PreprocessCommonCommands()\n{\n    var commonCommands = new[]\n    {\n        \"look\", \"look around\", \"inventory\", \n        \"go north\", \"go south\", \"go east\", \"go west\",\n        \"take all\", \"help\"\n    };\n    \n    foreach (var cmd in commonCommands)\n    {\n        await _parserService.ParseAsync(cmd, GetDefaultContext());\n    }\n}\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 03-technical-stack.md, 06-game-engine.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [x] Write 05-voice-pipeline.md\n- [ ] Write 06-game-engine.md\n- [ ] Write 07-ui-ux-design.md\n- [ ] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/05-voice-pipeline.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/05-voice-pipeline.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/05-voice-pipeline.md\">\n# 05 - Voice Pipeline\n\n## Overview\n\nThe voice pipeline is the core feature of The Cabin, enabling hands-free gameplay through speech recognition and natural language processing. This document details the complete voice-to-command workflow.\n\n## Voice Pipeline Architecture\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                     VOICE PIPELINE                           ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n1. CAPTURE                    5. VALIDATION\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇMicrophone‚îÇ                 ‚îÇValidator ‚îÇ\n   ‚îÇ  Input   ‚îÇ                 ‚îÇ  Engine  ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        ‚îÇ                             ‚îÇ\n2. TRANSCRIBE              6. EXECUTION\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ   STT    ‚îÇ                 ‚îÇ  Game    ‚îÇ\n   ‚îÇ  Engine  ‚îÇ                 ‚îÇ  Engine  ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        ‚îÇ                             ‚îÇ\n3. PARSE                   7. RESPONSE\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ   LLM    ‚îÇ                 ‚îÇNarrative ‚îÇ\n   ‚îÇ  Parser  ‚îÇ                 ‚îÇGenerator ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        ‚îÇ                             ‚îÇ\n4. CACHE CHECK             8. NARRATION\n   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n   ‚îÇ  Cache   ‚îÇ                 ‚îÇ   TTS    ‚îÇ\n   ‚îÇ  Layer   ‚îÇ                 ‚îÇ  Engine  ‚îÇ\n   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                 ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## Component Details\n\n### 1. Voice Capture\n\n#### Android Speech Recognizer Implementation\n\n```csharp\nnamespace TheCabin.Platforms.Android.Services\n{\n    public class AndroidVoiceRecognitionService : IVoiceRecognitionService\n    {\n        private readonly SpeechRecognizer _recognizer;\n        private readonly TaskCompletionSource<VoiceRecognitionResult> _tcs;\n        private readonly ILogger<AndroidVoiceRecognitionService> _logger;\n        \n        public AndroidVoiceRecognitionService(ILogger<AndroidVoiceRecognitionService> logger)\n        {\n            _logger = logger;\n            _recognizer = SpeechRecognizer.CreateSpeechRecognizer(\n                Platform.AppContext);\n            _recognizer.SetRecognitionListener(new RecognitionListener(this));\n        }\n        \n        public async Task<VoiceRecognitionResult> RecognizeSpeechAsync(\n            CancellationToken cancellationToken = default)\n        {\n            _tcs = new TaskCompletionSource<VoiceRecognitionResult>();\n            \n            // Check permissions\n            var permissionStatus = await Permissions\n                .CheckStatusAsync<Permissions.Microphone>();\n                \n            if (permissionStatus != PermissionStatus.Granted)\n            {\n                permissionStatus = await Permissions\n                    .RequestAsync<Permissions.Microphone>();\n                    \n                if (permissionStatus != PermissionStatus.Granted)\n                {\n                    return new VoiceRecognitionResult\n                    {\n                        Success = false,\n                        ErrorMessage = \"Microphone permission denied\"\n                    };\n                }\n            }\n            \n            // Configure intent\n            var intent = new Intent(RecognizerIntent.ActionRecognizeSpeech);\n            intent.PutExtra(RecognizerIntent.ExtraLanguageModel,\n                RecognizerIntent.LanguageModelFreeForm);\n            intent.PutExtra(RecognizerIntent.ExtraLanguage, \"en-US\");\n            intent.PutExtra(RecognizerIntent.ExtraMaxResults, 5);\n            intent.PutExtra(RecognizerIntent.ExtraPartialResults, true);\n            \n            // Start listening\n            _recognizer.StartListening(intent);\n            \n            // Wait for result or cancellation\n            using (cancellationToken.Register(() => \n            {\n                _recognizer.StopListening();\n                _tcs?.TrySetCanceled();\n            }))\n            {\n                return await _tcs.Task;\n            }\n        }\n        \n        public void StopListening()\n        {\n            _recognizer.StopListening();\n        }\n        \n        private class RecognitionListener : Java.Lang.Object, \n            IRecognitionListener\n        {\n            private readonly AndroidVoiceRecognitionService _service;\n            private readonly Stopwatch _stopwatch;\n            \n            public RecognitionListener(AndroidVoiceRecognitionService service)\n            {\n                _service = service;\n                _stopwatch = new Stopwatch();\n            }\n            \n            public void OnBeginningOfSpeech()\n            {\n                _stopwatch.Start();\n            }\n            \n            public void OnEndOfSpeech()\n            {\n                _stopwatch.Stop();\n            }\n            \n            public void OnResults(Bundle results)\n            {\n                var matches = results\n                    .GetStringArrayList(SpeechRecognizer.ResultsRecognition);\n                var confidences = results\n                    .GetFloatArray(SpeechRecognizer.ConfidenceScores);\n                \n                if (matches?.Count > 0)\n                {\n                    var result = new VoiceRecognitionResult\n                    {\n                        Success = true,\n                        TranscribedText = matches[0],\n                        Confidence = confidences?[0] ?? 0.0,\n                        Alternatives = matches.Skip(1).ToList(),\n                        Duration = _stopwatch.Elapsed\n                    };\n                    \n                    _service._tcs.TrySetResult(result);\n                }\n            }\n            \n            public void OnError(SpeechRecognizerError error)\n            {\n                var result = new VoiceRecognitionResult\n                {\n                    Success = false,\n                    ErrorMessage = GetErrorMessage(error)\n                };\n                \n                _service._tcs.TrySetResult(result);\n            }\n            \n            private string GetErrorMessage(SpeechRecognizerError error)\n            {\n                return error switch\n                {\n                    SpeechRecognizerError.Network => \n                        \"Network error. Check your connection.\",\n                    SpeechRecognizerError.NoMatch => \n                        \"Didn't catch that. Please try again.\",\n                    SpeechRecognizerError.Audio => \n                        \"Audio error. Check microphone.\",\n                    SpeechRecognizerError.InsufficientPermissions => \n                        \"Microphone permission required.\",\n                    _ => \"Recognition failed. Please try again.\"\n                };\n            }\n            \n            // Other interface methods (OnReadyForSpeech, OnRmsChanged, etc.)\n            public void OnReadyForSpeech(Bundle @params) { }\n            public void OnRmsChanged(float rmsdB) { }\n            public void OnBufferReceived(byte[] buffer) { }\n            public void OnPartialResults(Bundle partialResults) { }\n            public void OnEvent(int eventType, Bundle @params) { }\n        }\n    }\n}\n```\n\n#### Audio Quality Settings\n\n```csharp\npublic class AudioSettings\n{\n    // Microphone sensitivity (0.0 - 1.0)\n    public float Sensitivity { get; set; } = 0.7f;\n    \n    // Noise cancellation\n    public bool NoiseReduction { get; set; } = true;\n    \n    // Automatic gain control\n    public bool AutoGainControl { get; set; } = true;\n    \n    // Sample rate (Hz)\n    public int SampleRate { get; set; } = 16000;\n    \n    // Timeout for silence (ms)\n    public int SilenceTimeout { get; set; } = 2000;\n    \n    // Maximum recording duration (ms)\n    public int MaxDuration { get; set; } = 10000;\n}\n```\n\n### 2. Speech-to-Text (STT)\n\n#### Confidence Threshold Handler\n\n```csharp\npublic class SttConfidenceHandler\n{\n    private readonly float _minConfidence;\n    private readonly ILogger _logger;\n    \n    public SttConfidenceHandler(\n        IOptions<VoiceSettings> settings,\n        ILogger<SttConfidenceHandler> logger)\n    {\n        _minConfidence = settings.Value.ConfidenceThreshold;\n        _logger = logger;\n    }\n    \n    public async Task<VoiceRecognitionResult> HandleLowConfidence(\n        VoiceRecognitionResult result)\n    {\n        if (result.Confidence < _minConfidence)\n        {\n            _logger.LogWarning(\n                \"Low confidence: {Confidence:P} for '{Text}'\",\n                result.Confidence, result.TranscribedText);\n            \n            // Try alternatives if available\n            if (result.Alternatives?.Count > 0)\n            {\n                foreach (var alt in result.Alternatives)\n                {\n                    // Could implement fuzzy matching here\n                    // For now, just log alternatives\n                    _logger.LogInformation(\n                        \"Alternative: {Alternative}\", alt);\n                }\n            }\n            \n            // Request user confirmation\n            result.ErrorMessage = \n                $\"Did you say '{result.TranscribedText}'? \" +\n                $\"Please confirm or try again.\";\n        }\n        \n        return result;\n    }\n}\n```\n\n### 3. Command Parsing\n\n#### LLM-Based Parser\n\n```csharp\nnamespace TheCabin.Services\n{\n    public class LlmCommandParserService : ICommandParserService\n    {\n        private readonly OpenAIClient _client;\n        private readonly IMemoryCache _cache;\n        private readonly ILogger _logger;\n        \n        private const string SystemPrompt = @\"\nYou are a command parser for a text adventure game. \nParse the player's input into a structured JSON command.\n\nAvailable verbs: go, take, drop, use, open, close, examine, look, \nread, push, pull, inventory, help, save, load\n\nOutput format:\n{\n  \"\"verb\"\": \"\"action verb\"\",\n  \"\"object\"\": \"\"target object or null\"\",\n  \"\"target\"\": \"\"secondary object or null\"\",\n  \"\"context\"\": \"\"additional context\"\",\n  \"\"confidence\"\": 0.0-1.0\n}\n\nExamples:\nInput: 'go north' ‚Üí {\"\"verb\"\":\"\"go\"\",\"\"object\"\":\"\"north\"\",\"\"confidence\"\":0.95}\nInput: 'pick up the lantern' ‚Üí {\"\"verb\"\":\"\"take\"\",\"\"object\"\":\"\"lantern\"\",\"\"confidence\"\":0.9}\nInput: 'use key on door' ‚Üí {\"\"verb\"\":\"\"use\"\",\"\"object\"\":\"\"key\"\",\"\"target\"\":\"\"door\"\",\"\"confidence\"\":0.85}\n\";\n        \n        public async Task<ParsedCommand> ParseAsync(\n            string input,\n            GameContext context,\n            CancellationToken cancellationToken = default)\n        {\n            // Build cache key\n            var cacheKey = GenerateCacheKey(input, context);\n            \n            // Check cache\n            if (_cache.TryGetValue<ParsedCommand>(cacheKey, out var cached))\n            {\n                _logger.LogInformation(\n                    \"Cache hit for command: {Input}\", input);\n                return cached;\n            }\n            \n            // Prepare context information\n            var contextInfo = BuildContextInfo(context);\n            \n            // Build user prompt\n            var userPrompt = $@\"\nContext:\n- Location: {context.CurrentLocation}\n- Visible objects: {string.Join(\", \", context.VisibleObjects)}\n- Inventory: {string.Join(\", \", context.InventoryItems)}\n- Recent actions: {string.Join(\", \", context.RecentCommands.TakeLast(3))}\n\nPlayer input: \"\"{input}\"\"\n\nParse this command into JSON.\";\n            \n            try\n            {\n                var chatCompletion = await _client.GetChatCompletionsAsync(\n                    new ChatCompletionsOptions\n                    {\n                        DeploymentName = \"gpt-4o-mini\",\n                        Messages =\n                        {\n                            new ChatRequestSystemMessage(SystemPrompt),\n                            new ChatRequestUserMessage(userPrompt)\n                        },\n                        Temperature = 0.3f,\n                        MaxTokens = 150,\n                        ResponseFormat = ChatCompletionsResponseFormat.JsonObject\n                    },\n                    cancellationToken);\n                \n                var response = chatCompletion.Value.Choices[0].Message.Content;\n                var parsed = JsonSerializer.Deserialize<ParsedCommand>(response);\n                \n                if (parsed != null)\n                {\n                    parsed.RawInput = input;\n                    \n                    // Cache successful parse\n                    _cache.Set(cacheKey, parsed, TimeSpan.FromHours(24));\n                    \n                    _logger.LogInformation(\n                        \"Parsed '{Input}' ‚Üí Verb: {Verb}, Object: {Object}, Confidence: {Confidence:P}\",\n                        input, parsed.Verb, parsed.Object, parsed.Confidence);\n                    \n                    return parsed;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \n                    \"LLM parsing failed for input: {Input}\", input);\n            }\n            \n            // Fallback to local parser\n            return await FallbackParse(input);\n        }\n        \n        private string GenerateCacheKey(string input, GameContext context)\n        {\n            var contextHash = HashCode.Combine(\n                context.CurrentLocation,\n                string.Join(\",\", context.VisibleObjects.OrderBy(x => x)),\n                string.Join(\",\", context.InventoryItems.OrderBy(x => x))\n            );\n            \n            return $\"cmd:{input.ToLowerInvariant()}:ctx:{contextHash}\";\n        }\n        \n        private string BuildContextInfo(GameContext context)\n        {\n            return JsonSerializer.Serialize(new\n            {\n                location = context.CurrentLocation,\n                visible = context.VisibleObjects,\n                inventory = context.InventoryItems,\n                flags = context.GameFlags\n            });\n        }\n        \n        private async Task<ParsedCommand> FallbackParse(string input)\n        {\n            // Simple rule-based parser as fallback\n            var words = input.ToLower()\n                .Split(' ', StringSplitOptions.RemoveEmptyEntries);\n            \n            if (words.Length == 0)\n            {\n                return new ParsedCommand\n                {\n                    Verb = \"help\",\n                    Confidence = 0.5,\n                    RawInput = input\n                };\n            }\n            \n            var verb = words[0];\n            var obj = words.Length > 1 ? words[1] : null;\n            \n            // Map common variations\n            verb = verb switch\n            {\n                \"grab\" or \"get\" or \"pickup\" => \"take\",\n                \"leave\" or \"discard\" => \"drop\",\n                \"inspect\" or \"check\" => \"examine\",\n                \"see\" or \"view\" => \"look\",\n                _ => verb\n            };\n            \n            return new ParsedCommand\n            {\n                Verb = verb,\n                Object = obj,\n                Confidence = 0.6,\n                RawInput = input\n            };\n        }\n    }\n}\n```\n\n#### Local Rule-Based Parser (Fallback)\n\n```csharp\npublic class LocalCommandParser : ILocalCommandParser\n{\n    private static readonly Dictionary<string, List<string>> VerbSynonyms = new()\n    {\n        [\"take\"] = new() { \"get\", \"grab\", \"pickup\", \"pick\", \"collect\" },\n        [\"drop\"] = new() { \"leave\", \"discard\", \"put\", \"place\" },\n        [\"use\"] = new() { \"activate\", \"employ\", \"utilize\" },\n        [\"open\"] = new() { \"unlock\", \"unseals\" },\n        [\"close\"] = new() { \"shut\", \"lock\", \"seal\" },\n        [\"examine\"] = new() { \"inspect\", \"check\", \"study\", \"investigate\" },\n        [\"look\"] = new() { \"see\", \"view\", \"observe\", \"peek\" },\n        [\"go\"] = new() { \"move\", \"walk\", \"run\", \"travel\", \"head\" }\n    };\n    \n    public bool CanHandle(string input)\n    {\n        var words = input.ToLower().Split(' ');\n        var firstWord = words.FirstOrDefault();\n        \n        // Check if first word matches any known verb or synonym\n        return CommandVerbs.AllVerbs.Contains(firstWord) ||\n               VerbSynonyms.Values.Any(synonyms => \n                   synonyms.Contains(firstWord));\n    }\n    \n    public Task<ParsedCommand> ParseAsync(\n        string input, \n        GameContext context)\n    {\n        var words = input.ToLower()\n            .Split(' ', StringSplitOptions.RemoveEmptyEntries)\n            .ToList();\n        \n        if (words.Count == 0)\n            return Task.FromResult(CreateHelpCommand(input));\n        \n        // Normalize verb\n        var verb = NormalizeVerb(words[0]);\n        \n        // Extract object and target\n        string obj = null;\n        string target = null;\n        \n        if (words.Count > 1)\n        {\n            // Remove common filler words\n            var filtered = words.Skip(1)\n                .Where(w => !IsFillerWord(w))\n                .ToList();\n            \n            if (filtered.Count > 0)\n            {\n                obj = filtered[0];\n                \n                // Check for \"use X on Y\" pattern\n                if (filtered.Count > 2 && filtered[1] == \"on\")\n                {\n                    target = filtered[2];\n                }\n            }\n        }\n        \n        return Task.FromResult(new ParsedCommand\n        {\n            Verb = verb,\n            Object = obj,\n            Target = target,\n            Confidence = 0.7,\n            RawInput = input\n        });\n    }\n    \n    private string NormalizeVerb(string word)\n    {\n        // Direct match\n        if (CommandVerbs.AllVerbs.Contains(word))\n            return word;\n        \n        // Find in synonyms\n        foreach (var kvp in VerbSynonyms)\n        {\n            if (kvp.Value.Contains(word))\n                return kvp.Key;\n        }\n        \n        return word;\n    }\n    \n    private bool IsFillerWord(string word)\n    {\n        return new[] { \"the\", \"a\", \"an\", \"to\", \"at\", \"in\", \"on\" }\n            .Contains(word);\n    }\n    \n    private ParsedCommand CreateHelpCommand(string input)\n    {\n        return new ParsedCommand\n        {\n            Verb = \"help\",\n            Confidence = 0.5,\n            RawInput = input\n        };\n    }\n}\n```\n\n### 4. Command Caching\n\n```csharp\npublic class CommandCacheService\n{\n    private readonly ICommandCacheRepository _repository;\n    private readonly IMemoryCache _memoryCache;\n    private readonly ILogger _logger;\n    \n    public async Task<ParsedCommand> GetCachedAsync(\n        string commandHash,\n        string contextHash)\n    {\n        // Check memory cache first\n        var key = $\"{commandHash}:{contextHash}\";\n        if (_memoryCache.TryGetValue<ParsedCommand>(key, out var cached))\n        {\n            return cached;\n        }\n        \n        // Check database cache\n        var entity = await _repository.GetAsync(commandHash, contextHash);\n        if (entity != null && !IsExpired(entity))\n        {\n            var parsed = JsonSerializer\n                .Deserialize<ParsedCommand>(entity.ParsedJson);\n            \n            // Update memory cache\n            _memoryCache.Set(key, parsed, TimeSpan.FromMinutes(30));\n            \n            // Update hit count\n            await _repository.IncrementHitCountAsync(commandHash);\n            \n            return parsed;\n        }\n        \n        return null;\n    }\n    \n    public async Task CacheAsync(\n        string commandHash,\n        string contextHash,\n        ParsedCommand parsed)\n    {\n        var entity = new CommandCacheEntity\n        {\n            CommandHash = commandHash,\n            ContextHash = contextHash,\n            ParsedJson = JsonSerializer.Serialize(parsed),\n            Confidence = (float)parsed.Confidence,\n            Timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),\n            ExpiryTimestamp = DateTimeOffset.UtcNow\n                .AddDays(30).ToUnixTimeSeconds(),\n            HitCount = 0\n        };\n        \n        await _repository.UpsertAsync(entity);\n        \n        // Also cache in memory\n        var key = $\"{commandHash}:{contextHash}\";\n        _memoryCache.Set(key, parsed, TimeSpan.FromMinutes(30));\n    }\n    \n    private bool IsExpired(CommandCacheEntity entity)\n    {\n        var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n        return entity.ExpiryTimestamp < now;\n    }\n    \n    public async Task CleanupExpiredAsync()\n    {\n        var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n        await _repository.DeleteExpiredAsync(now);\n    }\n}\n```\n\n### 5. Error Handling & Retry Logic\n\n```csharp\npublic class VoiceCommandOrchestrator\n{\n    private readonly IVoiceRecognitionService _sttService;\n    private readonly ICommandParserService _parserService;\n    private readonly ITextToSpeechService _ttsService;\n    private readonly ILogger _logger;\n    \n    public async Task<ParsedCommand> ProcessVoiceCommandAsync(\n        GameContext context,\n        int maxRetries = 3)\n    {\n        for (int attempt = 1; attempt <= maxRetries; attempt++)\n        {\n            try\n            {\n                // Step 1: Voice recognition\n                var sttResult = await _sttService.RecognizeSpeechAsync();\n                \n                if (!sttResult.Success)\n                {\n                    if (attempt < maxRetries)\n                    {\n                        await _ttsService.SpeakAsync(\n                            sttResult.ErrorMessage ?? \n                            \"I didn't catch that. Please try again.\");\n                        continue;\n                    }\n                    throw new VoiceRecognitionException(sttResult.ErrorMessage);\n                }\n                \n                // Step 2: Check confidence\n                if (sttResult.Confidence < 0.7)\n                {\n                    // Ask for confirmation\n                    var confirmed = await ConfirmTranscription(\n                        sttResult.TranscribedText);\n                    if (!confirmed && attempt < maxRetries)\n                        continue;\n                }\n                \n                // Step 3: Parse command\n                var parsed = await _parserService.ParseAsync(\n                    sttResult.TranscribedText,\n                    context);\n                \n                // Step 4: Validate parse confidence\n                if (parsed.Confidence < 0.5)\n                {\n                    if (attempt < maxRetries)\n                    {\n                        await _ttsService.SpeakAsync(\n                            \"I'm not sure I understood that. \" +\n                            \"Could you rephrase?\");\n                        continue;\n                    }\n                }\n                \n                return parsed;\n            }\n            catch (Exception ex) when (attempt < maxRetries)\n            {\n                _logger.LogWarning(ex,\n                    \"Attempt {Attempt} failed, retrying...\", attempt);\n                \n                await _ttsService.SpeakAsync(\n                    \"Sorry, something went wrong. Let's try again.\");\n            }\n        }\n        \n        throw new MaxRetriesExceededException(\n            \"Failed to process voice command after maximum retries\");\n    }\n    \n    private async Task<bool> ConfirmTranscription(string text)\n    {\n        await _ttsService.SpeakAsync($\"Did you say '{text}'?\");\n        \n        var response = await _sttService.RecognizeSpeechAsync();\n        if (!response.Success)\n            return false;\n        \n        var confirmation = response.TranscribedText.ToLower();\n        return confirmation.Contains(\"yes\") || \n               confirmation.Contains(\"yeah\") || \n               confirmation.Contains(\"correct\");\n    }\n}\n```\n\n## Performance Optimization\n\n### Preloading and Warmup\n\n```csharp\npublic class VoicePipelineWarmup\n{\n    public async Task WarmupAsync()\n    {\n        // Initialize speech recognizer\n        await InitializeSpeechRecognizer();\n        \n        // Preload TTS voices\n        await PreloadTtsVoices();\n        \n        // Test LLM connection\n        await TestLlmConnection();\n        \n        // Load command cache\n        await LoadCommandCache();\n    }\n}\n```\n\n### Batch Processing\n\n```csharp\n// Process multiple cached commands at startup\npublic async Task PreprocessCommonCommands()\n{\n    var commonCommands = new[]\n    {\n        \"look\", \"look around\", \"inventory\", \n        \"go north\", \"go south\", \"go east\", \"go west\",\n        \"take all\", \"help\"\n    };\n    \n    foreach (var cmd in commonCommands)\n    {\n        await _parserService.ParseAsync(cmd, GetDefaultContext());\n    }\n}\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 03-technical-stack.md, 06-game-engine.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/05-voice-pipeline.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/04-data-models.md\ndocs/03-technical-stack.md\ndocs/05-voice-pipeline.md\n\n# Current Time\n10/23/2025, 7:22:04 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n56,229 / 127.805K tokens used (44%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll continue with the remaining documentation files. Let me create documents 06 through 11 to complete the comprehensive architecture documentation.\n\n<write_to_file>\n<path>docs/06-game-engine.md</path>\n<content># 06 - Game Engine\n\n## Overview\n\nThe game engine is the core logic system that manages world state, processes commands, handles puzzles, and drives the narrative forward. This document details the engine architecture and implementation.\n\n## Engine Architecture\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                      GAME ENGINE                             ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ                                                              ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê               ‚îÇ\n‚îÇ  ‚îÇ State Machine  ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ Command Router ‚îÇ               ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚îÇ\n‚îÇ           ‚îÇ                       ‚îÇ                         ‚îÇ\n‚îÇ           ‚ñº                       ‚ñº                         ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê               ‚îÇ\n‚îÇ  ‚îÇ World Manager  ‚îÇ      ‚îÇAction Executor ‚îÇ               ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚îÇ\n‚îÇ           ‚îÇ                       ‚îÇ                         ‚îÇ\n‚îÇ           ‚ñº                       ‚ñº                         ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê               ‚îÇ\n‚îÇ  ‚îÇ Inventory Mgr  ‚îÇ      ‚îÇ Puzzle Engine  ‚îÇ               ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚îÇ\n‚îÇ                                                              ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## Core Components\n\n### 1. Game State Machine\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class GameStateMachine\n    {\n        private readonly IWorldManager _worldManager;\n        private readonly IInventoryManager _inventoryManager;\n        private readonly IPuzzleEngine _puzzleEngine;\n        private readonly ILogger _logger;\n        \n        public GameState CurrentState { get; private set; }\n        \n        public GameStateMachine(\n            IWorldManager worldManager,\n            IInventoryManager inventoryManager,\n            IPuzzleEngine puzzleEngine,\n            ILogger<GameStateMachine> logger)\n        {\n            _worldManager = worldManager;\n            _inventoryManager = inventoryManager;\n            _puzzleEngine = puzzleEngine;\n            _logger = logger;\n        }\n        \n        public async Task InitializeAsync(StoryPack storyPack)\n        {\n            CurrentState = new GameState();\n            \n            // Initialize world from story pack\n            await _worldManager.LoadStoryPackAsync(storyPack);\n            \n            // Set starting location\n            CurrentState.Player.CurrentLocationId = storyPack.StartingRoomId;\n            \n            // Initialize world state\n            CurrentState.World = new WorldState\n            {\n                CurrentThemeId = storyPack.Id,\n                Rooms = storyPack.Rooms.ToDictionary(r => r.Id, r => r),\n                Objects = storyPack.Objects\n            };\n            \n            _logger.LogInformation(\n                \"Game initialized with theme: {Theme}\", storyPack.Theme);\n        }\n        \n        public Room GetCurrentRoom()\n        {\n            return CurrentState.World.Rooms[\n                CurrentState.Player.CurrentLocationId];\n        }\n        \n        public List<GameObject> GetVisibleObjects()\n        {\n            var room = GetCurrentRoom();\n            return room.State.VisibleObjectIds\n                .Select(id => CurrentState.World.Objects[id])\n                .Where(obj => obj.IsVisible)\n                .ToList();\n        }\n        \n        public bool CanTransitionTo(string roomId)\n        {\n            var currentRoom = GetCurrentRoom();\n            \n            // Check if exit exists\n            if (!currentRoom.Exits.ContainsValue(roomId))\n                return false;\n            \n            // Check if room is locked\n            var targetRoom = CurrentState.World.Rooms[roomId];\n            if (targetRoom.State.IsLocked)\n            {\n                // Check if player has key or unlock conditions met\n                return CheckUnlockConditions(targetRoom);\n            }\n            \n            return true;\n        }\n        \n        public void TransitionTo(string roomId)\n        {\n            if (!CanTransitionTo(roomId))\n            {\n                throw new InvalidOperationException(\n                    $\"Cannot transition to room: {roomId}\");\n            }\n            \n            var previousLocation = CurrentState.Player.CurrentLocationId;\n            CurrentState.Player.CurrentLocationId = roomId;\n            \n            // Mark room as visited\n            var room = CurrentState.World.Rooms[roomId];\n            room.IsVisited = true;\n            \n            // Update stats\n            if (!room.IsVisited)\n            {\n                CurrentState.Player.Stats.RoomsExplored++;\n            }\n            \n            _logger.LogInformation(\n                \"Player moved from {From} to {To}\",\n                previousLocation, roomId);\n        }\n        \n        private bool CheckUnlockConditions(Room room)\n        {\n            // Check required flags\n            if (room.State.Flags.TryGetValue(\"requires_key\", out var requiresKey)\n                && requiresKey)\n            {\n                var keyId = room.State.Flags\n                    .GetValueOrDefault(\"key_id\")?.ToString();\n                return _inventoryManager.HasItem(keyId);\n            }\n            \n            return false;\n        }\n    }\n}\n```\n\n### 2. Command Router\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class CommandRouter\n    {\n        private readonly Dictionary<string, ICommandHandler> _handlers;\n        private readonly ILogger _logger;\n        \n        public CommandRouter(\n            IEnumerable<ICommandHandler> handlers,\n            ILogger<CommandRouter> logger)\n        {\n            _handlers = handlers.ToDictionary(h => h.Verb, h => h);\n            _logger = logger;\n        }\n        \n        public async Task<CommandResult> RouteAsync(\n            ParsedCommand command,\n            GameState gameState)\n        {\n            _logger.LogInformation(\n                \"Routing command: {Verb} {Object}\",\n                command.Verb, command.Object);\n            \n            // Find appropriate handler\n            if (!_handlers.TryGetValue(command.Verb, out var handler))\n            {\n                return new CommandResult\n                {\n                    Success = false,\n                    Type = CommandResultType.InvalidCommand,\n                    Message = $\"I don't understand '{command.Verb}'.\"\n                };\n            }\n            \n            // Validate command\n            var validation = await handler.ValidateAsync(command, gameState);\n            if (!validation.IsValid)\n            {\n                return new CommandResult\n                {\n                    Success = false,\n                    Type = CommandResultType.RequirementsNotMet,\n                    Message = validation.Message\n                };\n            }\n            \n            // Execute command\n            try\n            {\n                var result = await handler.ExecuteAsync(command, gameState);\n                \n                // Update game stats\n                gameState.Player.Stats.CommandsExecuted++;\n                gameState.World.TurnNumber++;\n                \n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Command execution failed\");\n                return new CommandResult\n                {\n                    Success = false,\n                    Type = CommandResultType.Failure,\n                    Message = \"Something went wrong. Please try again.\"\n                };\n            }\n        }\n    }\n}\n```\n\n### 3. Command Handlers\n\n#### Movement Handler\n\n```csharp\npublic class MoveCommandHandler : ICommandHandler\n{\n    public string Verb => \"go\";\n    \n    private readonly IGameStateMachine _stateMachine;\n    \n    public async Task<ValidationResult> ValidateAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        if (string.IsNullOrEmpty(command.Object))\n        {\n            return ValidationResult.Invalid(\n                \"Go where? Specify a direction.\");\n        }\n        \n        var currentRoom = _stateMachine.GetCurrentRoom();\n        var direction = NormalizeDirection(command.Object);\n        \n        if (!currentRoom.Exits.TryGetValue(direction, out var targetRoomId))\n        {\n            return ValidationResult.Invalid(\n                $\"You can't go {direction} from here.\");\n        }\n        \n        if (!_stateMachine.CanTransitionTo(targetRoomId))\n        {\n            return ValidationResult.Invalid(\n                \"The way is blocked.\");\n        }\n        \n        return ValidationResult.Valid();\n    }\n    \n    public async Task<CommandResult> ExecuteAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        var currentRoom = _stateMachine.GetCurrentRoom();\n        var direction = NormalizeDirection(command.Object);\n        var targetRoomId = currentRoom.Exits[direction];\n        \n        _stateMachine.TransitionTo(targetRoomId);\n        \n        var newRoom = _stateMachine.GetCurrentRoom();\n        \n        return new CommandResult\n        {\n            Success = true,\n            Type = CommandResultType.Success,\n            Message = $\"You move {direction}.\\n\\n{newRoom.Description}\",\n            StateChange = new GameStateChange\n            {\n                LocationChanged = targetRoomId\n            }\n        };\n    }\n    \n    private string NormalizeDirection(string input)\n    {\n        return input.ToLower() switch\n        {\n            \"n\" => \"north\",\n            \"s\" => \"south\",\n            \"e\" => \"east\",\n            \"w\" => \"west\",\n            \"u\" or \"upstairs\" => \"up\",\n            \"d\" or \"downstairs\" => \"down\",\n            _ => input.ToLower()\n        };\n    }\n}\n```\n\n#### Take Item Handler\n\n```csharp\npublic class TakeCommandHandler : ICommandHandler\n{\n    public string Verb => \"take\";\n    \n    private readonly IGameStateMachine _stateMachine;\n    private readonly IInventoryManager _inventoryManager;\n    \n    public async Task<ValidationResult> ValidateAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        if (string.IsNullOrEmpty(command.Object))\n        {\n            return ValidationResult.Invalid(\"Take what?\");\n        }\n        \n        var visibleObjects = _stateMachine.GetVisibleObjects();\n        var targetObject = visibleObjects\n            .FirstOrDefault(o => o.Id.Contains(command.Object) ||\n                               o.Name.Contains(command.Object, \n                                   StringComparison.OrdinalIgnoreCase));\n        \n        if (targetObject == null)\n        {\n            return ValidationResult.Invalid(\n                $\"You don't see a {command.Object} here.\");\n        }\n        \n        if (!targetObject.IsCollectable)\n        {\n            return ValidationResult.Invalid(\n                $\"You can't take the {targetObject.Name}.\");\n        }\n        \n        if (!_inventoryManager.CanAdd(targetObject))\n        {\n            return ValidationResult.Invalid(\n                \"You're carrying too much.\");\n        }\n        \n        return ValidationResult.Valid();\n    }\n    \n    public async Task<CommandResult> ExecuteAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        var visibleObjects = _stateMachine.GetVisibleObjects();\n        var targetObject = visibleObjects\n            .First(o => o.Id.Contains(command.Object) ||\n                       o.Name.Contains(command.Object,\n                           StringComparison.OrdinalIgnoreCase));\n        \n        // Add to inventory\n        _inventoryManager.AddItem(targetObject);\n        \n        // Remove from room\n        var currentRoom = _stateMachine.GetCurrentRoom();\n        currentRoom.State.VisibleObjectIds.Remove(targetObject.Id);\n        targetObject.IsVisible = false;\n        \n        // Get action message\n        var message = targetObject.Actions\n            .GetValueOrDefault(\"take\")?.SuccessMessage\n            ?? $\"You take the {targetObject.Name}.\";\n        \n        // Update stats\n        gameState.Player.Stats.ItemsCollected++;\n        \n        return new CommandResult\n        {\n            Success = true,\n            Type = CommandResultType.Success,\n            Message = message,\n            StateChange = new GameStateChange\n            {\n                ItemsAdded = new List<string> { targetObject.Id }\n            }\n        };\n    }\n}\n```\n\n#### Use Item Handler\n\n```csharp\npublic class UseCommandHandler : ICommandHandler\n{\n    public string Verb => \"use\";\n    \n    private readonly IGameStateMachine _stateMachine;\n    private readonly IInventoryManager _inventoryManager;\n    private readonly IPuzzleEngine _puzzleEngine;\n    \n    public async Task<ValidationResult> ValidateAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        if (string.IsNullOrEmpty(command.Object))\n        {\n            return ValidationResult.Invalid(\"Use what?\");\n        }\n        \n        var item = _inventoryManager.GetItem(command.Object);\n        if (item == null)\n        {\n            return ValidationResult.Invalid(\n                $\"You don't have a {command.Object}.\");\n        }\n        \n        if (!item.Actions.ContainsKey(\"use\"))\n        {\n            return ValidationResult.Invalid(\n                $\"You can't use the {item.Name} like that.\");\n        }\n        \n        return ValidationResult.Valid();\n    }\n    \n    public async Task<CommandResult> ExecuteAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        var item = _inventoryManager.GetItem(command.Object);\n        var useAction = item.Actions[\"use\"];\n        \n        // Check required flags\n        if (!CheckRequiredFlags(useAction, gameState))\n        {\n            return new CommandResult\n            {\n                Success = false,\n                Type = CommandResultType.RequirementsNotMet,\n                Message = useAction.FailureMessage\n            };\n        }\n        \n        // Apply state changes\n        foreach (var stateChange in useAction.StateChanges)\n        {\n            ApplyStateChange(stateChange, item, gameState);\n        }\n        \n        // Check for puzzle completion\n        var puzzleResult = await _puzzleEngine\n            .CheckPuzzleCompletionAsync(gameState);\n        \n        var messages = new List<string> { useAction.SuccessMessage };\n        if (puzzleResult.Completed)\n        {\n            messages.Add(puzzleResult.CompletionMessage);\n            gameState.Player.Stats.PuzzlesSolved++;\n        }\n        \n        // Consume item if needed\n        if (useAction.ConsumesItem)\n        {\n            _inventoryManager.RemoveItem(item.Id);\n            messages.Add($\"The {item.Name} is used up.\");\n        }\n        else\n        {\n            item.State.UsageCount++;\n        }\n        \n        return new CommandResult\n        {\n            Success = true,\n            Type = CommandResultType.Success,\n            Message = string.Join(\"\\n\\n\", messages)\n        };\n    }\n    \n    private bool CheckRequiredFlags(\n        ActionDefinition action,\n        GameState gameState)\n    {\n        foreach (var flag in action.RequiredFlags)\n        {\n            if (!gameState.Progress.StoryFlags\n                .GetValueOrDefault(flag, false))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    private void ApplyStateChange(\n        StateChange change,\n        GameObject item,\n        GameState gameState)\n    {\n        switch (change.Target)\n        {\n            case \"self\":\n                ApplyToObject(item, change);\n                break;\n            case \"room\":\n                ApplyToRoom(\n                    _stateMachine.GetCurrentRoom(),\n                    change);\n                break;\n            default:\n                var targetObj = gameState.World.Objects[change.Target];\n                ApplyToObject(targetObj, change);\n                break;\n        }\n    }\n    \n    private void ApplyToObject(GameObject obj, StateChange change)\n    {\n        var property = obj.GetType().GetProperty(change.Property);\n        property?.SetValue(obj, change.NewValue);\n    }\n    \n    private void ApplyToRoom(Room room, StateChange change)\n    {\n        var property = room.GetType().GetProperty(change.Property);\n        property?.SetValue(room, change.NewValue);\n    }\n}\n```\n\n### 4. Inventory Manager\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class InventoryManager : IInventoryManager\n    {\n        private readonly GameState _gameState;\n        private readonly ILogger _logger;\n        \n        public InventoryManager(\n            GameState gameState,\n            ILogger<InventoryManager> logger)\n        {\n            _gameState = gameState;\n            _logger = logger;\n        }\n        \n        public bool CanAdd(GameObject item)\n        {\n            var inventory = _gameState.Player.Inventory;\n            return inventory.TotalWeight + item.Weight \n                <= inventory.MaxCapacity;\n        }\n        \n        public void AddItem(GameObject item)\n        {\n            var inventory = _gameState.Player.Inventory;\n            \n            if (!CanAdd(item))\n            {\n                throw new InvalidOperationException(\n                    \"Inventory is full\");\n            }\n            \n            inventory.Items.Add(item);\n            inventory.TotalWeight += item.Weight;\n            \n            _logger.LogInformation(\n                \"Added {Item} to inventory (Weight: {Weight}/{Max})\",\n                item.Name, inventory.TotalWeight, inventory.MaxCapacity);\n        }\n        \n        public void RemoveItem(string itemId)\n        {\n            var inventory = _gameState.Player.Inventory;\n            var item = inventory.Items.FirstOrDefault(i => i.Id == itemId);\n            \n            if (item != null)\n            {\n                inventory.Items.Remove(item);\n                inventory.TotalWeight -= item.Weight;\n                \n                _logger.LogInformation(\n                    \"Removed {Item} from inventory\", item.Name);\n            }\n        }\n        \n        public bool HasItem(string itemId)\n        {\n            return _gameState.Player.Inventory.Items\n                .Any(i => i.Id == itemId);\n        }\n        \n        public GameObject GetItem(string itemId)\n        {\n            return _gameState.Player.Inventory.Items\n                .FirstOrDefault(i => i.Id.Contains(itemId) ||\n                    i.Name.Contains(itemId, \n                        StringComparison.OrdinalIgnoreCase));\n        }\n        \n        public List<GameObject> GetAllItems()\n        {\n            return _gameState.Player.Inventory.Items.ToList();\n        }\n        \n        public string GetInventoryDescription()\n        {\n            var inventory = _gameState.Player.Inventory;\n            \n            if (inventory.Items.Count == 0)\n            {\n                return \"You're not carrying anything.\";\n            }\n            \n            var items = inventory.Items\n                .Select(i => $\"- {i.Name}\")\n                .ToList();\n            \n            return $\"You are carrying:\\n\" +\n                   $\"{string.Join(\"\\n\", items)}\\n\\n\" +\n                   $\"Total weight: {inventory.TotalWeight}/\" +\n                   $\"{inventory.MaxCapacity}\";\n        }\n    }\n}\n```\n\n### 5. Puzzle Engine\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class PuzzleEngine : IPuzzleEngine\n    {\n        private readonly ILogger _logger;\n        \n        public async Task<PuzzleResult> CheckPuzzleCompletionAsync(\n            GameState gameState)\n        {\n            // Check if any puzzle conditions are met\n            var completedPuzzles = new List<string>();\n            \n            // Example: Check if lantern lit in dark room\n            if (CheckLanternPuzzle(gameState))\n            {\n                completedPuzzles.Add(\"lantern_puzzle\");\n            }\n            \n            // Example: Check if all items collected\n            if (CheckCollectionPuzzle(gameState))\n            {\n                completedPuzzles.Add(\"collection_puzzle\");\n            }\n            \n            // Add newly completed puzzles to progress\n            var newlyCompleted = completedPuzzles\n                .Where(p => !gameState.Progress.CompletedPuzzles.Contains(p))\n                .ToList();\n            \n            if (newlyCompleted.Any())\n            {\n                gameState.Progress.CompletedPuzzles.AddRange(newlyCompleted);\n                \n                _logger.LogInformation(\n                    \"Puzzles completed: {Puzzles}\",\n                    string.Join(\", \", newlyCompleted));\n                \n                return new PuzzleResult\n                {\n                    Completed = true,\n                    PuzzleId = newlyCompleted.First(),\n                    CompletionMessage = GetCompletionMessage(\n                        newlyCompleted.First())\n                };\n            }\n            \n            return new PuzzleResult { Completed = false };\n        }\n        \n        private bool CheckLanternPuzzle(GameState gameState)\n        {\n            var currentRoom = gameState.World.Rooms[\n                gameState.Player.CurrentLocationId];\n            \n            if (currentRoom.LightLevel != LightLevel.Dark)\n                return false;\n            \n            var lantern = gameState.Player.Inventory.Items\n                .FirstOrDefault(i => i.Type == ObjectType.Light);\n            \n            return lantern?.State.CurrentState == \"lit\";\n        }\n        \n        private bool CheckCollectionPuzzle(GameState gameState)\n        {\n            // Example: collect 3 specific items\n            var requiredItems = new[] { \"key\", \"map\", \"compass\" };\n            var hasAllItems = requiredItems.All(item =>\n                gameState.Player.Inventory.Items.Any(i => \n                    i.Id.Contains(item)));\n            \n            return hasAllItems;\n        }\n        \n        private string GetCompletionMessage(string puzzleId)\n        {\n            return puzzleId switch\n            {\n                \"lantern_puzzle\" => \n                    \"The light reveals a hidden passage!\",\n                \"collection_puzzle\" => \n                    \"You've gathered everything you need!\",\n                _ => \"You've solved a puzzle!\"\n            };\n        }\n    }\n    \n    public class PuzzleResult\n    {\n        public bool Completed { get; set; }\n        public string PuzzleId { get; set; }\n        public string CompletionMessage { get; set; }\n    }\n}\n```\n\n### 6. Save/Load System\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class SaveGameService\n    {\n        private readonly IGameSaveRepository _repository;\n        private readonly ILogger _logger;\n        \n        public async Task<int> SaveGameAsync(\n            GameState gameState,\n            string saveName)\n        {\n            var saveEntity = new GameSaveEntity\n            {\n                Name = saveName,\n                ThemeId = gameState.World.CurrentThemeId,\n                GameStateJson = JsonSerializer.Serialize(gameState),\n                Timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),\n                Version = gameState.Meta.Version,\n                PlayTimeMinutes = (int)gameState.Player.Stats.PlayTime\n                    .TotalMinutes,\n                Thumbnail = await GenerateThumbnailAsync(gameState)\n            };\n            \n            var saveId = await _repository.SaveAsync(saveEntity);\n            \n            _logger.LogInformation(\n                \"Game saved: {Name} (ID: {Id})\", saveName, saveId);\n            \n            return saveId;\n        }\n        \n        public async Task<GameState> LoadGameAsync(int saveId)\n        {\n            var saveEntity = await _repository.GetAsync(saveId);\n            \n            if (saveEntity == null)\n            {\n                throw new FileNotFoundException(\n                    $\"Save game {saveId} not found\");\n            }\n            \n            var gameState = JsonSerializer.Deserialize<GameState>(\n                saveEntity.GameStateJson);\n            \n            _logger.LogInformation(\n                \"Game loaded: {Name} (ID: {Id})\",\n                saveEntity.Name, saveId);\n            \n            return gameState;\n        }\n        \n        public async Task<List<GameSaveInfo>> GetSaveListAsync()\n        {\n            var saves = await _repository.GetAllAsync();\n            \n            return saves.Select(s => new GameSaveInfo\n            {\n                Id = s.Id,\n                Name = s.Name,\n                ThemeId = s.ThemeId,\n                Timestamp = DateTimeOffset.FromUnixTimeSeconds(s.Timestamp)\n                    .DateTime,\n                PlayTime = TimeSpan.FromMinutes(s.PlayTimeMinutes),\n                Thumbnail = s.Thumbnail\n            }).ToList();\n        }\n        \n        public async Task DeleteSaveAsync(int saveId)\n        {\n            await _repository.DeleteAsync(saveId);\n            _logger.LogInformation(\"Save game deleted: {Id}\", saveId);\n        }\n        \n        private async Task<byte[]> GenerateThumbnailAsync(\n            GameState gameState)\n        {\n            // TODO: Generate screenshot or render current scene\n            return Array.Empty<byte>();\n        }\n    }\n}\n```\n\n## Performance Considerations\n\n### Command Processing Optimization\n\n```csharp\n// Cache frequently accessed game state\npublic class GameStateCache\n{\n    private Room _cachedCurrentRoom;\n    private List<GameObject> _cachedVisibleObjects;\n    private string _cachedLocationId;\n    \n    public Room GetCurrentRoom(GameState state)\n    {\n        if (_cachedLocationId != state.Player.CurrentLocationId)\n        {\n            _cachedCurrentRoom = state.World.Rooms[\n                state.Player.CurrentLocationId];\n            _cachedLocationId = state.Player.CurrentLocationId;\n        }\n        return _cachedCurrentRoom;\n    }\n    \n    public void InvalidateCache()\n    {\n        _cachedCurrentRoom = null;\n        _cachedVisibleObjects = null;\n        _cachedLocationId = null;\n    }\n}\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 04-data-models.md, 05-voice-pipeline.md, 09-content-management.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [x] Write 05-voice-pipeline.md\n- [x] Write 06-game-engine.md\n- [ ] Write 07-ui-ux-design.md\n- [ ] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/06-game-engine.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/06-game-engine.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/06-game-engine.md\">\n# 06 - Game Engine\n\n## Overview\n\nThe game engine is the core logic system that manages world state, processes commands, handles puzzles, and drives the narrative forward. This document details the engine architecture and implementation.\n\n## Engine Architecture\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                      GAME ENGINE                             ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ                                                              ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê               ‚îÇ\n‚îÇ  ‚îÇ State Machine  ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇ Command Router ‚îÇ               ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚îÇ\n‚îÇ           ‚îÇ                       ‚îÇ                         ‚îÇ\n‚îÇ           ‚ñº                       ‚ñº                         ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê               ‚îÇ\n‚îÇ  ‚îÇ World Manager  ‚îÇ      ‚îÇAction Executor ‚îÇ               ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚îÇ\n‚îÇ           ‚îÇ                       ‚îÇ                         ‚îÇ\n‚îÇ           ‚ñº                       ‚ñº                         ‚îÇ\n‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê               ‚îÇ\n‚îÇ  ‚îÇ Inventory Mgr  ‚îÇ      ‚îÇ Puzzle Engine  ‚îÇ               ‚îÇ\n‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò               ‚îÇ\n‚îÇ                                                              ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## Core Components\n\n### 1. Game State Machine\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class GameStateMachine\n    {\n        private readonly IWorldManager _worldManager;\n        private readonly IInventoryManager _inventoryManager;\n        private readonly IPuzzleEngine _puzzleEngine;\n        private readonly ILogger _logger;\n        \n        public GameState CurrentState { get; private set; }\n        \n        public GameStateMachine(\n            IWorldManager worldManager,\n            IInventoryManager inventoryManager,\n            IPuzzleEngine puzzleEngine,\n            ILogger<GameStateMachine> logger)\n        {\n            _worldManager = worldManager;\n            _inventoryManager = inventoryManager;\n            _puzzleEngine = puzzleEngine;\n            _logger = logger;\n        }\n        \n        public async Task InitializeAsync(StoryPack storyPack)\n        {\n            CurrentState = new GameState();\n            \n            // Initialize world from story pack\n            await _worldManager.LoadStoryPackAsync(storyPack);\n            \n            // Set starting location\n            CurrentState.Player.CurrentLocationId = storyPack.StartingRoomId;\n            \n            // Initialize world state\n            CurrentState.World = new WorldState\n            {\n                CurrentThemeId = storyPack.Id,\n                Rooms = storyPack.Rooms.ToDictionary(r => r.Id, r => r),\n                Objects = storyPack.Objects\n            };\n            \n            _logger.LogInformation(\n                \"Game initialized with theme: {Theme}\", storyPack.Theme);\n        }\n        \n        public Room GetCurrentRoom()\n        {\n            return CurrentState.World.Rooms[\n                CurrentState.Player.CurrentLocationId];\n        }\n        \n        public List<GameObject> GetVisibleObjects()\n        {\n            var room = GetCurrentRoom();\n            return room.State.VisibleObjectIds\n                .Select(id => CurrentState.World.Objects[id])\n                .Where(obj => obj.IsVisible)\n                .ToList();\n        }\n        \n        public bool CanTransitionTo(string roomId)\n        {\n            var currentRoom = GetCurrentRoom();\n            \n            // Check if exit exists\n            if (!currentRoom.Exits.ContainsValue(roomId))\n                return false;\n            \n            // Check if room is locked\n            var targetRoom = CurrentState.World.Rooms[roomId];\n            if (targetRoom.State.IsLocked)\n            {\n                // Check if player has key or unlock conditions met\n                return CheckUnlockConditions(targetRoom);\n            }\n            \n            return true;\n        }\n        \n        public void TransitionTo(string roomId)\n        {\n            if (!CanTransitionTo(roomId))\n            {\n                throw new InvalidOperationException(\n                    $\"Cannot transition to room: {roomId}\");\n            }\n            \n            var previousLocation = CurrentState.Player.CurrentLocationId;\n            CurrentState.Player.CurrentLocationId = roomId;\n            \n            // Mark room as visited\n            var room = CurrentState.World.Rooms[roomId];\n            room.IsVisited = true;\n            \n            // Update stats\n            if (!room.IsVisited)\n            {\n                CurrentState.Player.Stats.RoomsExplored++;\n            }\n            \n            _logger.LogInformation(\n                \"Player moved from {From} to {To}\",\n                previousLocation, roomId);\n        }\n        \n        private bool CheckUnlockConditions(Room room)\n        {\n            // Check required flags\n            if (room.State.Flags.TryGetValue(\"requires_key\", out var requiresKey)\n                && requiresKey)\n            {\n                var keyId = room.State.Flags\n                    .GetValueOrDefault(\"key_id\")?.ToString();\n                return _inventoryManager.HasItem(keyId);\n            }\n            \n            return false;\n        }\n    }\n}\n```\n\n### 2. Command Router\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class CommandRouter\n    {\n        private readonly Dictionary<string, ICommandHandler> _handlers;\n        private readonly ILogger _logger;\n        \n        public CommandRouter(\n            IEnumerable<ICommandHandler> handlers,\n            ILogger<CommandRouter> logger)\n        {\n            _handlers = handlers.ToDictionary(h => h.Verb, h => h);\n            _logger = logger;\n        }\n        \n        public async Task<CommandResult> RouteAsync(\n            ParsedCommand command,\n            GameState gameState)\n        {\n            _logger.LogInformation(\n                \"Routing command: {Verb} {Object}\",\n                command.Verb, command.Object);\n            \n            // Find appropriate handler\n            if (!_handlers.TryGetValue(command.Verb, out var handler))\n            {\n                return new CommandResult\n                {\n                    Success = false,\n                    Type = CommandResultType.InvalidCommand,\n                    Message = $\"I don't understand '{command.Verb}'.\"\n                };\n            }\n            \n            // Validate command\n            var validation = await handler.ValidateAsync(command, gameState);\n            if (!validation.IsValid)\n            {\n                return new CommandResult\n                {\n                    Success = false,\n                    Type = CommandResultType.RequirementsNotMet,\n                    Message = validation.Message\n                };\n            }\n            \n            // Execute command\n            try\n            {\n                var result = await handler.ExecuteAsync(command, gameState);\n                \n                // Update game stats\n                gameState.Player.Stats.CommandsExecuted++;\n                gameState.World.TurnNumber++;\n                \n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Command execution failed\");\n                return new CommandResult\n                {\n                    Success = false,\n                    Type = CommandResultType.Failure,\n                    Message = \"Something went wrong. Please try again.\"\n                };\n            }\n        }\n    }\n}\n```\n\n### 3. Command Handlers\n\n#### Movement Handler\n\n```csharp\npublic class MoveCommandHandler : ICommandHandler\n{\n    public string Verb => \"go\";\n    \n    private readonly IGameStateMachine _stateMachine;\n    \n    public async Task<ValidationResult> ValidateAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        if (string.IsNullOrEmpty(command.Object))\n        {\n            return ValidationResult.Invalid(\n                \"Go where? Specify a direction.\");\n        }\n        \n        var currentRoom = _stateMachine.GetCurrentRoom();\n        var direction = NormalizeDirection(command.Object);\n        \n        if (!currentRoom.Exits.TryGetValue(direction, out var targetRoomId))\n        {\n            return ValidationResult.Invalid(\n                $\"You can't go {direction} from here.\");\n        }\n        \n        if (!_stateMachine.CanTransitionTo(targetRoomId))\n        {\n            return ValidationResult.Invalid(\n                \"The way is blocked.\");\n        }\n        \n        return ValidationResult.Valid();\n    }\n    \n    public async Task<CommandResult> ExecuteAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        var currentRoom = _stateMachine.GetCurrentRoom();\n        var direction = NormalizeDirection(command.Object);\n        var targetRoomId = currentRoom.Exits[direction];\n        \n        _stateMachine.TransitionTo(targetRoomId);\n        \n        var newRoom = _stateMachine.GetCurrentRoom();\n        \n        return new CommandResult\n        {\n            Success = true,\n            Type = CommandResultType.Success,\n            Message = $\"You move {direction}.\\n\\n{newRoom.Description}\",\n            StateChange = new GameStateChange\n            {\n                LocationChanged = targetRoomId\n            }\n        };\n    }\n    \n    private string NormalizeDirection(string input)\n    {\n        return input.ToLower() switch\n        {\n            \"n\" => \"north\",\n            \"s\" => \"south\",\n            \"e\" => \"east\",\n            \"w\" => \"west\",\n            \"u\" or \"upstairs\" => \"up\",\n            \"d\" or \"downstairs\" => \"down\",\n            _ => input.ToLower()\n        };\n    }\n}\n```\n\n#### Take Item Handler\n\n```csharp\npublic class TakeCommandHandler : ICommandHandler\n{\n    public string Verb => \"take\";\n    \n    private readonly IGameStateMachine _stateMachine;\n    private readonly IInventoryManager _inventoryManager;\n    \n    public async Task<ValidationResult> ValidateAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        if (string.IsNullOrEmpty(command.Object))\n        {\n            return ValidationResult.Invalid(\"Take what?\");\n        }\n        \n        var visibleObjects = _stateMachine.GetVisibleObjects();\n        var targetObject = visibleObjects\n            .FirstOrDefault(o => o.Id.Contains(command.Object) ||\n                               o.Name.Contains(command.Object, \n                                   StringComparison.OrdinalIgnoreCase));\n        \n        if (targetObject == null)\n        {\n            return ValidationResult.Invalid(\n                $\"You don't see a {command.Object} here.\");\n        }\n        \n        if (!targetObject.IsCollectable)\n        {\n            return ValidationResult.Invalid(\n                $\"You can't take the {targetObject.Name}.\");\n        }\n        \n        if (!_inventoryManager.CanAdd(targetObject))\n        {\n            return ValidationResult.Invalid(\n                \"You're carrying too much.\");\n        }\n        \n        return ValidationResult.Valid();\n    }\n    \n    public async Task<CommandResult> ExecuteAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        var visibleObjects = _stateMachine.GetVisibleObjects();\n        var targetObject = visibleObjects\n            .First(o => o.Id.Contains(command.Object) ||\n                       o.Name.Contains(command.Object,\n                           StringComparison.OrdinalIgnoreCase));\n        \n        // Add to inventory\n        _inventoryManager.AddItem(targetObject);\n        \n        // Remove from room\n        var currentRoom = _stateMachine.GetCurrentRoom();\n        currentRoom.State.VisibleObjectIds.Remove(targetObject.Id);\n        targetObject.IsVisible = false;\n        \n        // Get action message\n        var message = targetObject.Actions\n            .GetValueOrDefault(\"take\")?.SuccessMessage\n            ?? $\"You take the {targetObject.Name}.\";\n        \n        // Update stats\n        gameState.Player.Stats.ItemsCollected++;\n        \n        return new CommandResult\n        {\n            Success = true,\n            Type = CommandResultType.Success,\n            Message = message,\n            StateChange = new GameStateChange\n            {\n                ItemsAdded = new List<string> { targetObject.Id }\n            }\n        };\n    }\n}\n```\n\n#### Use Item Handler\n\n```csharp\npublic class UseCommandHandler : ICommandHandler\n{\n    public string Verb => \"use\";\n    \n    private readonly IGameStateMachine _stateMachine;\n    private readonly IInventoryManager _inventoryManager;\n    private readonly IPuzzleEngine _puzzleEngine;\n    \n    public async Task<ValidationResult> ValidateAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        if (string.IsNullOrEmpty(command.Object))\n        {\n            return ValidationResult.Invalid(\"Use what?\");\n        }\n        \n        var item = _inventoryManager.GetItem(command.Object);\n        if (item == null)\n        {\n            return ValidationResult.Invalid(\n                $\"You don't have a {command.Object}.\");\n        }\n        \n        if (!item.Actions.ContainsKey(\"use\"))\n        {\n            return ValidationResult.Invalid(\n                $\"You can't use the {item.Name} like that.\");\n        }\n        \n        return ValidationResult.Valid();\n    }\n    \n    public async Task<CommandResult> ExecuteAsync(\n        ParsedCommand command,\n        GameState gameState)\n    {\n        var item = _inventoryManager.GetItem(command.Object);\n        var useAction = item.Actions[\"use\"];\n        \n        // Check required flags\n        if (!CheckRequiredFlags(useAction, gameState))\n        {\n            return new CommandResult\n            {\n                Success = false,\n                Type = CommandResultType.RequirementsNotMet,\n                Message = useAction.FailureMessage\n            };\n        }\n        \n        // Apply state changes\n        foreach (var stateChange in useAction.StateChanges)\n        {\n            ApplyStateChange(stateChange, item, gameState);\n        }\n        \n        // Check for puzzle completion\n        var puzzleResult = await _puzzleEngine\n            .CheckPuzzleCompletionAsync(gameState);\n        \n        var messages = new List<string> { useAction.SuccessMessage };\n        if (puzzleResult.Completed)\n        {\n            messages.Add(puzzleResult.CompletionMessage);\n            gameState.Player.Stats.PuzzlesSolved++;\n        }\n        \n        // Consume item if needed\n        if (useAction.ConsumesItem)\n        {\n            _inventoryManager.RemoveItem(item.Id);\n            messages.Add($\"The {item.Name} is used up.\");\n        }\n        else\n        {\n            item.State.UsageCount++;\n        }\n        \n        return new CommandResult\n        {\n            Success = true,\n            Type = CommandResultType.Success,\n            Message = string.Join(\"\\n\\n\", messages)\n        };\n    }\n    \n    private bool CheckRequiredFlags(\n        ActionDefinition action,\n        GameState gameState)\n    {\n        foreach (var flag in action.RequiredFlags)\n        {\n            if (!gameState.Progress.StoryFlags\n                .GetValueOrDefault(flag, false))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    private void ApplyStateChange(\n        StateChange change,\n        GameObject item,\n        GameState gameState)\n    {\n        switch (change.Target)\n        {\n            case \"self\":\n                ApplyToObject(item, change);\n                break;\n            case \"room\":\n                ApplyToRoom(\n                    _stateMachine.GetCurrentRoom(),\n                    change);\n                break;\n            default:\n                var targetObj = gameState.World.Objects[change.Target];\n                ApplyToObject(targetObj, change);\n                break;\n        }\n    }\n    \n    private void ApplyToObject(GameObject obj, StateChange change)\n    {\n        var property = obj.GetType().GetProperty(change.Property);\n        property?.SetValue(obj, change.NewValue);\n    }\n    \n    private void ApplyToRoom(Room room, StateChange change)\n    {\n        var property = room.GetType().GetProperty(change.Property);\n        property?.SetValue(room, change.NewValue);\n    }\n}\n```\n\n### 4. Inventory Manager\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class InventoryManager : IInventoryManager\n    {\n        private readonly GameState _gameState;\n        private readonly ILogger _logger;\n        \n        public InventoryManager(\n            GameState gameState,\n            ILogger<InventoryManager> logger)\n        {\n            _gameState = gameState;\n            _logger = logger;\n        }\n        \n        public bool CanAdd(GameObject item)\n        {\n            var inventory = _gameState.Player.Inventory;\n            return inventory.TotalWeight + item.Weight \n                <= inventory.MaxCapacity;\n        }\n        \n        public void AddItem(GameObject item)\n        {\n            var inventory = _gameState.Player.Inventory;\n            \n            if (!CanAdd(item))\n            {\n                throw new InvalidOperationException(\n                    \"Inventory is full\");\n            }\n            \n            inventory.Items.Add(item);\n            inventory.TotalWeight += item.Weight;\n            \n            _logger.LogInformation(\n                \"Added {Item} to inventory (Weight: {Weight}/{Max})\",\n                item.Name, inventory.TotalWeight, inventory.MaxCapacity);\n        }\n        \n        public void RemoveItem(string itemId)\n        {\n            var inventory = _gameState.Player.Inventory;\n            var item = inventory.Items.FirstOrDefault(i => i.Id == itemId);\n            \n            if (item != null)\n            {\n                inventory.Items.Remove(item);\n                inventory.TotalWeight -= item.Weight;\n                \n                _logger.LogInformation(\n                    \"Removed {Item} from inventory\", item.Name);\n            }\n        }\n        \n        public bool HasItem(string itemId)\n        {\n            return _gameState.Player.Inventory.Items\n                .Any(i => i.Id == itemId);\n        }\n        \n        public GameObject GetItem(string itemId)\n        {\n            return _gameState.Player.Inventory.Items\n                .FirstOrDefault(i => i.Id.Contains(itemId) ||\n                    i.Name.Contains(itemId, \n                        StringComparison.OrdinalIgnoreCase));\n        }\n        \n        public List<GameObject> GetAllItems()\n        {\n            return _gameState.Player.Inventory.Items.ToList();\n        }\n        \n        public string GetInventoryDescription()\n        {\n            var inventory = _gameState.Player.Inventory;\n            \n            if (inventory.Items.Count == 0)\n            {\n                return \"You're not carrying anything.\";\n            }\n            \n            var items = inventory.Items\n                .Select(i => $\"- {i.Name}\")\n                .ToList();\n            \n            return $\"You are carrying:\\n\" +\n                   $\"{string.Join(\"\\n\", items)}\\n\\n\" +\n                   $\"Total weight: {inventory.TotalWeight}/\" +\n                   $\"{inventory.MaxCapacity}\";\n        }\n    }\n}\n```\n\n### 5. Puzzle Engine\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class PuzzleEngine : IPuzzleEngine\n    {\n        private readonly ILogger _logger;\n        \n        public async Task<PuzzleResult> CheckPuzzleCompletionAsync(\n            GameState gameState)\n        {\n            // Check if any puzzle conditions are met\n            var completedPuzzles = new List<string>();\n            \n            // Example: Check if lantern lit in dark room\n            if (CheckLanternPuzzle(gameState))\n            {\n                completedPuzzles.Add(\"lantern_puzzle\");\n            }\n            \n            // Example: Check if all items collected\n            if (CheckCollectionPuzzle(gameState))\n            {\n                completedPuzzles.Add(\"collection_puzzle\");\n            }\n            \n            // Add newly completed puzzles to progress\n            var newlyCompleted = completedPuzzles\n                .Where(p => !gameState.Progress.CompletedPuzzles.Contains(p))\n                .ToList();\n            \n            if (newlyCompleted.Any())\n            {\n                gameState.Progress.CompletedPuzzles.AddRange(newlyCompleted);\n                \n                _logger.LogInformation(\n                    \"Puzzles completed: {Puzzles}\",\n                    string.Join(\", \", newlyCompleted));\n                \n                return new PuzzleResult\n                {\n                    Completed = true,\n                    PuzzleId = newlyCompleted.First(),\n                    CompletionMessage = GetCompletionMessage(\n                        newlyCompleted.First())\n                };\n            }\n            \n            return new PuzzleResult { Completed = false };\n        }\n        \n        private bool CheckLanternPuzzle(GameState gameState)\n        {\n            var currentRoom = gameState.World.Rooms[\n                gameState.Player.CurrentLocationId];\n            \n            if (currentRoom.LightLevel != LightLevel.Dark)\n                return false;\n            \n            var lantern = gameState.Player.Inventory.Items\n                .FirstOrDefault(i => i.Type == ObjectType.Light);\n            \n            return lantern?.State.CurrentState == \"lit\";\n        }\n        \n        private bool CheckCollectionPuzzle(GameState gameState)\n        {\n            // Example: collect 3 specific items\n            var requiredItems = new[] { \"key\", \"map\", \"compass\" };\n            var hasAllItems = requiredItems.All(item =>\n                gameState.Player.Inventory.Items.Any(i => \n                    i.Id.Contains(item)));\n            \n            return hasAllItems;\n        }\n        \n        private string GetCompletionMessage(string puzzleId)\n        {\n            return puzzleId switch\n            {\n                \"lantern_puzzle\" => \n                    \"The light reveals a hidden passage!\",\n                \"collection_puzzle\" => \n                    \"You've gathered everything you need!\",\n                _ => \"You've solved a puzzle!\"\n            };\n        }\n    }\n    \n    public class PuzzleResult\n    {\n        public bool Completed { get; set; }\n        public string PuzzleId { get; set; }\n        public string CompletionMessage { get; set; }\n    }\n}\n```\n\n### 6. Save/Load System\n\n```csharp\nnamespace TheCabin.Domain.Engine\n{\n    public class SaveGameService\n    {\n        private readonly IGameSaveRepository _repository;\n        private readonly ILogger _logger;\n        \n        public async Task<int> SaveGameAsync(\n            GameState gameState,\n            string saveName)\n        {\n            var saveEntity = new GameSaveEntity\n            {\n                Name = saveName,\n                ThemeId = gameState.World.CurrentThemeId,\n                GameStateJson = JsonSerializer.Serialize(gameState),\n                Timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds(),\n                Version = gameState.Meta.Version,\n                PlayTimeMinutes = (int)gameState.Player.Stats.PlayTime\n                    .TotalMinutes,\n                Thumbnail = await GenerateThumbnailAsync(gameState)\n            };\n            \n            var saveId = await _repository.SaveAsync(saveEntity);\n            \n            _logger.LogInformation(\n                \"Game saved: {Name} (ID: {Id})\", saveName, saveId);\n            \n            return saveId;\n        }\n        \n        public async Task<GameState> LoadGameAsync(int saveId)\n        {\n            var saveEntity = await _repository.GetAsync(saveId);\n            \n            if (saveEntity == null)\n            {\n                throw new FileNotFoundException(\n                    $\"Save game {saveId} not found\");\n            }\n            \n            var gameState = JsonSerializer.Deserialize<GameState>(\n                saveEntity.GameStateJson);\n            \n            _logger.LogInformation(\n                \"Game loaded: {Name} (ID: {Id})\",\n                saveEntity.Name, saveId);\n            \n            return gameState;\n        }\n        \n        public async Task<List<GameSaveInfo>> GetSaveListAsync()\n        {\n            var saves = await _repository.GetAllAsync();\n            \n            return saves.Select(s => new GameSaveInfo\n            {\n                Id = s.Id,\n                Name = s.Name,\n                ThemeId = s.ThemeId,\n                Timestamp = DateTimeOffset.FromUnixTimeSeconds(s.Timestamp)\n                    .DateTime,\n                PlayTime = TimeSpan.FromMinutes(s.PlayTimeMinutes),\n                Thumbnail = s.Thumbnail\n            }).ToList();\n        }\n        \n        public async Task DeleteSaveAsync(int saveId)\n        {\n            await _repository.DeleteAsync(saveId);\n            _logger.LogInformation(\"Save game deleted: {Id}\", saveId);\n        }\n        \n        private async Task<byte[]> GenerateThumbnailAsync(\n            GameState gameState)\n        {\n            // TODO: Generate screenshot or render current scene\n            return Array.Empty<byte>();\n        }\n    }\n}\n```\n\n## Performance Considerations\n\n### Command Processing Optimization\n\n```csharp\n// Cache frequently accessed game state\npublic class GameStateCache\n{\n    private Room _cachedCurrentRoom;\n    private List<GameObject> _cachedVisibleObjects;\n    private string _cachedLocationId;\n    \n    public Room GetCurrentRoom(GameState state)\n    {\n        if (_cachedLocationId != state.Player.CurrentLocationId)\n        {\n            _cachedCurrentRoom = state.World.Rooms[\n                state.Player.CurrentLocationId];\n            _cachedLocationId = state.Player.CurrentLocationId;\n        }\n        return _cachedCurrentRoom;\n    }\n    \n    public void InvalidateCache()\n    {\n        _cachedCurrentRoom = null;\n        _cachedVisibleObjects = null;\n        _cachedLocationId = null;\n    }\n}\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 04-data-models.md, 05-voice-pipeline.md, 09-content-management.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/04-data-models.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/04-data-models.md\ndocs/06-game-engine.md\ndocs/03-technical-stack.md\ndocs/05-voice-pipeline.md\n\n# Current Time\n10/23/2025, 7:23:37 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n69,509 / 127.805K tokens used (54%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll continue with the remaining documents. Let me create the final 5 documentation files to complete the comprehensive architecture.\n\n<write_to_file>\n<path>docs/07-ui-ux-design.md</path>\n<content># 07 - UI/UX Design\n\n## Overview\n\nThis document outlines the user interface and user experience design for The Cabin, focusing on voice-first interaction patterns, visual hierarchy, and accessibility.\n\n## Design Principles\n\n1. **Voice-First**: UI supports but doesn't require touch interaction\n2. **Minimalist**: Clean, distraction-free interface\n3. **Feedback-Rich**: Clear visual and audio feedback\n4. **Accessible**: Inclusive design for all users\n5. **Immersive**: Support for the narrative experience\n\n## Screen Layouts\n\n### Main Game Screen\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n‚îÇ ‚îÇ  Stats Bar                                       ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  üè† Cabin Main    ‚ù§Ô∏è 100    üí° Dim    üïê 3:45   ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îÇ                                                        ‚îÇ\n‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  Story Feed (Scrollable)                        ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  > You stand in a dimly lit wooden cabin...     ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  ‚ñ∂ \"look around\"                                ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  > The walls are rough-hewn logs. A lantern     ‚îÇ ‚îÇ\n‚îÇ ‚îÇ    hangs from a rusty hook.                     ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  ‚ñ∂ \"take lantern\"                               ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  > You pick up the lantern. It feels heavy      ‚îÇ ‚îÇ\n‚îÇ ‚îÇ    with oil.                                     ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îÇ                                                        ‚îÇ\n‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n‚îÇ ‚îÇ  Transcript Preview                             ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  üé§ \"Take the lantern\"                          ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îÇ                                                        ‚îÇ\n‚îÇ         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                  ‚îÇ\n‚îÇ         ‚îÇ   üéôÔ∏è Voice Button       ‚îÇ                  ‚îÇ\n‚îÇ         ‚îÇ   (Tap to Speak)         ‚îÇ                  ‚îÇ\n‚îÇ         ‚îÇ   ‚àø‚àø‚àø Waveform ‚àø‚àø‚àø       ‚îÇ                  ‚îÇ\n‚îÇ         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                  ‚îÇ\n‚îÇ                                                        ‚îÇ\n‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n‚îÇ ‚îÇ  [Inventory]  [Menu]  [Settings]                ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### XAML Implementation\n\n```xaml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:vm=\"clr-namespace:TheCabin.ViewModels\"\n             x:Class=\"TheCabin.Views.MainPage\"\n             x:DataType=\"vm:MainViewModel\"\n             BackgroundColor=\"{DynamicResource PageBackgroundColor}\">\n    \n    <Grid RowDefinitions=\"Auto,*,Auto,Auto,Auto\" Padding=\"16\">\n        \n        <!-- Stats Bar -->\n        <Border Grid.Row=\"0\" \n                StyleClass=\"StatsBar\"\n                Padding=\"12,8\"\n                Margin=\"0,0,0,8\">\n            <Grid ColumnDefinitions=\"*,Auto,Auto,Auto\">\n                <Label Grid.Column=\"0\" \n                       Text=\"{Binding CurrentLocation}\"\n                       FontSize=\"16\"\n                       FontAttributes=\"Bold\"/>\n                <HorizontalStackLayout Grid.Column=\"1\" Spacing=\"12\">\n                    <Label Text=\"‚ù§Ô∏è\"/>\n                    <Label Text=\"{Binding PlayerHealth}\"/>\n                </HorizontalStackLayout>\n                <HorizontalStackLayout Grid.Column=\"2\" Spacing=\"12\">\n                    <Label Text=\"üí°\"/>\n                    <Label Text=\"{Binding LightLevel}\"/>\n                </HorizontalStackLayout>\n                <HorizontalStackLayout Grid.Column=\"3\" Spacing=\"12\">\n                    <Label Text=\"üïê\"/>\n                    <Label Text=\"{Binding GameTime}\"/>\n                </HorizontalStackLayout>\n            </Grid>\n        </Border>\n        \n        <!-- Story Feed -->\n        <Border Grid.Row=\"1\" \n                StyleClass=\"ContentPanel\"\n                Padding=\"16\">\n            <CollectionView ItemsSource=\"{Binding StoryFeed}\"\n                           VerticalScrollBarVisibility=\"Always\">\n                <CollectionView.ItemTemplate>\n                    <DataTemplate x:DataType=\"models:NarrativeEntry\">\n                        <Grid Padding=\"0,8\">\n                            <Label Text=\"{Binding Text}\"\n                                   TextColor=\"{Binding TextColor}\"\n                                   FontSize=\"16\"\n                                   LineBreakMode=\"WordWrap\"\n                                   FontAttributes=\"{Binding IsImportant, \n                                       Converter={StaticResource BoolToFontAttributes}}\"/>\n                        </Grid>\n                    </DataTemplate>\n                </CollectionView.ItemTemplate>\n            </CollectionView>\n        </Border>\n        \n        <!-- Transcript Preview -->\n        <Border Grid.Row=\"2\"\n                StyleClass=\"TranscriptPanel\"\n                Padding=\"12\"\n                Margin=\"0,8\"\n                IsVisible=\"{Binding IsListening}\">\n            <HorizontalStackLayout Spacing=\"8\">\n                <Label Text=\"üé§\" FontSize=\"16\"/>\n                <Label Text=\"{Binding TranscriptText}\"\n                       FontSize=\"14\"\n                       TextColor=\"{DynamicResource SecondaryTextColor}\"/>\n            </HorizontalStackLayout>\n        </Border>\n        \n        <!-- Voice Control -->\n        <Grid Grid.Row=\"3\" \n              Padding=\"0,16\"\n              HorizontalOptions=\"Center\">\n            <Button x:Name=\"VoiceButton\"\n                    Command=\"{Binding ToggleListeningCommand}\"\n                    HeightRequest=\"80\"\n                    WidthRequest=\"80\"\n                    CornerRadius=\"40\"\n                    BackgroundColor=\"{Binding IsListening, \n                        Converter={StaticResource BoolToRecordingColor}}\"\n                    BorderWidth=\"3\"\n                    BorderColor=\"{DynamicResource PrimaryColor}\">\n                <Button.ImageSource>\n                    <FontImageSource \n                        Glyph=\"üéôÔ∏è\"\n                        FontFamily=\"SegoeUIEmoji\"\n                        Size=\"32\"\n                        Color=\"White\"/>\n                </Button.ImageSource>\n            </Button>\n            \n            <!-- Waveform Animation (when listening) -->\n            <GraphicsView x:Name=\"WaveformView\"\n                         IsVisible=\"{Binding IsListening}\"\n                         HeightRequest=\"80\"\n                         WidthRequest=\"200\"\n                         VerticalOptions=\"Center\"\n                         HorizontalOptions=\"Center\"\n                         InputTransparent=\"True\"/>\n        </Grid>\n        \n        <!-- Bottom Navigation -->\n        <Border Grid.Row=\"4\" \n                StyleClass=\"BottomNav\"\n                Padding=\"8\">\n            <Grid ColumnDefinitions=\"*,*,*\">\n                <Button Grid.Column=\"0\"\n                        Text=\"üéí Inventory\"\n                        Command=\"{Binding ShowInventoryCommand}\"\n                        StyleClass=\"NavButton\"/>\n                <Button Grid.Column=\"1\"\n                        Text=\"üìñ Menu\"\n                        Command=\"{Binding ShowMenuCommand}\"\n                        StyleClass=\"NavButton\"/>\n                <Button Grid.Column=\"2\"\n                        Text=\"‚öôÔ∏è Settings\"\n                        Command=\"{Binding ShowSettingsCommand}\"\n                        StyleClass=\"NavButton\"/>\n            </Grid>\n        </Border>\n        \n    </Grid>\n</ContentPage>\n```\n\n## Component Details\n\n### 1. Voice Control Button\n\n```csharp\npublic partial class MainPage : ContentPage\n{\n    private readonly WaveformAnimator _waveformAnimator;\n    \n    public MainPage(MainViewModel viewModel)\n    {\n        InitializeComponent();\n        BindingContext = viewModel;\n        \n        _waveformAnimator = new WaveformAnimator(WaveformView);\n        \n        viewModel.PropertyChanged += OnViewModelPropertyChanged;\n    }\n    \n    private void OnViewModelPropertyChanged(object sender, \n        PropertyChangedEventArgs e)\n    {\n        if (e.PropertyName == nameof(MainViewModel.IsListening))\n        {\n            var vm = (MainViewModel)BindingContext;\n            if (vm.IsListening)\n            {\n                _waveformAnimator.Start();\n                VoiceButton.Scale = 1.1;\n            }\n            else\n            {\n                _waveformAnimator.Stop();\n                VoiceButton.Scale = 1.0;\n            }\n        }\n    }\n}\n```\n\n### 2. Waveform Animation\n\n```csharp\npublic class WaveformAnimator\n{\n    private readonly GraphicsView _graphicsView;\n    private readonly WaveformDrawable _drawable;\n    private IDispatcherTimer _timer;\n    \n    public WaveformAnimator(GraphicsView graphicsView)\n    {\n        _graphicsView = graphicsView;\n        _drawable = new WaveformDrawable();\n        _graphicsView.Drawable = _drawable;\n    }\n    \n    public void Start()\n    {\n        _timer = Dispatcher.CreateTimer();\n        _timer.Interval = TimeSpan.FromMilliseconds(50);\n        _timer.Tick += (s, e) =>\n        {\n            _drawable.Update();\n            _graphicsView.Invalidate();\n        };\n        _timer.Start();\n    }\n    \n    public void Stop()\n    {\n        _timer?.Stop();\n        _drawable.Reset();\n        _graphicsView.Invalidate();\n    }\n}\n\npublic class WaveformDrawable : IDrawable\n{\n    private readonly List<float> _amplitudes = new();\n    private readonly Random _random = new();\n    \n    public void Draw(ICanvas canvas, RectF dirtyRect)\n    {\n        canvas.StrokeColor = Colors.White;\n        canvas.StrokeSize = 3;\n        \n        var centerY = dirtyRect.Height / 2;\n        var barWidth = 4f;\n        var spacing = 6f;\n        var barCount = (int)(dirtyRect.Width / (barWidth + spacing));\n        \n        for (int i = 0; i < barCount && i < _amplitudes.Count; i++)\n        {\n            var x = i * (barWidth + spacing);\n            var amplitude = _amplitudes[i];\n            var height = amplitude * (dirtyRect.Height / 2);\n            \n            canvas.DrawLine(\n                x, centerY - height,\n                x, centerY + height);\n        }\n    }\n    \n    public void Update()\n    {\n        // Simulate audio amplitude\n        if (_amplitudes.Count > 30)\n            _amplitudes.RemoveAt(0);\n        \n        _amplitudes.Add((float)_random.NextDouble());\n    }\n    \n    public void Reset()\n    {\n        _amplitudes.Clear();\n    }\n}\n```\n\n### 3. Narrative Text Styling\n\n```xaml\n<!-- App.xaml Resource Dictionary -->\n<Style TargetType=\"Label\" x:Key=\"NarrativeText\">\n    <Setter Property=\"FontFamily\" Value=\"Georgia\"/>\n    <Setter Property=\"FontSize\" Value=\"16\"/>\n    <Setter Property=\"LineHeight\" Value=\"1.5\"/>\n    <Setter Property=\"TextColor\" Value=\"{DynamicResource PrimaryTextColor}\"/>\n</Style>\n\n<Style TargetType=\"Label\" x:Key=\"PlayerCommandText\">\n    <Setter Property=\"FontFamily\" Value=\"Courier\"/>\n    <Setter Property=\"FontSize\" Value=\"14\"/>\n    <Setter Property=\"TextColor\" Value=\"{DynamicResource AccentColor}\"/>\n    <Setter Property=\"Margin\" Value=\"16,8,0,8\"/>\n</Style>\n\n<Style TargetType=\"Label\" x:Key=\"SystemMessageText\">\n    <Setter Property=\"FontFamily\" Value=\"Arial\"/>\n    <Setter Property=\"FontSize\" Value=\"14\"/>\n    <Setter Property=\"FontAttributes\" Value=\"Italic\"/>\n    <Setter Property=\"TextColor\" Value=\"{DynamicResource SecondaryTextColor}\"/>\n</Style>\n```\n\n### 4. Inventory Screen\n\n```xaml\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"TheCabin.Views.InventoryPage\"\n             Title=\"Inventory\">\n    \n    <Grid RowDefinitions=\"Auto,*,Auto\" Padding=\"16\">\n        \n        <!-- Header -->\n        <Border Grid.Row=\"0\" \n                Padding=\"16\"\n                Margin=\"0,0,0,16\">\n            <Grid ColumnDefinitions=\"*,Auto\">\n                <Label Grid.Column=\"0\"\n                       Text=\"Your Inventory\"\n                       FontSize=\"24\"\n                       FontAttributes=\"Bold\"/>\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding WeightDisplay}\"\n                       FontSize=\"14\"\n                       VerticalOptions=\"End\"/>\n            </Grid>\n        </Border>\n        \n        <!-- Item List -->\n        <CollectionView Grid.Row=\"1\"\n                       ItemsSource=\"{Binding InventoryItems}\">\n            <CollectionView.ItemTemplate>\n                <DataTemplate>\n                    <SwipeView>\n                        <SwipeView.RightItems>\n                            <SwipeItems>\n                                <SwipeItem Text=\"Drop\"\n                                          BackgroundColor=\"DarkRed\"\n                                          Command=\"{Binding DropItemCommand}\"\n                                          CommandParameter=\"{Binding .}\"/>\n                                <SwipeItem Text=\"Use\"\n                                          BackgroundColor=\"DarkGreen\"\n                                          Command=\"{Binding UseItemCommand}\"\n                                          CommandParameter=\"{Binding .}\"/>\n                            </SwipeItems>\n                        </SwipeView.RightItems>\n                        \n                        <Border Padding=\"16\"\n                                Margin=\"0,4\"\n                                StyleClass=\"ItemCard\">\n                            <Grid ColumnDefinitions=\"Auto,*,Auto\">\n                                <Label Grid.Column=\"0\"\n                                       Text=\"{Binding Icon}\"\n                                       FontSize=\"24\"\n                                       Margin=\"0,0,12,0\"/>\n                                <VerticalStackLayout Grid.Column=\"1\">\n                                    <Label Text=\"{Binding Name}\"\n                                           FontSize=\"16\"\n                                           FontAttributes=\"Bold\"/>\n                                    <Label Text=\"{Binding Description}\"\n                                           FontSize=\"12\"\n                                           TextColor=\"{DynamicResource SecondaryTextColor}\"/>\n                                </VerticalStackLayout>\n                                <Label Grid.Column=\"2\"\n                                       Text=\"{Binding Weight, StringFormat='{0} kg'}\"\n                                       FontSize=\"12\"\n                                       VerticalOptions=\"Center\"/>\n                            </Grid>\n                        </Border>\n                    </SwipeView>\n                </DataTemplate>\n            </CollectionView.ItemTemplate>\n            \n            <CollectionView.EmptyView>\n                <VerticalStackLayout Padding=\"32\"\n                                    HorizontalOptions=\"Center\"\n                                    VerticalOptions=\"Center\">\n                    <Label Text=\"üéí\"\n                           FontSize=\"64\"\n                           HorizontalOptions=\"Center\"/>\n                    <Label Text=\"Your inventory is empty\"\n                           FontSize=\"16\"\n                           HorizontalOptions=\"Center\"\n                           Margin=\"0,16,0,0\"/>\n                </VerticalStackLayout>\n            </CollectionView.EmptyView>\n        </CollectionView>\n        \n        <!-- Close Button -->\n        <Button Grid.Row=\"2\"\n                Text=\"Close\"\n                Command=\"{Binding CloseCommand}\"\n                Margin=\"0,16,0,0\"/>\n    </Grid>\n</ContentPage>\n```\n\n### 5. Settings Screen\n\n```xaml\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"TheCabin.Views.SettingsPage\"\n             Title=\"Settings\">\n    \n    <ScrollView Padding=\"16\">\n        <VerticalStackLayout Spacing=\"24\">\n            \n            <!-- Voice Settings -->\n            <Border Padding=\"16\" StyleClass=\"SettingsSection\">\n                <VerticalStackLayout Spacing=\"16\">\n                    <Label Text=\"Voice Recognition\"\n                           FontSize=\"18\"\n                           FontAttributes=\"Bold\"/>\n                    \n                    <Grid ColumnDefinitions=\"*,Auto\">\n                        <Label Grid.Column=\"0\" \n                               Text=\"Push-to-Talk Mode\"\n                               VerticalOptions=\"Center\"/>\n                        <Switch Grid.Column=\"1\"\n                               IsToggled=\"{Binding UsePushToTalk}\"/>\n                    </Grid>\n                    \n                    <Label Text=\"Confidence Threshold\"/>\n                    <Slider Minimum=\"0.5\"\n                           Maximum=\"1.0\"\n                           Value=\"{Binding ConfidenceThreshold}\"/>\n                    \n                    <Grid ColumnDefinitions=\"*,Auto\">\n                        <Label Grid.Column=\"0\"\n                               Text=\"Offline Mode\"\n                               VerticalOptions=\"Center\"/>\n                        <Switch Grid.Column=\"1\"\n                               IsToggled=\"{Binding OfflineMode}\"/>\n                    </Grid>\n                </VerticalStackLayout>\n            </Border>\n            \n            <!-- Text-to-Speech Settings -->\n            <Border Padding=\"16\" StyleClass=\"SettingsSection\">\n                <VerticalStackLayout Spacing=\"16\">\n                    <Label Text=\"Text-to-Speech\"\n                           FontSize=\"18\"\n                           FontAttributes=\"Bold\"/>\n                    \n                    <Grid ColumnDefinitions=\"*,Auto\">\n                        <Label Grid.Column=\"0\"\n                               Text=\"Enable Narration\"\n                               VerticalOptions=\"Center\"/>\n                        <Switch Grid.Column=\"1\"\n                               IsToggled=\"{Binding TtsEnabled}\"/>\n                    </Grid>\n                    \n                    <Label Text=\"Speech Rate\"/>\n                    <Slider Minimum=\"0.5\"\n                           Maximum=\"2.0\"\n                           Value=\"{Binding SpeechRate}\"/>\n                    \n                    <Label Text=\"Voice Pitch\"/>\n                    <Slider Minimum=\"0.5\"\n                           Maximum=\"2.0\"\n                           Value=\"{Binding VoicePitch}\"/>\n                </VerticalStackLayout>\n            </Border>\n            \n            <!-- Display Settings -->\n            <Border Padding=\"16\" StyleClass=\"SettingsSection\">\n                <VerticalStackLayout Spacing=\"16\">\n                    <Label Text=\"Display\"\n                           FontSize=\"18\"\n                           FontAttributes=\"Bold\"/>\n                    \n                    <Label Text=\"Font Size\"/>\n                    <Slider Minimum=\"12\"\n                           Maximum=\"24\"\n                           Value=\"{Binding FontSize}\"/>\n                    \n                    <Label Text=\"Theme\"/>\n                    <Picker ItemsSource=\"{Binding AvailableThemes}\"\n                           SelectedItem=\"{Binding SelectedTheme}\"/>\n                </VerticalStackLayout>\n            </Border>\n            \n            <!-- About -->\n            <Border Padding=\"16\" StyleClass=\"SettingsSection\">\n                <VerticalStackLayout Spacing=\"8\">\n                    <Label Text=\"About\"\n                           FontSize=\"18\"\n                           FontAttributes=\"Bold\"/>\n                    <Label Text=\"{Binding AppVersion}\"\n                           FontSize=\"12\"/>\n                    <Label Text=\"¬© 2025 The Cabin\"\n                           FontSize=\"12\"/>\n                </VerticalStackLayout>\n            </Border>\n            \n        </VerticalStackLayout>\n    </ScrollView>\n</ContentPage>\n```\n\n## Theme System\n\n### Color Schemes\n\n```xml\n<!-- Light Theme -->\n<ResourceDictionary>\n    <Color x:Key=\"PageBackgroundColor\">#F5F5F5</Color>\n    <Color x:Key=\"PrimaryTextColor\">#212121</Color>\n    <Color x:Key=\"SecondaryTextColor\">#757575</Color>\n    <Color x:Key=\"PrimaryColor\">#2196F3</Color>\n    <Color x:Key=\"AccentColor\">#FF5722</Color>\n    <Color x:Key=\"CardBackgroundColor\">#FFFFFF</Color>\n    <Color x:Key=\"RecordingColor\">#F44336</Color>\n</ResourceDictionary>\n\n<!-- Dark Theme -->\n<ResourceDictionary>\n    <Color x:Key=\"PageBackgroundColor\">#121212</Color>\n    <Color x:Key=\"PrimaryTextColor\">#E0E0E0</Color>\n    <Color x:Key=\"SecondaryTextColor\">#9E9E9E</Color>\n    <Color x:Key=\"PrimaryColor\">#2196F3</Color>\n    <Color x:Key=\"AccentColor\">#FF5722</Color>\n    <Color x:Key=\"CardBackgroundColor\">#1E1E1E</Color>\n    <Color x:Key=\"RecordingColor\">#F44336</Color>\n</ResourceDictionary>\n```\n\n## Accessibility Features\n\n### 1. Screen Reader Support\n\n```csharp\npublic void ConfigureAccessibility()\n{\n    // Set semantic descriptions\n    VoiceButton.SetValue(SemanticProperties.DescriptionProperty,\n        \"Tap to speak a command\");\n    \n    VoiceButton.SetValue(SemanticProperties.HintProperty,\n        \"Records your voice command for the game\");\n    \n    // Announce state changes\n    SemanticScreenReader.Announce(\n        \"Voice recording started\");\n}\n```\n\n### 2. High Contrast Mode\n\n```csharp\npublic class AccessibilityService\n{\n    public bool IsHighContrastEnabled()\n    {\n        return Preferences.Get(\"high_contrast\", false);\n    }\n    \n    public void ApplyHighContrast()\n    {\n        Application.Current.Resources[\"PrimaryTextColor\"] = \n            Colors.White;\n        Application.Current.Resources[\"PageBackgroundColor\"] = \n            Colors.Black;\n    }\n}\n```\n\n### 3. Font Scaling\n\n```csharp\npublic double GetScaledFontSize(double baseSize)\n{\n    var scale = Preferences.Get(\"font_scale\", 1.0);\n    return baseSize * scale;\n}\n```\n\n## Animations and Transitions\n\n### Page Transitions\n\n```csharp\npublic async Task NavigateWithTransitionAsync(Page page)\n{\n    page.Opacity = 0;\n    await Navigation.PushAsync(page, false);\n    await page.FadeTo(1, 250, Easing.CubicInOut);\n}\n```\n\n### Button Press Feedback\n\n```csharp\nprivate async void OnButtonPressed(object sender, EventArgs e)\n{\n    var button = (Button)sender;\n    await button.ScaleTo(0.95, 50);\n    await button.ScaleTo(1.0, 50);\n}\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 02-system-architecture.md, 08-maui-implementation.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [x] Write 05-voice-pipeline.md\n- [x] Write 06-game-engine.md\n- [x] Write 07-ui-ux-design.md\n- [ ] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/07-ui-ux-design.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/07-ui-ux-design.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/07-ui-ux-design.md\">\n# 07 - UI/UX Design\n\n## Overview\n\nThis document outlines the user interface and user experience design for The Cabin, focusing on voice-first interaction patterns, visual hierarchy, and accessibility.\n\n## Design Principles\n\n1. **Voice-First**: UI supports but doesn't require touch interaction\n2. **Minimalist**: Clean, distraction-free interface\n3. **Feedback-Rich**: Clear visual and audio feedback\n4. **Accessible**: Inclusive design for all users\n5. **Immersive**: Support for the narrative experience\n\n## Screen Layouts\n\n### Main Game Screen\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n‚îÇ ‚îÇ  Stats Bar                                       ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  üè† Cabin Main    ‚ù§Ô∏è 100    üí° Dim    üïê 3:45   ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îÇ                                                        ‚îÇ\n‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  Story Feed (Scrollable)                        ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  > You stand in a dimly lit wooden cabin...     ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  ‚ñ∂ \"look around\"                                ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  > The walls are rough-hewn logs. A lantern     ‚îÇ ‚îÇ\n‚îÇ ‚îÇ    hangs from a rusty hook.                     ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  ‚ñ∂ \"take lantern\"                               ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  > You pick up the lantern. It feels heavy      ‚îÇ ‚îÇ\n‚îÇ ‚îÇ    with oil.                                     ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îÇ                                                  ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îÇ                                                        ‚îÇ\n‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n‚îÇ ‚îÇ  Transcript Preview                             ‚îÇ ‚îÇ\n‚îÇ ‚îÇ  üé§ \"Take the lantern\"                          ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îÇ                                                        ‚îÇ\n‚îÇ         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                  ‚îÇ\n‚îÇ         ‚îÇ   üéôÔ∏è Voice Button       ‚îÇ                  ‚îÇ\n‚îÇ         ‚îÇ   (Tap to Speak)         ‚îÇ                  ‚îÇ\n‚îÇ         ‚îÇ   ‚àø‚àø‚àø Waveform ‚àø‚àø‚àø       ‚îÇ                  ‚îÇ\n‚îÇ         ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                  ‚îÇ\n‚îÇ                                                        ‚îÇ\n‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ\n‚îÇ ‚îÇ  [Inventory]  [Menu]  [Settings]                ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### XAML Implementation\n\n```xaml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:vm=\"clr-namespace:TheCabin.ViewModels\"\n             x:Class=\"TheCabin.Views.MainPage\"\n             x:DataType=\"vm:MainViewModel\"\n             BackgroundColor=\"{DynamicResource PageBackgroundColor}\">\n    \n    <Grid RowDefinitions=\"Auto,*,Auto,Auto,Auto\" Padding=\"16\">\n        \n        <!-- Stats Bar -->\n        <Border Grid.Row=\"0\" \n                StyleClass=\"StatsBar\"\n                Padding=\"12,8\"\n                Margin=\"0,0,0,8\">\n            <Grid ColumnDefinitions=\"*,Auto,Auto,Auto\">\n                <Label Grid.Column=\"0\" \n                       Text=\"{Binding CurrentLocation}\"\n                       FontSize=\"16\"\n                       FontAttributes=\"Bold\"/>\n                <HorizontalStackLayout Grid.Column=\"1\" Spacing=\"12\">\n                    <Label Text=\"‚ù§Ô∏è\"/>\n                    <Label Text=\"{Binding PlayerHealth}\"/>\n                </HorizontalStackLayout>\n                <HorizontalStackLayout Grid.Column=\"2\" Spacing=\"12\">\n                    <Label Text=\"üí°\"/>\n                    <Label Text=\"{Binding LightLevel}\"/>\n                </HorizontalStackLayout>\n                <HorizontalStackLayout Grid.Column=\"3\" Spacing=\"12\">\n                    <Label Text=\"üïê\"/>\n                    <Label Text=\"{Binding GameTime}\"/>\n                </HorizontalStackLayout>\n            </Grid>\n        </Border>\n        \n        <!-- Story Feed -->\n        <Border Grid.Row=\"1\" \n                StyleClass=\"ContentPanel\"\n                Padding=\"16\">\n            <CollectionView ItemsSource=\"{Binding StoryFeed}\"\n                           VerticalScrollBarVisibility=\"Always\">\n                <CollectionView.ItemTemplate>\n                    <DataTemplate x:DataType=\"models:NarrativeEntry\">\n                        <Grid Padding=\"0,8\">\n                            <Label Text=\"{Binding Text}\"\n                                   TextColor=\"{Binding TextColor}\"\n                                   FontSize=\"16\"\n                                   LineBreakMode=\"WordWrap\"\n                                   FontAttributes=\"{Binding IsImportant, \n                                       Converter={StaticResource BoolToFontAttributes}}\"/>\n                        </Grid>\n                    </DataTemplate>\n                </CollectionView.ItemTemplate>\n            </CollectionView>\n        </Border>\n        \n        <!-- Transcript Preview -->\n        <Border Grid.Row=\"2\"\n                StyleClass=\"TranscriptPanel\"\n                Padding=\"12\"\n                Margin=\"0,8\"\n                IsVisible=\"{Binding IsListening}\">\n            <HorizontalStackLayout Spacing=\"8\">\n                <Label Text=\"üé§\" FontSize=\"16\"/>\n                <Label Text=\"{Binding TranscriptText}\"\n                       FontSize=\"14\"\n                       TextColor=\"{DynamicResource SecondaryTextColor}\"/>\n            </HorizontalStackLayout>\n        </Border>\n        \n        <!-- Voice Control -->\n        <Grid Grid.Row=\"3\" \n              Padding=\"0,16\"\n              HorizontalOptions=\"Center\">\n            <Button x:Name=\"VoiceButton\"\n                    Command=\"{Binding ToggleListeningCommand}\"\n                    HeightRequest=\"80\"\n                    WidthRequest=\"80\"\n                    CornerRadius=\"40\"\n                    BackgroundColor=\"{Binding IsListening, \n                        Converter={StaticResource BoolToRecordingColor}}\"\n                    BorderWidth=\"3\"\n                    BorderColor=\"{DynamicResource PrimaryColor}\">\n                <Button.ImageSource>\n                    <FontImageSource \n                        Glyph=\"üéôÔ∏è\"\n                        FontFamily=\"SegoeUIEmoji\"\n                        Size=\"32\"\n                        Color=\"White\"/>\n                </Button.ImageSource>\n            </Button>\n            \n            <!-- Waveform Animation (when listening) -->\n            <GraphicsView x:Name=\"WaveformView\"\n                         IsVisible=\"{Binding IsListening}\"\n                         HeightRequest=\"80\"\n                         WidthRequest=\"200\"\n                         VerticalOptions=\"Center\"\n                         HorizontalOptions=\"Center\"\n                         InputTransparent=\"True\"/>\n        </Grid>\n        \n        <!-- Bottom Navigation -->\n        <Border Grid.Row=\"4\" \n                StyleClass=\"BottomNav\"\n                Padding=\"8\">\n            <Grid ColumnDefinitions=\"*,*,*\">\n                <Button Grid.Column=\"0\"\n                        Text=\"üéí Inventory\"\n                        Command=\"{Binding ShowInventoryCommand}\"\n                        StyleClass=\"NavButton\"/>\n                <Button Grid.Column=\"1\"\n                        Text=\"üìñ Menu\"\n                        Command=\"{Binding ShowMenuCommand}\"\n                        StyleClass=\"NavButton\"/>\n                <Button Grid.Column=\"2\"\n                        Text=\"‚öôÔ∏è Settings\"\n                        Command=\"{Binding ShowSettingsCommand}\"\n                        StyleClass=\"NavButton\"/>\n            </Grid>\n        </Border>\n        \n    </Grid>\n</ContentPage>\n```\n\n## Component Details\n\n### 1. Voice Control Button\n\n```csharp\npublic partial class MainPage : ContentPage\n{\n    private readonly WaveformAnimator _waveformAnimator;\n    \n    public MainPage(MainViewModel viewModel)\n    {\n        InitializeComponent();\n        BindingContext = viewModel;\n        \n        _waveformAnimator = new WaveformAnimator(WaveformView);\n        \n        viewModel.PropertyChanged += OnViewModelPropertyChanged;\n    }\n    \n    private void OnViewModelPropertyChanged(object sender, \n        PropertyChangedEventArgs e)\n    {\n        if (e.PropertyName == nameof(MainViewModel.IsListening))\n        {\n            var vm = (MainViewModel)BindingContext;\n            if (vm.IsListening)\n            {\n                _waveformAnimator.Start();\n                VoiceButton.Scale = 1.1;\n            }\n            else\n            {\n                _waveformAnimator.Stop();\n                VoiceButton.Scale = 1.0;\n            }\n        }\n    }\n}\n```\n\n### 2. Waveform Animation\n\n```csharp\npublic class WaveformAnimator\n{\n    private readonly GraphicsView _graphicsView;\n    private readonly WaveformDrawable _drawable;\n    private IDispatcherTimer _timer;\n    \n    public WaveformAnimator(GraphicsView graphicsView)\n    {\n        _graphicsView = graphicsView;\n        _drawable = new WaveformDrawable();\n        _graphicsView.Drawable = _drawable;\n    }\n    \n    public void Start()\n    {\n        _timer = Dispatcher.CreateTimer();\n        _timer.Interval = TimeSpan.FromMilliseconds(50);\n        _timer.Tick += (s, e) =>\n        {\n            _drawable.Update();\n            _graphicsView.Invalidate();\n        };\n        _timer.Start();\n    }\n    \n    public void Stop()\n    {\n        _timer?.Stop();\n        _drawable.Reset();\n        _graphicsView.Invalidate();\n    }\n}\n\npublic class WaveformDrawable : IDrawable\n{\n    private readonly List<float> _amplitudes = new();\n    private readonly Random _random = new();\n    \n    public void Draw(ICanvas canvas, RectF dirtyRect)\n    {\n        canvas.StrokeColor = Colors.White;\n        canvas.StrokeSize = 3;\n        \n        var centerY = dirtyRect.Height / 2;\n        var barWidth = 4f;\n        var spacing = 6f;\n        var barCount = (int)(dirtyRect.Width / (barWidth + spacing));\n        \n        for (int i = 0; i < barCount && i < _amplitudes.Count; i++)\n        {\n            var x = i * (barWidth + spacing);\n            var amplitude = _amplitudes[i];\n            var height = amplitude * (dirtyRect.Height / 2);\n            \n            canvas.DrawLine(\n                x, centerY - height,\n                x, centerY + height);\n        }\n    }\n    \n    public void Update()\n    {\n        // Simulate audio amplitude\n        if (_amplitudes.Count > 30)\n            _amplitudes.RemoveAt(0);\n        \n        _amplitudes.Add((float)_random.NextDouble());\n    }\n    \n    public void Reset()\n    {\n        _amplitudes.Clear();\n    }\n}\n```\n\n### 3. Narrative Text Styling\n\n```xaml\n<!-- App.xaml Resource Dictionary -->\n<Style TargetType=\"Label\" x:Key=\"NarrativeText\">\n    <Setter Property=\"FontFamily\" Value=\"Georgia\"/>\n    <Setter Property=\"FontSize\" Value=\"16\"/>\n    <Setter Property=\"LineHeight\" Value=\"1.5\"/>\n    <Setter Property=\"TextColor\" Value=\"{DynamicResource PrimaryTextColor}\"/>\n</Style>\n\n<Style TargetType=\"Label\" x:Key=\"PlayerCommandText\">\n    <Setter Property=\"FontFamily\" Value=\"Courier\"/>\n    <Setter Property=\"FontSize\" Value=\"14\"/>\n    <Setter Property=\"TextColor\" Value=\"{DynamicResource AccentColor}\"/>\n    <Setter Property=\"Margin\" Value=\"16,8,0,8\"/>\n</Style>\n\n<Style TargetType=\"Label\" x:Key=\"SystemMessageText\">\n    <Setter Property=\"FontFamily\" Value=\"Arial\"/>\n    <Setter Property=\"FontSize\" Value=\"14\"/>\n    <Setter Property=\"FontAttributes\" Value=\"Italic\"/>\n    <Setter Property=\"TextColor\" Value=\"{DynamicResource SecondaryTextColor}\"/>\n</Style>\n```\n\n### 4. Inventory Screen\n\n```xaml\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"TheCabin.Views.InventoryPage\"\n             Title=\"Inventory\">\n    \n    <Grid RowDefinitions=\"Auto,*,Auto\" Padding=\"16\">\n        \n        <!-- Header -->\n        <Border Grid.Row=\"0\" \n                Padding=\"16\"\n                Margin=\"0,0,0,16\">\n            <Grid ColumnDefinitions=\"*,Auto\">\n                <Label Grid.Column=\"0\"\n                       Text=\"Your Inventory\"\n                       FontSize=\"24\"\n                       FontAttributes=\"Bold\"/>\n                <Label Grid.Column=\"1\"\n                       Text=\"{Binding WeightDisplay}\"\n                       FontSize=\"14\"\n                       VerticalOptions=\"End\"/>\n            </Grid>\n        </Border>\n        \n        <!-- Item List -->\n        <CollectionView Grid.Row=\"1\"\n                       ItemsSource=\"{Binding InventoryItems}\">\n            <CollectionView.ItemTemplate>\n                <DataTemplate>\n                    <SwipeView>\n                        <SwipeView.RightItems>\n                            <SwipeItems>\n                                <SwipeItem Text=\"Drop\"\n                                          BackgroundColor=\"DarkRed\"\n                                          Command=\"{Binding DropItemCommand}\"\n                                          CommandParameter=\"{Binding .}\"/>\n                                <SwipeItem Text=\"Use\"\n                                          BackgroundColor=\"DarkGreen\"\n                                          Command=\"{Binding UseItemCommand}\"\n                                          CommandParameter=\"{Binding .}\"/>\n                            </SwipeItems>\n                        </SwipeView.RightItems>\n                        \n                        <Border Padding=\"16\"\n                                Margin=\"0,4\"\n                                StyleClass=\"ItemCard\">\n                            <Grid ColumnDefinitions=\"Auto,*,Auto\">\n                                <Label Grid.Column=\"0\"\n                                       Text=\"{Binding Icon}\"\n                                       FontSize=\"24\"\n                                       Margin=\"0,0,12,0\"/>\n                                <VerticalStackLayout Grid.Column=\"1\">\n                                    <Label Text=\"{Binding Name}\"\n                                           FontSize=\"16\"\n                                           FontAttributes=\"Bold\"/>\n                                    <Label Text=\"{Binding Description}\"\n                                           FontSize=\"12\"\n                                           TextColor=\"{DynamicResource SecondaryTextColor}\"/>\n                                </VerticalStackLayout>\n                                <Label Grid.Column=\"2\"\n                                       Text=\"{Binding Weight, StringFormat='{0} kg'}\"\n                                       FontSize=\"12\"\n                                       VerticalOptions=\"Center\"/>\n                            </Grid>\n                        </Border>\n                    </SwipeView>\n                </DataTemplate>\n            </CollectionView.ItemTemplate>\n            \n            <CollectionView.EmptyView>\n                <VerticalStackLayout Padding=\"32\"\n                                    HorizontalOptions=\"Center\"\n                                    VerticalOptions=\"Center\">\n                    <Label Text=\"üéí\"\n                           FontSize=\"64\"\n                           HorizontalOptions=\"Center\"/>\n                    <Label Text=\"Your inventory is empty\"\n                           FontSize=\"16\"\n                           HorizontalOptions=\"Center\"\n                           Margin=\"0,16,0,0\"/>\n                </VerticalStackLayout>\n            </CollectionView.EmptyView>\n        </CollectionView>\n        \n        <!-- Close Button -->\n        <Button Grid.Row=\"2\"\n                Text=\"Close\"\n                Command=\"{Binding CloseCommand}\"\n                Margin=\"0,16,0,0\"/>\n    </Grid>\n</ContentPage>\n```\n\n### 5. Settings Screen\n\n```xaml\n<ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"TheCabin.Views.SettingsPage\"\n             Title=\"Settings\">\n    \n    <ScrollView Padding=\"16\">\n        <VerticalStackLayout Spacing=\"24\">\n            \n            <!-- Voice Settings -->\n            <Border Padding=\"16\" StyleClass=\"SettingsSection\">\n                <VerticalStackLayout Spacing=\"16\">\n                    <Label Text=\"Voice Recognition\"\n                           FontSize=\"18\"\n                           FontAttributes=\"Bold\"/>\n                    \n                    <Grid ColumnDefinitions=\"*,Auto\">\n                        <Label Grid.Column=\"0\" \n                               Text=\"Push-to-Talk Mode\"\n                               VerticalOptions=\"Center\"/>\n                        <Switch Grid.Column=\"1\"\n                               IsToggled=\"{Binding UsePushToTalk}\"/>\n                    </Grid>\n                    \n                    <Label Text=\"Confidence Threshold\"/>\n                    <Slider Minimum=\"0.5\"\n                           Maximum=\"1.0\"\n                           Value=\"{Binding ConfidenceThreshold}\"/>\n                    \n                    <Grid ColumnDefinitions=\"*,Auto\">\n                        <Label Grid.Column=\"0\"\n                               Text=\"Offline Mode\"\n                               VerticalOptions=\"Center\"/>\n                        <Switch Grid.Column=\"1\"\n                               IsToggled=\"{Binding OfflineMode}\"/>\n                    </Grid>\n                </VerticalStackLayout>\n            </Border>\n            \n            <!-- Text-to-Speech Settings -->\n            <Border Padding=\"16\" StyleClass=\"SettingsSection\">\n                <VerticalStackLayout Spacing=\"16\">\n                    <Label Text=\"Text-to-Speech\"\n                           FontSize=\"18\"\n                           FontAttributes=\"Bold\"/>\n                    \n                    <Grid ColumnDefinitions=\"*,Auto\">\n                        <Label Grid.Column=\"0\"\n                               Text=\"Enable Narration\"\n                               VerticalOptions=\"Center\"/>\n                        <Switch Grid.Column=\"1\"\n                               IsToggled=\"{Binding TtsEnabled}\"/>\n                    </Grid>\n                    \n                    <Label Text=\"Speech Rate\"/>\n                    <Slider Minimum=\"0.5\"\n                           Maximum=\"2.0\"\n                           Value=\"{Binding SpeechRate}\"/>\n                    \n                    <Label Text=\"Voice Pitch\"/>\n                    <Slider Minimum=\"0.5\"\n                           Maximum=\"2.0\"\n                           Value=\"{Binding VoicePitch}\"/>\n                </VerticalStackLayout>\n            </Border>\n            \n            <!-- Display Settings -->\n            <Border Padding=\"16\" StyleClass=\"SettingsSection\">\n                <VerticalStackLayout Spacing=\"16\">\n                    <Label Text=\"Display\"\n                           FontSize=\"18\"\n                           FontAttributes=\"Bold\"/>\n                    \n                    <Label Text=\"Font Size\"/>\n                    <Slider Minimum=\"12\"\n                           Maximum=\"24\"\n                           Value=\"{Binding FontSize}\"/>\n                    \n                    <Label Text=\"Theme\"/>\n                    <Picker ItemsSource=\"{Binding AvailableThemes}\"\n                           SelectedItem=\"{Binding SelectedTheme}\"/>\n                </VerticalStackLayout>\n            </Border>\n            \n            <!-- About -->\n            <Border Padding=\"16\" StyleClass=\"SettingsSection\">\n                <VerticalStackLayout Spacing=\"8\">\n                    <Label Text=\"About\"\n                           FontSize=\"18\"\n                           FontAttributes=\"Bold\"/>\n                    <Label Text=\"{Binding AppVersion}\"\n                           FontSize=\"12\"/>\n                    <Label Text=\"¬© 2025 The Cabin\"\n                           FontSize=\"12\"/>\n                </VerticalStackLayout>\n            </Border>\n            \n        </VerticalStackLayout>\n    </ScrollView>\n</ContentPage>\n```\n\n## Theme System\n\n### Color Schemes\n\n```xml\n<!-- Light Theme -->\n<ResourceDictionary>\n    <Color x:Key=\"PageBackgroundColor\">#F5F5F5</Color>\n    <Color x:Key=\"PrimaryTextColor\">#212121</Color>\n    <Color x:Key=\"SecondaryTextColor\">#757575</Color>\n    <Color x:Key=\"PrimaryColor\">#2196F3</Color>\n    <Color x:Key=\"AccentColor\">#FF5722</Color>\n    <Color x:Key=\"CardBackgroundColor\">#FFFFFF</Color>\n    <Color x:Key=\"RecordingColor\">#F44336</Color>\n</ResourceDictionary>\n\n<!-- Dark Theme -->\n<ResourceDictionary>\n    <Color x:Key=\"PageBackgroundColor\">#121212</Color>\n    <Color x:Key=\"PrimaryTextColor\">#E0E0E0</Color>\n    <Color x:Key=\"SecondaryTextColor\">#9E9E9E</Color>\n    <Color x:Key=\"PrimaryColor\">#2196F3</Color>\n    <Color x:Key=\"AccentColor\">#FF5722</Color>\n    <Color x:Key=\"CardBackgroundColor\">#1E1E1E</Color>\n    <Color x:Key=\"RecordingColor\">#F44336</Color>\n</ResourceDictionary>\n```\n\n## Accessibility Features\n\n### 1. Screen Reader Support\n\n```csharp\npublic void ConfigureAccessibility()\n{\n    // Set semantic descriptions\n    VoiceButton.SetValue(SemanticProperties.DescriptionProperty,\n        \"Tap to speak a command\");\n    \n    VoiceButton.SetValue(SemanticProperties.HintProperty,\n        \"Records your voice command for the game\");\n    \n    // Announce state changes\n    SemanticScreenReader.Announce(\n        \"Voice recording started\");\n}\n```\n\n### 2. High Contrast Mode\n\n```csharp\npublic class AccessibilityService\n{\n    public bool IsHighContrastEnabled()\n    {\n        return Preferences.Get(\"high_contrast\", false);\n    }\n    \n    public void ApplyHighContrast()\n    {\n        Application.Current.Resources[\"PrimaryTextColor\"] = \n            Colors.White;\n        Application.Current.Resources[\"PageBackgroundColor\"] = \n            Colors.Black;\n    }\n}\n```\n\n### 3. Font Scaling\n\n```csharp\npublic double GetScaledFontSize(double baseSize)\n{\n    var scale = Preferences.Get(\"font_scale\", 1.0);\n    return baseSize * scale;\n}\n```\n\n## Animations and Transitions\n\n### Page Transitions\n\n```csharp\npublic async Task NavigateWithTransitionAsync(Page page)\n{\n    page.Opacity = 0;\n    await Navigation.PushAsync(page, false);\n    await page.FadeTo(1, 250, Easing.CubicInOut);\n}\n```\n\n### Button Press Feedback\n\n```csharp\nprivate async void OnButtonPressed(object sender, EventArgs e)\n{\n    var button = (Button)sender;\n    await button.ScaleTo(0.95, 50);\n    await button.ScaleTo(1.0, 50);\n}\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 02-system-architecture.md, 08-maui-implementation.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/07-ui-ux-design.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/04-data-models.md\ndocs/07-ui-ux-design.md\ndocs/06-game-engine.md\ndocs/03-technical-stack.md\ndocs/05-voice-pipeline.md\n\n# Current Time\n10/23/2025, 7:25:02 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n82,332 / 127.805K tokens used (64%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll create the final 4 documents to complete the comprehensive architecture documentation.\n\n<write_to_file>\n<path>docs/08-maui-implementation.md</path>\n<content># 08 - MAUI Implementation\n\n## Overview\n\nThis document provides detailed implementation guidance for The Cabin using .NET MAUI, including project structure, platform-specific code, and best practices.\n\n## Project Structure\n\n```\nTheCabin/\n‚îú‚îÄ‚îÄ TheCabin.csproj\n‚îú‚îÄ‚îÄ App.xaml\n‚îú‚îÄ‚îÄ App.xaml.cs\n‚îú‚îÄ‚îÄ AppShell.xaml\n‚îú‚îÄ‚îÄ AppShell.xaml.cs\n‚îú‚îÄ‚îÄ MauiProgram.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Models/\n‚îÇ   ‚îú‚îÄ‚îÄ Domain/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Room.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GameObject.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Player.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ GameState.cs\n‚îÇ   ‚îú‚îÄ‚îÄ Services/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ VoiceRecognitionResult.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ParsedCommand.cs\n‚îÇ   ‚îî‚îÄ‚îÄ UI/\n‚îÇ       ‚îî‚îÄ‚îÄ NarrativeEntry.cs\n‚îÇ\n‚îú‚îÄ‚îÄ ViewModels/\n‚îÇ   ‚îú‚îÄ‚îÄ BaseViewModel.cs\n‚îÇ   ‚îú‚îÄ‚îÄ MainViewModel.cs\n‚îÇ   ‚îú‚îÄ‚îÄ InventoryViewModel.cs\n‚îÇ   ‚îú‚îÄ‚îÄ SettingsViewModel.cs\n‚îÇ   ‚îî‚îÄ‚îÄ StoryPackViewModel.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Views/\n‚îÇ   ‚îú‚îÄ‚îÄ MainPage.xaml\n‚îÇ   ‚îú‚îÄ‚îÄ MainPage.xaml.cs\n‚îÇ   ‚îú‚îÄ‚îÄ InventoryPage.xaml\n‚îÇ   ‚îú‚îÄ‚îÄ InventoryPage.xaml.cs\n‚îÇ   ‚îú‚îÄ‚îÄ SettingsPage.xaml\n‚îÇ   ‚îî‚îÄ‚îÄ SettingsPage.xaml.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Services/\n‚îÇ   ‚îú‚îÄ‚îÄ Interfaces/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IVoiceRecognitionService.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ITextToSpeechService.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ICommandParserService.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ IGameStateService.cs\n‚îÇ   ‚îî‚îÄ‚îÄ Implementation/\n‚îÇ       ‚îú‚îÄ‚îÄ CommandParserService.cs\n‚îÇ       ‚îú‚îÄ‚îÄ GameStateService.cs\n‚îÇ       ‚îî‚îÄ‚îÄ StoryPackService.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Engine/\n‚îÇ   ‚îú‚îÄ‚îÄ GameStateMachine.cs\n‚îÇ   ‚îú‚îÄ‚îÄ CommandRouter.cs\n‚îÇ   ‚îú‚îÄ‚îÄ CommandHandlers/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MoveCommandHandler.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TakeCommandHandler.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ UseCommandHandler.cs\n‚îÇ   ‚îú‚îÄ‚îÄ InventoryManager.cs\n‚îÇ   ‚îî‚îÄ‚îÄ PuzzleEngine.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Data/\n‚îÇ   ‚îú‚îÄ‚îÄ Repositories/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GameSaveRepository.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StoryPackRepository.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CommandCacheRepository.cs\n‚îÇ   ‚îî‚îÄ‚îÄ Entities/\n‚îÇ       ‚îú‚îÄ‚îÄ GameSaveEntity.cs\n‚îÇ       ‚îî‚îÄ‚îÄ CommandCacheEntity.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Platforms/\n‚îÇ   ‚îú‚îÄ‚îÄ Android/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainActivity.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainApplication.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AndroidManifest.xml\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Services/\n‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ AndroidVoiceRecognitionService.cs\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ AndroidTtsService.cs\n‚îÇ   ‚îú‚îÄ‚îÄ iOS/ (future)\n‚îÇ   ‚îî‚îÄ‚îÄ Windows/ (future)\n‚îÇ\n‚îú‚îÄ‚îÄ Resources/\n‚îÇ   ‚îú‚îÄ‚îÄ Fonts/\n‚îÇ   ‚îú‚îÄ‚îÄ Images/\n‚îÇ   ‚îú‚îÄ‚îÄ Raw/\n‚îÇ   ‚îî‚îÄ‚îÄ Styles/\n‚îÇ       ‚îú‚îÄ‚îÄ Colors.xaml\n‚îÇ       ‚îî‚îÄ‚îÄ Styles.xaml\n‚îÇ\n‚îî‚îÄ‚îÄ Assets/\n    ‚îî‚îÄ‚îÄ StoryPacks/\n        ‚îú‚îÄ‚îÄ classic_horror.json\n        ‚îú‚îÄ‚îÄ arctic_survival.json\n        ‚îî‚îÄ‚îÄ ...\n```\n\n## MauiProgram.cs Setup\n\n```csharp\nusing Microsoft.Extensions.Logging;\nusing TheCabin.ViewModels;\nusing TheCabin.Views;\nusing TheCabin.Services;\nusing TheCabin.Engine;\nusing CommunityToolkit.Maui;\n\nnamespace TheCabin;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        \n        builder\n            .UseMauiApp<App>()\n            .UseMauiCommunityToolkit()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n                fonts.AddFont(\"Georgia.ttf\", \"Georgia\");\n                fonts.AddFont(\"Courier.ttf\", \"Courier\");\n            });\n\n#if DEBUG\n        builder.Logging.AddDebug();\n#endif\n\n        // Register Services\n        RegisterServices(builder.Services);\n        \n        // Register ViewModels\n        RegisterViewModels(builder.Services);\n        \n        // Register Views\n        RegisterViews(builder.Services);\n        \n        // Register Engine Components\n        RegisterEngineComponents(builder.Services);\n        \n        // Register Data Access\n        RegisterDataAccess(builder.Services);\n\n        return builder.Build();\n    }\n    \n    private static void RegisterServices(IServiceCollection services)\n    {\n        // Platform Services\n#if ANDROID\n        services.AddSingleton<IVoiceRecognitionService, \n            Platforms.Android.Services.AndroidVoiceRecognitionService>();\n#endif\n        \n        // Core Services\n        services.AddSingleton<ITextToSpeechService, MauiTtsService>();\n        services.AddSingleton<ICommandParserService, LlmCommandParserService>();\n        services.AddSingleton<IGameStateService, GameStateService>();\n        services.AddSingleton<IStoryPackService, StoryPackService>();\n        services.AddSingleton<ISettingsService, SettingsService>();\n        \n        // HTTP Client for LLM API\n        services.AddHttpClient<ILlmApiClient, OpenAIApiClient>(client =>\n        {\n            client.BaseAddress = new Uri(\"https://api.openai.com/\");\n            client.Timeout = TimeSpan.FromSeconds(30);\n        });\n        \n        // Memory Cache\n        services.AddMemoryCache();\n        \n        // Logging\n        services.AddLogging(config =>\n        {\n            config.AddConsole();\n            config.SetMinimumLevel(LogLevel.Information);\n        });\n    }\n    \n    private static void RegisterViewModels(IServiceCollection services)\n    {\n        services.AddTransient<MainViewModel>();\n        services.AddTransient<InventoryViewModel>();\n        services.AddTransient<SettingsViewModel>();\n        services.AddTransient<StoryPackViewModel>();\n        services.AddTransient<LoadGameViewModel>();\n    }\n    \n    private static void RegisterViews(IServiceCollection services)\n    {\n        services.AddTransient<MainPage>();\n        services.AddTransient<InventoryPage>();\n        services.AddTransient<SettingsPage>();\n        services.AddTransient<StoryPackSelectorPage>();\n        services.AddTransient<LoadGamePage>();\n    }\n    \n    private static void RegisterEngineComponents(IServiceCollection services)\n    {\n        services.AddSingleton<GameStateMachine>();\n        services.AddSingleton<CommandRouter>();\n        services.AddSingleton<IInventoryManager, InventoryManager>();\n        services.AddSingleton<IPuzzleEngine, PuzzleEngine>();\n        \n        // Command Handlers\n        services.AddTransient<ICommandHandler, MoveCommandHandler>();\n        services.AddTransient<ICommandHandler, TakeCommandHandler>();\n        services.AddTransient<ICommandHandler, DropCommandHandler>();\n        services.AddTransient<ICommandHandler, UseCommandHandler>();\n        services.AddTransient<ICommandHandler, LookCommandHandler>();\n        services.AddTransient<ICommandHandler, ExamineCommandHandler>();\n        services.AddTransient<ICommandHandler, InventoryCommandHandler>();\n    }\n    \n    private static void RegisterDataAccess(IServiceCollection services)\n    {\n        services.AddSingleton<IGameSaveRepository, GameSaveRepository>();\n        services.AddSingleton<IStoryPackRepository, StoryPackRepository>();\n        services.AddSingleton<ICommandCacheRepository, CommandCacheRepository>();\n        \n        // Initialize Database\n        services.AddSingleton(sp =>\n        {\n            var dbPath = Path.Combine(\n                FileSystem.AppDataDirectory, \n                \"thecabin.db3\");\n            return new SQLiteAsyncConnection(dbPath);\n        });\n    }\n}\n```\n\n## App.xaml and App.xaml.cs\n\n```xaml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Application xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"TheCabin.App\">\n    <Application.Resources>\n        <ResourceDictionary>\n            <ResourceDictionary.MergedDictionaries>\n                <ResourceDictionary Source=\"Resources/Styles/Colors.xaml\" />\n                <ResourceDictionary Source=\"Resources/Styles/Styles.xaml\" />\n            </ResourceDictionary.MergedDictionaries>\n        </ResourceDictionary>\n    </Application.Resources>\n</Application>\n```\n\n```csharp\nnamespace TheCabin;\n\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n        \n        // Set user app theme\n        UserAppTheme = AppTheme.Dark;\n        \n        MainPage = new AppShell();\n    }\n    \n    protected override Window CreateWindow(IActivationState activationState)\n    {\n        var window = base.CreateWindow(activationState);\n        \n        // Set window size (for desktop)\n        window.Width = 400;\n        window.Height = 800;\n        window.MinimumWidth = 350;\n        window.MinimumHeight = 600;\n        \n        return window;\n    }\n}\n```\n\n## AppShell.xaml\n\n```xaml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Shell\n    x:Class=\"TheCabin.AppShell\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:local=\"clr-namespace:TheCabin.Views\"\n    Shell.FlyoutBehavior=\"Disabled\"\n    Shell.NavBarIsVisible=\"False\">\n\n    <ShellContent\n        Title=\"The Cabin\"\n        ContentTemplate=\"{DataTemplate local:MainPage}\"\n        Route=\"MainPage\" />\n\n</Shell>\n```\n\n## BaseViewModel Implementation\n\n```csharp\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\n\nnamespace TheCabin.ViewModels;\n\npublic partial class BaseViewModel : ObservableObject\n{\n    [ObservableProperty]\n    private bool isBusy;\n    \n    [ObservableProperty]\n    private string title;\n    \n    [ObservableProperty]\n    private string errorMessage;\n    \n    public BaseViewModel()\n    {\n        title = string.Empty;\n        errorMessage = string.Empty;\n    }\n    \n    protected async Task ExecuteAsync(\n        Func<Task> operation, \n        string? errorMessage = null)\n    {\n        try\n        {\n            IsBusy = true;\n            ErrorMessage = string.Empty;\n            \n            await operation();\n        }\n        catch (Exception ex)\n        {\n            ErrorMessage = errorMessage ?? ex.Message;\n            await ShowErrorAsync(ErrorMessage);\n        }\n        finally\n        {\n            IsBusy = false;\n        }\n    }\n    \n    protected async Task ShowErrorAsync(string message)\n    {\n        await Shell.Current.DisplayAlert(\n            \"Error\", \n            message, \n            \"OK\");\n    }\n    \n    protected async Task<bool> ShowConfirmAsync(\n        string title,\n        string message)\n    {\n        return await Shell.Current.DisplayAlert(\n            title, \n            message, \n            \"Yes\", \n            \"No\");\n    }\n}\n```\n\n## MainViewModel Implementation\n\n```csharp\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing System.Collections.ObjectModel;\n\nnamespace TheCabin.ViewModels;\n\npublic partial class MainViewModel : BaseViewModel\n{\n    private readonly IVoiceRecognitionService _voiceService;\n    private readonly ICommandParserService _parserService;\n    private readonly IGameStateService _gameStateService;\n    private readonly ITextToSpeechService _ttsService;\n    private readonly GameStateMachine _stateMachine;\n    private readonly CommandRouter _commandRouter;\n    \n    [ObservableProperty]\n    private ObservableCollection<NarrativeEntry> storyFeed;\n    \n    [ObservableProperty]\n    private string currentLocation;\n    \n    [ObservableProperty]\n    private int playerHealth;\n    \n    [ObservableProperty]\n    private string lightLevel;\n    \n    [ObservableProperty]\n    private string gameTime;\n    \n    [ObservableProperty]\n    private string transcriptText;\n    \n    [ObservableProperty]\n    private bool isListening;\n    \n    [ObservableProperty]\n    private bool isProcessing;\n    \n    public MainViewModel(\n        IVoiceRecognitionService voiceService,\n        ICommandParserService parserService,\n        IGameStateService gameStateService,\n        ITextToSpeechService ttsService,\n        GameStateMachine stateMachine,\n        CommandRouter commandRouter)\n    {\n        _voiceService = voiceService;\n        _parserService = parserService;\n        _gameStateService = gameStateService;\n        _ttsService = ttsService;\n        _stateMachine = stateMachine;\n        _commandRouter = commandRouter;\n        \n        StoryFeed = new ObservableCollection<NarrativeEntry>();\n        \n        Title = \"The Cabin\";\n        CurrentLocation = \"Unknown\";\n        PlayerHealth = 100;\n        LightLevel = \"Normal\";\n        GameTime = \"0:00\";\n    }\n    \n    [RelayCommand]\n    private async Task ToggleListeningAsync()\n    {\n        if (IsListening)\n        {\n            _voiceService.StopListening();\n            IsListening = false;\n        }\n        else\n        {\n            await StartListeningAsync();\n        }\n    }\n    \n    private async Task StartListeningAsync()\n    {\n        await ExecuteAsync(async () =>\n        {\n            IsListening = true;\n            TranscriptText = \"Listening...\";\n            \n            var result = await _voiceService.RecognizeSpeechAsync();\n            \n            IsListening = false;\n            \n            if (result.Success)\n            {\n                TranscriptText = result.TranscribedText;\n                await ProcessCommandAsync(result.TranscribedText);\n            }\n            else\n            {\n                TranscriptText = string.Empty;\n                AddNarrativeEntry(\n                    result.ErrorMessage, \n                    NarrativeType.SystemMessage);\n            }\n        }, \"Voice recognition failed\");\n    }\n    \n    private async Task ProcessCommandAsync(string input)\n    {\n        await ExecuteAsync(async () =>\n        {\n            IsProcessing = true;\n            \n            // Add player command to story feed\n            AddNarrativeEntry(\n                $\"‚ñ∂ \\\"{input}\\\"\", \n                NarrativeType.PlayerCommand);\n            \n            // Parse command\n            var context = BuildGameContext();\n            var parsed = await _parserService.ParseAsync(input, context);\n            \n            // Execute command\n            var result = await _commandRouter.RouteAsync(\n                parsed, \n                _stateMachine.CurrentState);\n            \n            // Add result to story feed\n            AddNarrativeEntry(\n                result.Message, \n                result.Success \n                    ? NarrativeType.Success \n                    : NarrativeType.Failure);\n            \n            // Update UI state\n            UpdateUIState();\n            \n            // Optional TTS narration\n            if (_ttsService != null && result.Success)\n            {\n                await _ttsService.SpeakAsync(result.Message);\n            }\n            \n            IsProcessing = false;\n        }, \"Command processing failed\");\n    }\n    \n    private GameContext BuildGameContext()\n    {\n        var room = _stateMachine.GetCurrentRoom();\n        var visibleObjects = _stateMachine.GetVisibleObjects();\n        \n        return new GameContext\n        {\n            CurrentLocation = room.Id,\n            VisibleObjects = visibleObjects.Select(o => o.Id).ToList(),\n            InventoryItems = _stateMachine.CurrentState.Player.Inventory\n                .Items.Select(i => i.Id).ToList(),\n            GameFlags = _stateMachine.CurrentState.Progress.StoryFlags\n        };\n    }\n    \n    private void UpdateUIState()\n    {\n        var state = _stateMachine.CurrentState;\n        var room = _stateMachine.GetCurrentRoom();\n        \n        CurrentLocation = room.Id.Replace(\"_\", \" \");\n        PlayerHealth = state.Player.Health;\n        LightLevel = room.LightLevel.ToString();\n        GameTime = state.Player.Stats.PlayTime.ToString(@\"h\\:mm\");\n    }\n    \n    private void AddNarrativeEntry(string text, NarrativeType type)\n    {\n        var entry = new NarrativeEntry\n        {\n            Text = text,\n            Type = type,\n            Timestamp = DateTime.Now\n        };\n        \n        MainThread.BeginInvokeOnMainThread(() =>\n        {\n            StoryFeed.Add(entry);\n            \n            // Keep only last 100 entries for performance\n            while (StoryFeed.Count > 100)\n            {\n                StoryFeed.RemoveAt(0);\n            }\n        });\n    }\n    \n    [RelayCommand]\n    private async Task ShowInventoryAsync()\n    {\n        await Shell.Current.GoToAsync(nameof(InventoryPage));\n    }\n    \n    [RelayCommand]\n    private async Task ShowMenuAsync()\n    {\n        // Show menu options\n    }\n    \n    [RelayCommand]\n    private async Task ShowSettingsAsync()\n    {\n        await Shell.Current.GoToAsync(nameof(SettingsPage));\n    }\n}\n```\n\n## Platform-Specific: Android MainActivity\n\n```csharp\nusing Android.App;\nusing Android.Content.PM;\nusing Android.OS;\n\nnamespace TheCabin.Platforms.Android;\n\n[Activity(\n    Theme = \"@style/Maui.SplashTheme\", \n    MainLauncher = true, \n    ConfigurationChanges = ConfigChanges.ScreenSize | \n                          ConfigChanges.Orientation | \n                          ConfigChanges.UiMode | \n                          ConfigChanges.ScreenLayout | \n                          ConfigChanges.SmallestScreenSize | \n                          ConfigChanges.Density,\n    ScreenOrientation = ScreenOrientation.Portrait)]\npublic class MainActivity : MauiAppCompatActivity\n{\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n        \n        // Request permissions\n        RequestPermissions();\n    }\n    \n    private async void RequestPermissions()\n    {\n        await Permissions.RequestAsync<Permissions.Microphone>();\n        await Permissions.RequestAsync<Permissions.StorageWrite>();\n    }\n}\n```\n\n## Platform-Specific: AndroidManifest.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application \n        android:allowBackup=\"true\" \n        android:icon=\"@mipmap/appicon\" \n        android:roundIcon=\"@mipmap/appicon_round\" \n        android:supportsRtl=\"true\"\n        android:label=\"The Cabin\">\n    </application>\n    \n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n    <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\n    \n    <uses-sdk android:minSdkVersion=\"23\" android:targetSdkVersion=\"34\" />\n</manifest>\n```\n\n## Build Configuration\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <TargetFrameworks>net8.0-android</TargetFrameworks>\n        <OutputType>Exe</OutputType>\n        <RootNamespace>TheCabin</RootNamespace>\n        <UseMaui>true</UseMaui>\n        <SingleProject>true</SingleProject>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n\n        <!-- Display name -->\n        <ApplicationTitle>The Cabin</ApplicationTitle>\n\n        <!-- App Identifier -->\n        <ApplicationId>com.thecabin.voiceadventure</ApplicationId>\n\n        <!-- Versions -->\n        <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>\n        <ApplicationVersion>1</ApplicationVersion>\n\n        <!-- Required for C# Hot Reload -->\n        <UseInterpreter Condition=\"'$(Configuration)' == 'Debug'\">True</UseInterpreter>\n\n        <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'\">23.0</SupportedOSPlatformVersion>\n    </PropertyGroup>\n\n    <PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n        <AndroidPackageFormat>apk</AndroidPackageFormat>\n        <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n        <AndroidLinkMode>SdkOnly</AndroidLinkMode>\n        <AndroidUseAapt2>true</AndroidUseAapt2>\n        <RunAOTCompilation>false</RunAOTCompilation>\n    </PropertyGroup>\n\n    <ItemGroup>\n        <!-- App Icon -->\n        <MauiIcon Include=\"Resources\\AppIcon\\appicon.svg\" \n                  ForegroundFile=\"Resources\\AppIcon\\appiconfg.svg\" \n                  Color=\"#512BD4\" />\n\n        <!-- Splash Screen -->\n        <MauiSplashScreen Include=\"Resources\\Splash\\splash.svg\" \n                          Color=\"#512BD4\" \n                          BaseSize=\"128,128\" />\n\n        <!-- Images -->\n        <MauiImage Include=\"Resources\\Images\\*\" />\n\n        <!-- Custom Fonts -->\n        <MauiFont Include=\"Resources\\Fonts\\*\" />\n\n        <!-- Raw Assets (also remove the \"Resources\\Raw\" prefix) -->\n        <MauiAsset Include=\"Resources\\Raw\\**\" \n                   LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n    </ItemGroup>\n\n    <ItemGroup>\n        <PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"8.0.0\" />\n        <PackageReference Include=\"Microsoft.Maui.Controls.Compatibility\" Version=\"8.0.0\" />\n        <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"8.0.0\" />\n        <PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.2\" />\n        <PackageReference Include=\"CommunityToolkit.Maui\" Version=\"7.0.0\" />\n        <PackageReference Include=\"sqlite-net-pcl\" Version=\"1.8.116\" />\n        <PackageReference Include=\"SQLitePCLRaw.bundle_green\" Version=\"2.1.7\" />\n        <PackageReference Include=\"Azure.AI.OpenAI\" Version=\"1.0.0-beta.12\" />\n        <PackageReference Include=\"Microsoft.Extensions.Http.Polly\" Version=\"8.0.0\" />\n    </ItemGroup>\n\n    <ItemGroup>\n        <!-- Story Pack JSON files -->\n        <MauiAsset Include=\"Assets\\StoryPacks\\*.json\" />\n    </ItemGroup>\n</Project>\n```\n\n## Hot Reload Support\n\n```csharp\n#if DEBUG\n[assembly: System.Reflection.Metadata.MetadataUpdateHandler(\n    typeof(TheCabin.HotReloadService))]\n\nnamespace TheCabin;\n\npublic static class HotReloadService\n{\n    public static void ClearCache(Type[]? types)\n    {\n        // Clear any cached data that might prevent hot reload\n    }\n    \n    public static void UpdateApplication(Type[]? types)\n    {\n        // Refresh application state after hot reload\n    }\n}\n#endif\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 02-system-architecture.md, 03-technical-stack.md, 07-ui-ux-design.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [x] Write 05-voice-pipeline.md\n- [x] Write 06-game-engine.md\n- [x] Write 07-ui-ux-design.md\n- [x] Write 08-maui-implementation.md\n- [ ] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/08-maui-implementation.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/08-maui-implementation.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/08-maui-implementation.md\">\n# 08 - MAUI Implementation\n\n## Overview\n\nThis document provides detailed implementation guidance for The Cabin using .NET MAUI, including project structure, platform-specific code, and best practices.\n\n## Project Structure\n\n```\nTheCabin/\n‚îú‚îÄ‚îÄ TheCabin.csproj\n‚îú‚îÄ‚îÄ App.xaml\n‚îú‚îÄ‚îÄ App.xaml.cs\n‚îú‚îÄ‚îÄ AppShell.xaml\n‚îú‚îÄ‚îÄ AppShell.xaml.cs\n‚îú‚îÄ‚îÄ MauiProgram.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Models/\n‚îÇ   ‚îú‚îÄ‚îÄ Domain/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Room.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GameObject.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Player.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ GameState.cs\n‚îÇ   ‚îú‚îÄ‚îÄ Services/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ VoiceRecognitionResult.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ParsedCommand.cs\n‚îÇ   ‚îî‚îÄ‚îÄ UI/\n‚îÇ       ‚îî‚îÄ‚îÄ NarrativeEntry.cs\n‚îÇ\n‚îú‚îÄ‚îÄ ViewModels/\n‚îÇ   ‚îú‚îÄ‚îÄ BaseViewModel.cs\n‚îÇ   ‚îú‚îÄ‚îÄ MainViewModel.cs\n‚îÇ   ‚îú‚îÄ‚îÄ InventoryViewModel.cs\n‚îÇ   ‚îú‚îÄ‚îÄ SettingsViewModel.cs\n‚îÇ   ‚îî‚îÄ‚îÄ StoryPackViewModel.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Views/\n‚îÇ   ‚îú‚îÄ‚îÄ MainPage.xaml\n‚îÇ   ‚îú‚îÄ‚îÄ MainPage.xaml.cs\n‚îÇ   ‚îú‚îÄ‚îÄ InventoryPage.xaml\n‚îÇ   ‚îú‚îÄ‚îÄ InventoryPage.xaml.cs\n‚îÇ   ‚îú‚îÄ‚îÄ SettingsPage.xaml\n‚îÇ   ‚îî‚îÄ‚îÄ SettingsPage.xaml.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Services/\n‚îÇ   ‚îú‚îÄ‚îÄ Interfaces/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ IVoiceRecognitionService.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ITextToSpeechService.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ICommandParserService.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ IGameStateService.cs\n‚îÇ   ‚îî‚îÄ‚îÄ Implementation/\n‚îÇ       ‚îú‚îÄ‚îÄ CommandParserService.cs\n‚îÇ       ‚îú‚îÄ‚îÄ GameStateService.cs\n‚îÇ       ‚îî‚îÄ‚îÄ StoryPackService.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Engine/\n‚îÇ   ‚îú‚îÄ‚îÄ GameStateMachine.cs\n‚îÇ   ‚îú‚îÄ‚îÄ CommandRouter.cs\n‚îÇ   ‚îú‚îÄ‚îÄ CommandHandlers/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MoveCommandHandler.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TakeCommandHandler.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ UseCommandHandler.cs\n‚îÇ   ‚îú‚îÄ‚îÄ InventoryManager.cs\n‚îÇ   ‚îî‚îÄ‚îÄ PuzzleEngine.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Data/\n‚îÇ   ‚îú‚îÄ‚îÄ Repositories/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GameSaveRepository.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StoryPackRepository.cs\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CommandCacheRepository.cs\n‚îÇ   ‚îî‚îÄ‚îÄ Entities/\n‚îÇ       ‚îú‚îÄ‚îÄ GameSaveEntity.cs\n‚îÇ       ‚îî‚îÄ‚îÄ CommandCacheEntity.cs\n‚îÇ\n‚îú‚îÄ‚îÄ Platforms/\n‚îÇ   ‚îú‚îÄ‚îÄ Android/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainActivity.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainApplication.cs\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AndroidManifest.xml\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Services/\n‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ AndroidVoiceRecognitionService.cs\n‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ AndroidTtsService.cs\n‚îÇ   ‚îú‚îÄ‚îÄ iOS/ (future)\n‚îÇ   ‚îî‚îÄ‚îÄ Windows/ (future)\n‚îÇ\n‚îú‚îÄ‚îÄ Resources/\n‚îÇ   ‚îú‚îÄ‚îÄ Fonts/\n‚îÇ   ‚îú‚îÄ‚îÄ Images/\n‚îÇ   ‚îú‚îÄ‚îÄ Raw/\n‚îÇ   ‚îî‚îÄ‚îÄ Styles/\n‚îÇ       ‚îú‚îÄ‚îÄ Colors.xaml\n‚îÇ       ‚îî‚îÄ‚îÄ Styles.xaml\n‚îÇ\n‚îî‚îÄ‚îÄ Assets/\n    ‚îî‚îÄ‚îÄ StoryPacks/\n        ‚îú‚îÄ‚îÄ classic_horror.json\n        ‚îú‚îÄ‚îÄ arctic_survival.json\n        ‚îî‚îÄ‚îÄ ...\n```\n\n## MauiProgram.cs Setup\n\n```csharp\nusing Microsoft.Extensions.Logging;\nusing TheCabin.ViewModels;\nusing TheCabin.Views;\nusing TheCabin.Services;\nusing TheCabin.Engine;\nusing CommunityToolkit.Maui;\n\nnamespace TheCabin;\n\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        \n        builder\n            .UseMauiApp<App>()\n            .UseMauiCommunityToolkit()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n                fonts.AddFont(\"Georgia.ttf\", \"Georgia\");\n                fonts.AddFont(\"Courier.ttf\", \"Courier\");\n            });\n\n#if DEBUG\n        builder.Logging.AddDebug();\n#endif\n\n        // Register Services\n        RegisterServices(builder.Services);\n        \n        // Register ViewModels\n        RegisterViewModels(builder.Services);\n        \n        // Register Views\n        RegisterViews(builder.Services);\n        \n        // Register Engine Components\n        RegisterEngineComponents(builder.Services);\n        \n        // Register Data Access\n        RegisterDataAccess(builder.Services);\n\n        return builder.Build();\n    }\n    \n    private static void RegisterServices(IServiceCollection services)\n    {\n        // Platform Services\n#if ANDROID\n        services.AddSingleton<IVoiceRecognitionService, \n            Platforms.Android.Services.AndroidVoiceRecognitionService>();\n#endif\n        \n        // Core Services\n        services.AddSingleton<ITextToSpeechService, MauiTtsService>();\n        services.AddSingleton<ICommandParserService, LlmCommandParserService>();\n        services.AddSingleton<IGameStateService, GameStateService>();\n        services.AddSingleton<IStoryPackService, StoryPackService>();\n        services.AddSingleton<ISettingsService, SettingsService>();\n        \n        // HTTP Client for LLM API\n        services.AddHttpClient<ILlmApiClient, OpenAIApiClient>(client =>\n        {\n            client.BaseAddress = new Uri(\"https://api.openai.com/\");\n            client.Timeout = TimeSpan.FromSeconds(30);\n        });\n        \n        // Memory Cache\n        services.AddMemoryCache();\n        \n        // Logging\n        services.AddLogging(config =>\n        {\n            config.AddConsole();\n            config.SetMinimumLevel(LogLevel.Information);\n        });\n    }\n    \n    private static void RegisterViewModels(IServiceCollection services)\n    {\n        services.AddTransient<MainViewModel>();\n        services.AddTransient<InventoryViewModel>();\n        services.AddTransient<SettingsViewModel>();\n        services.AddTransient<StoryPackViewModel>();\n        services.AddTransient<LoadGameViewModel>();\n    }\n    \n    private static void RegisterViews(IServiceCollection services)\n    {\n        services.AddTransient<MainPage>();\n        services.AddTransient<InventoryPage>();\n        services.AddTransient<SettingsPage>();\n        services.AddTransient<StoryPackSelectorPage>();\n        services.AddTransient<LoadGamePage>();\n    }\n    \n    private static void RegisterEngineComponents(IServiceCollection services)\n    {\n        services.AddSingleton<GameStateMachine>();\n        services.AddSingleton<CommandRouter>();\n        services.AddSingleton<IInventoryManager, InventoryManager>();\n        services.AddSingleton<IPuzzleEngine, PuzzleEngine>();\n        \n        // Command Handlers\n        services.AddTransient<ICommandHandler, MoveCommandHandler>();\n        services.AddTransient<ICommandHandler, TakeCommandHandler>();\n        services.AddTransient<ICommandHandler, DropCommandHandler>();\n        services.AddTransient<ICommandHandler, UseCommandHandler>();\n        services.AddTransient<ICommandHandler, LookCommandHandler>();\n        services.AddTransient<ICommandHandler, ExamineCommandHandler>();\n        services.AddTransient<ICommandHandler, InventoryCommandHandler>();\n    }\n    \n    private static void RegisterDataAccess(IServiceCollection services)\n    {\n        services.AddSingleton<IGameSaveRepository, GameSaveRepository>();\n        services.AddSingleton<IStoryPackRepository, StoryPackRepository>();\n        services.AddSingleton<ICommandCacheRepository, CommandCacheRepository>();\n        \n        // Initialize Database\n        services.AddSingleton(sp =>\n        {\n            var dbPath = Path.Combine(\n                FileSystem.AppDataDirectory, \n                \"thecabin.db3\");\n            return new SQLiteAsyncConnection(dbPath);\n        });\n    }\n}\n```\n\n## App.xaml and App.xaml.cs\n\n```xaml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Application xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"TheCabin.App\">\n    <Application.Resources>\n        <ResourceDictionary>\n            <ResourceDictionary.MergedDictionaries>\n                <ResourceDictionary Source=\"Resources/Styles/Colors.xaml\" />\n                <ResourceDictionary Source=\"Resources/Styles/Styles.xaml\" />\n            </ResourceDictionary.MergedDictionaries>\n        </ResourceDictionary>\n    </Application.Resources>\n</Application>\n```\n\n```csharp\nnamespace TheCabin;\n\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n        \n        // Set user app theme\n        UserAppTheme = AppTheme.Dark;\n        \n        MainPage = new AppShell();\n    }\n    \n    protected override Window CreateWindow(IActivationState activationState)\n    {\n        var window = base.CreateWindow(activationState);\n        \n        // Set window size (for desktop)\n        window.Width = 400;\n        window.Height = 800;\n        window.MinimumWidth = 350;\n        window.MinimumHeight = 600;\n        \n        return window;\n    }\n}\n```\n\n## AppShell.xaml\n\n```xaml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Shell\n    x:Class=\"TheCabin.AppShell\"\n    xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:local=\"clr-namespace:TheCabin.Views\"\n    Shell.FlyoutBehavior=\"Disabled\"\n    Shell.NavBarIsVisible=\"False\">\n\n    <ShellContent\n        Title=\"The Cabin\"\n        ContentTemplate=\"{DataTemplate local:MainPage}\"\n        Route=\"MainPage\" />\n\n</Shell>\n```\n\n## BaseViewModel Implementation\n\n```csharp\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\n\nnamespace TheCabin.ViewModels;\n\npublic partial class BaseViewModel : ObservableObject\n{\n    [ObservableProperty]\n    private bool isBusy;\n    \n    [ObservableProperty]\n    private string title;\n    \n    [ObservableProperty]\n    private string errorMessage;\n    \n    public BaseViewModel()\n    {\n        title = string.Empty;\n        errorMessage = string.Empty;\n    }\n    \n    protected async Task ExecuteAsync(\n        Func<Task> operation, \n        string? errorMessage = null)\n    {\n        try\n        {\n            IsBusy = true;\n            ErrorMessage = string.Empty;\n            \n            await operation();\n        }\n        catch (Exception ex)\n        {\n            ErrorMessage = errorMessage ?? ex.Message;\n            await ShowErrorAsync(ErrorMessage);\n        }\n        finally\n        {\n            IsBusy = false;\n        }\n    }\n    \n    protected async Task ShowErrorAsync(string message)\n    {\n        await Shell.Current.DisplayAlert(\n            \"Error\", \n            message, \n            \"OK\");\n    }\n    \n    protected async Task<bool> ShowConfirmAsync(\n        string title,\n        string message)\n    {\n        return await Shell.Current.DisplayAlert(\n            title, \n            message, \n            \"Yes\", \n            \"No\");\n    }\n}\n```\n\n## MainViewModel Implementation\n\n```csharp\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing System.Collections.ObjectModel;\n\nnamespace TheCabin.ViewModels;\n\npublic partial class MainViewModel : BaseViewModel\n{\n    private readonly IVoiceRecognitionService _voiceService;\n    private readonly ICommandParserService _parserService;\n    private readonly IGameStateService _gameStateService;\n    private readonly ITextToSpeechService _ttsService;\n    private readonly GameStateMachine _stateMachine;\n    private readonly CommandRouter _commandRouter;\n    \n    [ObservableProperty]\n    private ObservableCollection<NarrativeEntry> storyFeed;\n    \n    [ObservableProperty]\n    private string currentLocation;\n    \n    [ObservableProperty]\n    private int playerHealth;\n    \n    [ObservableProperty]\n    private string lightLevel;\n    \n    [ObservableProperty]\n    private string gameTime;\n    \n    [ObservableProperty]\n    private string transcriptText;\n    \n    [ObservableProperty]\n    private bool isListening;\n    \n    [ObservableProperty]\n    private bool isProcessing;\n    \n    public MainViewModel(\n        IVoiceRecognitionService voiceService,\n        ICommandParserService parserService,\n        IGameStateService gameStateService,\n        ITextToSpeechService ttsService,\n        GameStateMachine stateMachine,\n        CommandRouter commandRouter)\n    {\n        _voiceService = voiceService;\n        _parserService = parserService;\n        _gameStateService = gameStateService;\n        _ttsService = ttsService;\n        _stateMachine = stateMachine;\n        _commandRouter = commandRouter;\n        \n        StoryFeed = new ObservableCollection<NarrativeEntry>();\n        \n        Title = \"The Cabin\";\n        CurrentLocation = \"Unknown\";\n        PlayerHealth = 100;\n        LightLevel = \"Normal\";\n        GameTime = \"0:00\";\n    }\n    \n    [RelayCommand]\n    private async Task ToggleListeningAsync()\n    {\n        if (IsListening)\n        {\n            _voiceService.StopListening();\n            IsListening = false;\n        }\n        else\n        {\n            await StartListeningAsync();\n        }\n    }\n    \n    private async Task StartListeningAsync()\n    {\n        await ExecuteAsync(async () =>\n        {\n            IsListening = true;\n            TranscriptText = \"Listening...\";\n            \n            var result = await _voiceService.RecognizeSpeechAsync();\n            \n            IsListening = false;\n            \n            if (result.Success)\n            {\n                TranscriptText = result.TranscribedText;\n                await ProcessCommandAsync(result.TranscribedText);\n            }\n            else\n            {\n                TranscriptText = string.Empty;\n                AddNarrativeEntry(\n                    result.ErrorMessage, \n                    NarrativeType.SystemMessage);\n            }\n        }, \"Voice recognition failed\");\n    }\n    \n    private async Task ProcessCommandAsync(string input)\n    {\n        await ExecuteAsync(async () =>\n        {\n            IsProcessing = true;\n            \n            // Add player command to story feed\n            AddNarrativeEntry(\n                $\"‚ñ∂ \\\"{input}\\\"\", \n                NarrativeType.PlayerCommand);\n            \n            // Parse command\n            var context = BuildGameContext();\n            var parsed = await _parserService.ParseAsync(input, context);\n            \n            // Execute command\n            var result = await _commandRouter.RouteAsync(\n                parsed, \n                _stateMachine.CurrentState);\n            \n            // Add result to story feed\n            AddNarrativeEntry(\n                result.Message, \n                result.Success \n                    ? NarrativeType.Success \n                    : NarrativeType.Failure);\n            \n            // Update UI state\n            UpdateUIState();\n            \n            // Optional TTS narration\n            if (_ttsService != null && result.Success)\n            {\n                await _ttsService.SpeakAsync(result.Message);\n            }\n            \n            IsProcessing = false;\n        }, \"Command processing failed\");\n    }\n    \n    private GameContext BuildGameContext()\n    {\n        var room = _stateMachine.GetCurrentRoom();\n        var visibleObjects = _stateMachine.GetVisibleObjects();\n        \n        return new GameContext\n        {\n            CurrentLocation = room.Id,\n            VisibleObjects = visibleObjects.Select(o => o.Id).ToList(),\n            InventoryItems = _stateMachine.CurrentState.Player.Inventory\n                .Items.Select(i => i.Id).ToList(),\n            GameFlags = _stateMachine.CurrentState.Progress.StoryFlags\n        };\n    }\n    \n    private void UpdateUIState()\n    {\n        var state = _stateMachine.CurrentState;\n        var room = _stateMachine.GetCurrentRoom();\n        \n        CurrentLocation = room.Id.Replace(\"_\", \" \");\n        PlayerHealth = state.Player.Health;\n        LightLevel = room.LightLevel.ToString();\n        GameTime = state.Player.Stats.PlayTime.ToString(@\"h\\:mm\");\n    }\n    \n    private void AddNarrativeEntry(string text, NarrativeType type)\n    {\n        var entry = new NarrativeEntry\n        {\n            Text = text,\n            Type = type,\n            Timestamp = DateTime.Now\n        };\n        \n        MainThread.BeginInvokeOnMainThread(() =>\n        {\n            StoryFeed.Add(entry);\n            \n            // Keep only last 100 entries for performance\n            while (StoryFeed.Count > 100)\n            {\n                StoryFeed.RemoveAt(0);\n            }\n        });\n    }\n    \n    [RelayCommand]\n    private async Task ShowInventoryAsync()\n    {\n        await Shell.Current.GoToAsync(nameof(InventoryPage));\n    }\n    \n    [RelayCommand]\n    private async Task ShowMenuAsync()\n    {\n        // Show menu options\n    }\n    \n    [RelayCommand]\n    private async Task ShowSettingsAsync()\n    {\n        await Shell.Current.GoToAsync(nameof(SettingsPage));\n    }\n}\n```\n\n## Platform-Specific: Android MainActivity\n\n```csharp\nusing Android.App;\nusing Android.Content.PM;\nusing Android.OS;\n\nnamespace TheCabin.Platforms.Android;\n\n[Activity(\n    Theme = \"@style/Maui.SplashTheme\", \n    MainLauncher = true, \n    ConfigurationChanges = ConfigChanges.ScreenSize | \n                          ConfigChanges.Orientation | \n                          ConfigChanges.UiMode | \n                          ConfigChanges.ScreenLayout | \n                          ConfigChanges.SmallestScreenSize | \n                          ConfigChanges.Density,\n    ScreenOrientation = ScreenOrientation.Portrait)]\npublic class MainActivity : MauiAppCompatActivity\n{\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n        \n        // Request permissions\n        RequestPermissions();\n    }\n    \n    private async void RequestPermissions()\n    {\n        await Permissions.RequestAsync<Permissions.Microphone>();\n        await Permissions.RequestAsync<Permissions.StorageWrite>();\n    }\n}\n```\n\n## Platform-Specific: AndroidManifest.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <application \n        android:allowBackup=\"true\" \n        android:icon=\"@mipmap/appicon\" \n        android:roundIcon=\"@mipmap/appicon_round\" \n        android:supportsRtl=\"true\"\n        android:label=\"The Cabin\">\n    </application>\n    \n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n    <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" />\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\n    \n    <uses-sdk android:minSdkVersion=\"23\" android:targetSdkVersion=\"34\" />\n</manifest>\n```\n\n## Build Configuration\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n    <PropertyGroup>\n        <TargetFrameworks>net8.0-android</TargetFrameworks>\n        <OutputType>Exe</OutputType>\n        <RootNamespace>TheCabin</RootNamespace>\n        <UseMaui>true</UseMaui>\n        <SingleProject>true</SingleProject>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n\n        <!-- Display name -->\n        <ApplicationTitle>The Cabin</ApplicationTitle>\n\n        <!-- App Identifier -->\n        <ApplicationId>com.thecabin.voiceadventure</ApplicationId>\n\n        <!-- Versions -->\n        <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>\n        <ApplicationVersion>1</ApplicationVersion>\n\n        <!-- Required for C# Hot Reload -->\n        <UseInterpreter Condition=\"'$(Configuration)' == 'Debug'\">True</UseInterpreter>\n\n        <SupportedOSPlatformVersion Condition=\"$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'\">23.0</SupportedOSPlatformVersion>\n    </PropertyGroup>\n\n    <PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n        <AndroidPackageFormat>apk</AndroidPackageFormat>\n        <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n        <AndroidLinkMode>SdkOnly</AndroidLinkMode>\n        <AndroidUseAapt2>true</AndroidUseAapt2>\n        <RunAOTCompilation>false</RunAOTCompilation>\n    </PropertyGroup>\n\n    <ItemGroup>\n        <!-- App Icon -->\n        <MauiIcon Include=\"Resources\\AppIcon\\appicon.svg\" \n                  ForegroundFile=\"Resources\\AppIcon\\appiconfg.svg\" \n                  Color=\"#512BD4\" />\n\n        <!-- Splash Screen -->\n        <MauiSplashScreen Include=\"Resources\\Splash\\splash.svg\" \n                          Color=\"#512BD4\" \n                          BaseSize=\"128,128\" />\n\n        <!-- Images -->\n        <MauiImage Include=\"Resources\\Images\\*\" />\n\n        <!-- Custom Fonts -->\n        <MauiFont Include=\"Resources\\Fonts\\*\" />\n\n        <!-- Raw Assets (also remove the \"Resources\\Raw\" prefix) -->\n        <MauiAsset Include=\"Resources\\Raw\\**\" \n                   LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n    </ItemGroup>\n\n    <ItemGroup>\n        <PackageReference Include=\"Microsoft.Maui.Controls\" Version=\"8.0.0\" />\n        <PackageReference Include=\"Microsoft.Maui.Controls.Compatibility\" Version=\"8.0.0\" />\n        <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"8.0.0\" />\n        <PackageReference Include=\"CommunityToolkit.Mvvm\" Version=\"8.2.2\" />\n        <PackageReference Include=\"CommunityToolkit.Maui\" Version=\"7.0.0\" />\n        <PackageReference Include=\"sqlite-net-pcl\" Version=\"1.8.116\" />\n        <PackageReference Include=\"SQLitePCLRaw.bundle_green\" Version=\"2.1.7\" />\n        <PackageReference Include=\"Azure.AI.OpenAI\" Version=\"1.0.0-beta.12\" />\n        <PackageReference Include=\"Microsoft.Extensions.Http.Polly\" Version=\"8.0.0\" />\n    </ItemGroup>\n\n    <ItemGroup>\n        <!-- Story Pack JSON files -->\n        <MauiAsset Include=\"Assets\\StoryPacks\\*.json\" />\n    </ItemGroup>\n</Project>\n```\n\n## Hot Reload Support\n\n```csharp\n#if DEBUG\n[assembly: System.Reflection.Metadata.MetadataUpdateHandler(\n    typeof(TheCabin.HotReloadService))]\n\nnamespace TheCabin;\n\npublic static class HotReloadService\n{\n    public static void ClearCache(Type[]? types)\n    {\n        // Clear any cached data that might prevent hot reload\n    }\n    \n    public static void UpdateApplication(Type[]? types)\n    {\n        // Refresh application state after hot reload\n    }\n}\n#endif\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 02-system-architecture.md, 03-technical-stack.md, 07-ui-ux-design.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/08-maui-implementation.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/04-data-models.md\ndocs/07-ui-ux-design.md\ndocs/08-maui-implementation.md\ndocs/06-game-engine.md\ndocs/03-technical-stack.md\ndocs/05-voice-pipeline.md\n\n# Current Time\n10/23/2025, 7:26:26 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n93,904 / 127.805K tokens used (73%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll complete the remaining 3 documents to finalize the comprehensive architecture documentation.\n\n<write_to_file>\n<path>docs/09-content-management.md</path>\n<content># 09 - Content Management\n\n## Overview\n\nThis document details the content management system for The Cabin, including story pack format, content creation workflows, and dynamic content generation using AI.\n\n## Story Pack Format\n\n### Complete Story Pack Structure\n\n```json\n{\n  \"id\": \"classic_horror\",\n  \"theme\": \"Classic Horror\",\n  \"description\": \"A haunted log cabin deep in the woods, decaying interiors lit by candlelight.\",\n  \"version\": \"1.0.0\",\n  \"author\": \"The Cabin Team\",\n  \"startingRoomId\": \"cabin_main\",\n  \"metadata\": {\n    \"difficulty\": \"Medium\",\n    \"estimatedPlayTime\": 45,\n    \"tags\": [\"horror\", \"mystery\", \"supernatural\"],\n    \"coverImage\": \"classic_horror_cover.png\",\n    \"themeColor\": \"#8B0000\",\n    \"createdDate\": \"2025-01-01T00:00:00Z\",\n    \"modifiedDate\": \"2025-01-15T00:00:00Z\"\n  },\n  \"rooms\": [\n    {\n      \"id\": \"cabin_main\",\n      \"description\": \"You stand in a dimly lit wooden cabin. Dust motes dance in shafts of pale moonlight streaming through cracked windows. The air smells of old wood and decay.\",\n      \"objects\": [\"lantern\", \"door\", \"table\"],\n      \"exits\": {\n        \"north\": \"forest_edge\",\n        \"up\": \"cabin_loft\"\n      },\n      \"state\": {\n        \"isLocked\": false,\n        \"flags\": {\n          \"fire_lit\": false,\n          \"candles_lit\": false\n        },\n        \"visibleObjectIds\": [\"lantern\", \"door\", \"table\"]\n      },\n      \"isVisited\": false,\n      \"ambientSound\": \"wind_howling.mp3\",\n      \"lightLevel\": \"Dim\"\n    }\n  ],\n  \"objects\": {\n    \"lantern\": {\n      \"id\": \"lantern\",\n      \"name\": \"Rusty Lantern\",\n      \"description\": \"An old brass lantern covered in rust and cobwebs. Oil sloshes inside when you shake it.\",\n      \"type\": \"Light\",\n      \"state\": {\n        \"currentState\": \"unlit\",\n        \"flags\": {\n          \"has_oil\": true\n        },\n        \"usageCount\": 0\n      },\n      \"actions\": {\n        \"take\": {\n          \"verb\": \"take\",\n          \"successMessage\": \"You pick up the lantern. It feels heavy with oil.\",\n          \"failureMessage\": \"You can't take that.\",\n          \"stateChanges\": [\n            {\n              \"target\": \"self\",\n              \"property\": \"IsVisible\",\n              \"newValue\": false\n            }\n          ],\n          \"requiredFlags\": [],\n          \"consumesItem\": false\n        },\n        \"light\": {\n          \"verb\": \"light\",\n          \"successMessage\": \"The lantern flickers to life, casting dancing shadows on the walls.\",\n          \"failureMessage\": \"You need matches or a lighter.\",\n          \"stateChanges\": [\n            {\n              \"target\": \"self\",\n              \"property\": \"CurrentState\",\n              \"newValue\": \"lit\"\n            },\n            {\n              \"target\": \"room\",\n              \"property\": \"LightLevel\",\n              \"newValue\": \"Bright\"\n            }\n          ],\n          \"requiredFlags\": [\"has_matches\"],\n          \"consumesItem\": false\n        }\n      },\n      \"requiredItems\": [],\n      \"isCollectable\": true,\n      \"isVisible\": true,\n      \"weight\": 3\n    }\n  },\n  \"achievements\": [\n    {\n      \"id\": \"first_steps\",\n      \"name\": \"First Steps\",\n      \"description\": \"Enter the cabin for the first time\",\n      \"requiredFlags\": [\"cabin_entered\"],\n      \"isUnlocked\": false\n    },\n    {\n      \"id\": \"light_bringer\",\n      \"name\": \"Light Bringer\",\n      \"description\": \"Light the lantern\",\n      \"requiredFlags\": [\"lantern_lit\"],\n      \"isUnlocked\": false\n    }\n  ]\n}\n```\n\n## Story Pack Service\n\n```csharp\nnamespace TheCabin.Services\n{\n    public class StoryPackService : IStoryPackService\n    {\n        private readonly IStoryPackRepository _repository;\n        private readonly ILogger<StoryPackService> _logger;\n        private Dictionary<string, StoryPack> _loadedPacks;\n        \n        public StoryPackService(\n            IStoryPackRepository repository,\n            ILogger<StoryPackService> logger)\n        {\n            _repository = repository;\n            _logger = logger;\n            _loadedPacks = new Dictionary<string, StoryPack>();\n        }\n        \n        public async Task<List<StoryPackInfo>> GetAvailablePacksAsync()\n        {\n            var packs = await _repository.GetAllPacksAsync();\n            \n            return packs.Select(p => new StoryPackInfo\n            {\n                Id = p.Id,\n                Theme = p.Theme,\n                Description = p.Description,\n                Difficulty = p.Metadata.Difficulty,\n                EstimatedPlayTime = p.Metadata.EstimatedPlayTime,\n                Tags = p.Metadata.Tags,\n                CoverImage = p.Metadata.CoverImage\n            }).ToList();\n        }\n        \n        public async Task<StoryPack> LoadPackAsync(string packId)\n        {\n            // Check if already loaded\n            if (_loadedPacks.TryGetValue(packId, out var cached))\n            {\n                return cached;\n            }\n            \n            // Load from repository\n            var pack = await _repository.GetPackAsync(packId);\n            \n            if (pack == null)\n            {\n                throw new FileNotFoundException(\n                    $\"Story pack not found: {packId}\");\n            }\n            \n            // Validate pack\n            ValidatePack(pack);\n            \n            // Cache and return\n            _loadedPacks[packId] = pack;\n            \n            _logger.LogInformation(\n                \"Loaded story pack: {Theme} ({RoomCount} rooms, {ObjectCount} objects)\",\n                pack.Theme, pack.Rooms.Count, pack.Objects.Count);\n            \n            return pack;\n        }\n        \n        private void ValidatePack(StoryPack pack)\n        {\n            // Validate starting room exists\n            if (!pack.Rooms.Any(r => r.Id == pack.StartingRoomId))\n            {\n                throw new InvalidDataException(\n                    $\"Starting room not found: {pack.StartingRoomId}\");\n            }\n            \n            // Validate all room exits point to existing rooms\n            foreach (var room in pack.Rooms)\n            {\n                foreach (var exit in room.Exits.Values)\n                {\n                    if (!pack.Rooms.Any(r => r.Id == exit))\n                    {\n                        _logger.LogWarning(\n                            \"Room {RoomId} has exit to non-existent room: {ExitId}\",\n                            room.Id, exit);\n                    }\n                }\n                \n                // Validate all object references exist\n                foreach (var objId in room.ObjectIds)\n                {\n                    if (!pack.Objects.ContainsKey(objId))\n                    {\n                        _logger.LogWarning(\n                            \"Room {RoomId} references non-existent object: {ObjectId}\",\n                            room.Id, objId);\n                    }\n                }\n            }\n        }\n        \n        public async Task<StoryPack> CreatePackFromTemplateAsync(\n            string templateId,\n            Dictionary<string, string> parameters)\n        {\n            // Load template\n            var template = await _repository.GetTemplateAsync(templateId);\n            \n            // Apply parameters (e.g., theme-specific replacements)\n            var pack = ApplyTemplate(template, parameters);\n            \n            return pack;\n        }\n        \n        public void UnloadPack(string packId)\n        {\n            _loadedPacks.Remove(packId);\n            _logger.LogInformation(\"Unloaded story pack: {PackId}\", packId);\n        }\n    }\n}\n```\n\n## Content Creation Workflow\n\n### 1. Manual Content Creation\n\n```csharp\npublic class StoryPackBuilder\n{\n    private StoryPack _pack;\n    \n    public StoryPackBuilder(string id, string theme)\n    {\n        _pack = new StoryPack\n        {\n            Id = id,\n            Theme = theme,\n            Metadata = new StoryMetadata\n            {\n                CreatedDate = DateTime.UtcNow,\n                ModifiedDate = DateTime.UtcNow\n            }\n        };\n    }\n    \n    public StoryPackBuilder WithDescription(string description)\n    {\n        _pack.Description = description;\n        return this;\n    }\n    \n    public StoryPackBuilder WithDifficulty(Difficulty difficulty)\n    {\n        _pack.Metadata.Difficulty = difficulty;\n        return this;\n    }\n    \n    public StoryPackBuilder AddRoom(Room room)\n    {\n        _pack.Rooms.Add(room);\n        return this;\n    }\n    \n    public StoryPackBuilder AddObject(GameObject obj)\n    {\n        _pack.Objects[obj.Id] = obj;\n        return this;\n    }\n    \n    public StoryPackBuilder SetStartingRoom(string roomId)\n    {\n        _pack.StartingRoomId = roomId;\n        return this;\n    }\n    \n    public StoryPack Build()\n    {\n        // Validate before building\n        if (string.IsNullOrEmpty(_pack.StartingRoomId))\n        {\n            throw new InvalidOperationException(\n                \"Starting room must be set\");\n        }\n        \n        if (_pack.Rooms.Count == 0)\n        {\n            throw new InvalidOperationException(\n                \"Pack must contain at least one room\");\n        }\n        \n        return _pack;\n    }\n}\n```\n\n### 2. AI-Assisted Content Generation\n\n```csharp\npublic class AiContentGenerator\n{\n    private readonly ILlmApiClient _llmClient;\n    private readonly ILogger _logger;\n    \n    public async Task<StoryPack> GenerateStoryPackAsync(\n        string theme,\n        ContentGenerationOptions options)\n    {\n        _logger.LogInformation(\n            \"Generating story pack for theme: {Theme}\", theme);\n        \n        // Step 1: Generate pack metadata\n        var metadata = await GenerateMetadataAsync(theme, options);\n        \n        // Step 2: Generate rooms\n        var rooms = await GenerateRoomsAsync(theme, options.RoomCount);\n        \n        // Step 3: Generate objects for each room\n        var objects = new Dictionary<string, GameObject>();\n        foreach (var room in rooms)\n        {\n            var roomObjects = await GenerateRoomObjectsAsync(\n                theme, room, options.ObjectsPerRoom);\n            \n            foreach (var obj in roomObjects)\n            {\n                objects[obj.Id] = obj;\n                room.ObjectIds.Add(obj.Id);\n            }\n        }\n        \n        // Step 4: Create interconnections\n        ConnectRooms(rooms, options.Connectivity);\n        \n        // Step 5: Add puzzles and special items\n        await AddPuzzlesAsync(rooms, objects, options.PuzzleCount);\n        \n        var pack = new StoryPack\n        {\n            Id = GenerateId(theme),\n            Theme = theme,\n            Description = metadata.Description,\n            Version = \"1.0.0\",\n            Author = \"AI Generated\",\n            StartingRoomId = rooms.First().Id,\n            Rooms = rooms,\n            Objects = objects,\n            Metadata = metadata\n        };\n        \n        _logger.LogInformation(\n            \"Generated story pack: {Rooms} rooms, {Objects} objects\",\n            pack.Rooms.Count, pack.Objects.Count);\n        \n        return pack;\n    }\n    \n    private async Task<StoryMetadata> GenerateMetadataAsync(\n        string theme,\n        ContentGenerationOptions options)\n    {\n        var prompt = $@\"\nGenerate metadata for a text adventure game with theme: '{theme}'.\nInclude a compelling description (2-3 sentences), difficulty level, \nestimated play time, and 3-5 relevant tags.\n\nOutput as JSON:\n{{\n  \"\"description\"\": \"\"...\"\",\n  \"\"difficulty\"\": \"\"Easy|Medium|Hard\"\",\n  \"\"estimatedPlayTime\"\": 30,\n  \"\"tags\"\": [\"\"tag1\"\", \"\"tag2\"\", \"\"tag3\"\"]\n}}\";\n        \n        var response = await _llmClient.GenerateAsync(prompt);\n        return JsonSerializer.Deserialize<StoryMetadata>(response);\n    }\n    \n    private async Task<List<Room>> GenerateRoomsAsync(\n        string theme,\n        int count)\n    {\n        var prompt = $@\"\nGenerate {count} interconnected rooms for a '{theme}' themed adventure game.\nEach room should have:\n- Unique ID (lowercase, underscores)\n- Vivid description (2-3 sentences)\n- Light level (Bright, Normal, Dim, Dark, PitchBlack)\n- Suggested ambient sound\n\nOutput as JSON array.\";\n        \n        var response = await _llmClient.GenerateAsync(prompt);\n        return JsonSerializer.Deserialize<List<Room>>(response);\n    }\n    \n    private async Task<List<GameObject>> GenerateRoomObjectsAsync(\n        string theme,\n        Room room,\n        int count)\n    {\n        var prompt = $@\"\nGenerate {count} interactive objects for this room:\nTheme: {theme}\nRoom: {room.Description}\n\nObjects should include:\n- Mix of collectible items and furniture\n- Appropriate actions (take, use, examine, etc.)\n- Success/failure messages\n- State changes where relevant\n\nOutput as JSON array.\";\n        \n        var response = await _llmClient.GenerateAsync(prompt);\n        return JsonSerializer.Deserialize<List<GameObject>>(response);\n    }\n    \n    private void ConnectRooms(\n        List<Room> rooms,\n        double connectivity)\n    {\n        // Create a network of room connections\n        // Higher connectivity = more paths between rooms\n        \n        var random = new Random();\n        \n        for (int i = 0; i < rooms.Count - 1; i++)\n        {\n            // Always connect to next room (minimum connectivity)\n            var direction = GetRandomDirection();\n            rooms[i].Exits[direction] = rooms[i + 1].Id;\n            rooms[i + 1].Exits[GetOppositeDirection(direction)] = \n                rooms[i].Id;\n            \n            // Add extra connections based on connectivity factor\n            if (random.NextDouble() < connectivity)\n            {\n                var targetIndex = random.Next(rooms.Count);\n                if (targetIndex != i)\n                {\n                    direction = GetRandomDirection();\n                    if (!rooms[i].Exits.ContainsKey(direction))\n                    {\n                        rooms[i].Exits[direction] = rooms[targetIndex].Id;\n                    }\n                }\n            }\n        }\n    }\n    \n    private async Task AddPuzzlesAsync(\n        List<Room> rooms,\n        Dictionary<string, GameObject> objects,\n        int puzzleCount)\n    {\n        // Generate puzzle scenarios\n        for (int i = 0; i < puzzleCount; i++)\n        {\n            var prompt = $@\"\nGenerate a puzzle for a text adventure game.\nInclude:\n- Locked door or container\n- Key or solution item\n- Clues in room descriptions\n- Satisfying resolution\n\nOutput as JSON with room IDs and object definitions.\";\n            \n            var response = await _llmClient.GenerateAsync(prompt);\n            // Parse and integrate puzzle into rooms and objects\n        }\n    }\n    \n    private string GetRandomDirection()\n    {\n        var directions = new[] { \"north\", \"south\", \"east\", \"west\", \n                                \"up\", \"down\" };\n        return directions[new Random().Next(directions.Length)];\n    }\n    \n    private string GetOppositeDirection(string direction)\n    {\n        return direction switch\n        {\n            \"north\" => \"south\",\n            \"south\" => \"north\",\n            \"east\" => \"west\",\n            \"west\" => \"east\",\n            \"up\" => \"down\",\n            \"down\" => \"up\",\n            _ => direction\n        };\n    }\n    \n    private string GenerateId(string theme)\n    {\n        return theme.ToLowerInvariant()\n            .Replace(\" \", \"_\")\n            .Replace(\"-\", \"_\");\n    }\n}\n\npublic class ContentGenerationOptions\n{\n    public int RoomCount { get; set; } = 6;\n    public int ObjectsPerRoom { get; set; } = 3;\n    public int PuzzleCount { get; set; } = 2;\n    public double Connectivity { get; set; } = 0.3;\n}\n```\n\n## Content Validation\n\n```csharp\npublic class StoryPackValidator\n{\n    public ValidationResult Validate(StoryPack pack)\n    {\n        var errors = new List<string>();\n        var warnings = new List<string>();\n        \n        // Check required fields\n        if (string.IsNullOrEmpty(pack.Id))\n            errors.Add(\"Pack ID is required\");\n        \n        if (string.IsNullOrEmpty(pack.Theme))\n            errors.Add(\"Theme is required\");\n        \n        if (pack.Rooms.Count == 0)\n            errors.Add(\"Pack must contain at least one room\");\n        \n        // Check starting room\n        if (!pack.Rooms.Any(r => r.Id == pack.StartingRoomId))\n            errors.Add($\"Starting room not found: {pack.StartingRoomId}\");\n        \n        // Validate rooms\n        foreach (var room in pack.Rooms)\n        {\n            ValidateRoom(room, pack, errors, warnings);\n        }\n        \n        // Validate objects\n        foreach (var obj in pack.Objects.Values)\n        {\n            ValidateObject(obj, errors, warnings);\n        }\n        \n        return new ValidationResult\n        {\n            IsValid = errors.Count == 0,\n            Errors = errors,\n            Warnings = warnings\n        };\n    }\n    \n    private void ValidateRoom(\n        Room room,\n        StoryPack pack,\n        List<string> errors,\n        List<string> warnings)\n    {\n        // Check description\n        if (string.IsNullOrWhiteSpace(room.Description))\n            errors.Add($\"Room {room.Id} has no description\");\n        \n        // Check exits\n        foreach (var exit in room.Exits)\n        {\n            if (!pack.Rooms.Any(r => r.Id == exit.Value))\n            {\n                warnings.Add(\n                    $\"Room {room.Id} exit '{exit.Key}' \" +\n                    $\"points to non-existent room: {exit.Value}\");\n            }\n        }\n        \n        // Check object references\n        foreach (var objId in room.ObjectIds)\n        {\n            if (!pack.Objects.ContainsKey(objId))\n            {\n                errors.Add(\n                    $\"Room {room.Id} references \" +\n                    $\"non-existent object: {objId}\");\n            }\n        }\n    }\n    \n    private void ValidateObject(\n        GameObject obj,\n        List<string> errors,\n        List<string> warnings)\n    {\n        if (string.IsNullOrEmpty(obj.Name))\n            errors.Add($\"Object {obj.Id} has no name\");\n        \n        if (string.IsNullOrEmpty(obj.Description))\n            warnings.Add($\"Object {obj.Id} has no description\");\n        \n        if (obj.Actions.Count == 0)\n            warnings.Add($\"Object {obj.Id} has no actions\");\n    }\n}\n```\n\n## Content Import/Export\n\n```csharp\npublic class ContentExporter\n{\n    public async Task ExportPackAsync(\n        StoryPack pack,\n        string outputPath)\n    {\n        var options = new JsonSerializerOptions\n        {\n            WriteIndented = true,\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n        };\n        \n        var json = JsonSerializer.Serialize(pack, options);\n        await File.WriteAllTextAsync(outputPath, json);\n    }\n    \n    public async Task<StoryPack> ImportPackAsync(string filePath)\n    {\n        var json = await File.ReadAllTextAsync(filePath);\n        \n        var options = new JsonSerializerOptions\n        {\n            PropertyNameCaseInsensitive = true\n        };\n        \n        return JsonSerializer.Deserialize<StoryPack>(json, options);\n    }\n}\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 04-data-models.md, 06-game-engine.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [x] Write 05-voice-pipeline.md\n- [x] Write 06-game-engine.md\n- [x] Write 07-ui-ux-design.md\n- [x] Write 08-maui-implementation.md\n- [x] Write 09-content-management.md\n- [ ] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/09-content-management.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/09-content-management.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/09-content-management.md\">\n# 09 - Content Management\n\n## Overview\n\nThis document details the content management system for The Cabin, including story pack format, content creation workflows, and dynamic content generation using AI.\n\n## Story Pack Format\n\n### Complete Story Pack Structure\n\n```json\n{\n  \"id\": \"classic_horror\",\n  \"theme\": \"Classic Horror\",\n  \"description\": \"A haunted log cabin deep in the woods, decaying interiors lit by candlelight.\",\n  \"version\": \"1.0.0\",\n  \"author\": \"The Cabin Team\",\n  \"startingRoomId\": \"cabin_main\",\n  \"metadata\": {\n    \"difficulty\": \"Medium\",\n    \"estimatedPlayTime\": 45,\n    \"tags\": [\"horror\", \"mystery\", \"supernatural\"],\n    \"coverImage\": \"classic_horror_cover.png\",\n    \"themeColor\": \"#8B0000\",\n    \"createdDate\": \"2025-01-01T00:00:00Z\",\n    \"modifiedDate\": \"2025-01-15T00:00:00Z\"\n  },\n  \"rooms\": [\n    {\n      \"id\": \"cabin_main\",\n      \"description\": \"You stand in a dimly lit wooden cabin. Dust motes dance in shafts of pale moonlight streaming through cracked windows. The air smells of old wood and decay.\",\n      \"objects\": [\"lantern\", \"door\", \"table\"],\n      \"exits\": {\n        \"north\": \"forest_edge\",\n        \"up\": \"cabin_loft\"\n      },\n      \"state\": {\n        \"isLocked\": false,\n        \"flags\": {\n          \"fire_lit\": false,\n          \"candles_lit\": false\n        },\n        \"visibleObjectIds\": [\"lantern\", \"door\", \"table\"]\n      },\n      \"isVisited\": false,\n      \"ambientSound\": \"wind_howling.mp3\",\n      \"lightLevel\": \"Dim\"\n    }\n  ],\n  \"objects\": {\n    \"lantern\": {\n      \"id\": \"lantern\",\n      \"name\": \"Rusty Lantern\",\n      \"description\": \"An old brass lantern covered in rust and cobwebs. Oil sloshes inside when you shake it.\",\n      \"type\": \"Light\",\n      \"state\": {\n        \"currentState\": \"unlit\",\n        \"flags\": {\n          \"has_oil\": true\n        },\n        \"usageCount\": 0\n      },\n      \"actions\": {\n        \"take\": {\n          \"verb\": \"take\",\n          \"successMessage\": \"You pick up the lantern. It feels heavy with oil.\",\n          \"failureMessage\": \"You can't take that.\",\n          \"stateChanges\": [\n            {\n              \"target\": \"self\",\n              \"property\": \"IsVisible\",\n              \"newValue\": false\n            }\n          ],\n          \"requiredFlags\": [],\n          \"consumesItem\": false\n        },\n        \"light\": {\n          \"verb\": \"light\",\n          \"successMessage\": \"The lantern flickers to life, casting dancing shadows on the walls.\",\n          \"failureMessage\": \"You need matches or a lighter.\",\n          \"stateChanges\": [\n            {\n              \"target\": \"self\",\n              \"property\": \"CurrentState\",\n              \"newValue\": \"lit\"\n            },\n            {\n              \"target\": \"room\",\n              \"property\": \"LightLevel\",\n              \"newValue\": \"Bright\"\n            }\n          ],\n          \"requiredFlags\": [\"has_matches\"],\n          \"consumesItem\": false\n        }\n      },\n      \"requiredItems\": [],\n      \"isCollectable\": true,\n      \"isVisible\": true,\n      \"weight\": 3\n    }\n  },\n  \"achievements\": [\n    {\n      \"id\": \"first_steps\",\n      \"name\": \"First Steps\",\n      \"description\": \"Enter the cabin for the first time\",\n      \"requiredFlags\": [\"cabin_entered\"],\n      \"isUnlocked\": false\n    },\n    {\n      \"id\": \"light_bringer\",\n      \"name\": \"Light Bringer\",\n      \"description\": \"Light the lantern\",\n      \"requiredFlags\": [\"lantern_lit\"],\n      \"isUnlocked\": false\n    }\n  ]\n}\n```\n\n## Story Pack Service\n\n```csharp\nnamespace TheCabin.Services\n{\n    public class StoryPackService : IStoryPackService\n    {\n        private readonly IStoryPackRepository _repository;\n        private readonly ILogger<StoryPackService> _logger;\n        private Dictionary<string, StoryPack> _loadedPacks;\n        \n        public StoryPackService(\n            IStoryPackRepository repository,\n            ILogger<StoryPackService> logger)\n        {\n            _repository = repository;\n            _logger = logger;\n            _loadedPacks = new Dictionary<string, StoryPack>();\n        }\n        \n        public async Task<List<StoryPackInfo>> GetAvailablePacksAsync()\n        {\n            var packs = await _repository.GetAllPacksAsync();\n            \n            return packs.Select(p => new StoryPackInfo\n            {\n                Id = p.Id,\n                Theme = p.Theme,\n                Description = p.Description,\n                Difficulty = p.Metadata.Difficulty,\n                EstimatedPlayTime = p.Metadata.EstimatedPlayTime,\n                Tags = p.Metadata.Tags,\n                CoverImage = p.Metadata.CoverImage\n            }).ToList();\n        }\n        \n        public async Task<StoryPack> LoadPackAsync(string packId)\n        {\n            // Check if already loaded\n            if (_loadedPacks.TryGetValue(packId, out var cached))\n            {\n                return cached;\n            }\n            \n            // Load from repository\n            var pack = await _repository.GetPackAsync(packId);\n            \n            if (pack == null)\n            {\n                throw new FileNotFoundException(\n                    $\"Story pack not found: {packId}\");\n            }\n            \n            // Validate pack\n            ValidatePack(pack);\n            \n            // Cache and return\n            _loadedPacks[packId] = pack;\n            \n            _logger.LogInformation(\n                \"Loaded story pack: {Theme} ({RoomCount} rooms, {ObjectCount} objects)\",\n                pack.Theme, pack.Rooms.Count, pack.Objects.Count);\n            \n            return pack;\n        }\n        \n        private void ValidatePack(StoryPack pack)\n        {\n            // Validate starting room exists\n            if (!pack.Rooms.Any(r => r.Id == pack.StartingRoomId))\n            {\n                throw new InvalidDataException(\n                    $\"Starting room not found: {pack.StartingRoomId}\");\n            }\n            \n            // Validate all room exits point to existing rooms\n            foreach (var room in pack.Rooms)\n            {\n                foreach (var exit in room.Exits.Values)\n                {\n                    if (!pack.Rooms.Any(r => r.Id == exit))\n                    {\n                        _logger.LogWarning(\n                            \"Room {RoomId} has exit to non-existent room: {ExitId}\",\n                            room.Id, exit);\n                    }\n                }\n                \n                // Validate all object references exist\n                foreach (var objId in room.ObjectIds)\n                {\n                    if (!pack.Objects.ContainsKey(objId))\n                    {\n                        _logger.LogWarning(\n                            \"Room {RoomId} references non-existent object: {ObjectId}\",\n                            room.Id, objId);\n                    }\n                }\n            }\n        }\n        \n        public async Task<StoryPack> CreatePackFromTemplateAsync(\n            string templateId,\n            Dictionary<string, string> parameters)\n        {\n            // Load template\n            var template = await _repository.GetTemplateAsync(templateId);\n            \n            // Apply parameters (e.g., theme-specific replacements)\n            var pack = ApplyTemplate(template, parameters);\n            \n            return pack;\n        }\n        \n        public void UnloadPack(string packId)\n        {\n            _loadedPacks.Remove(packId);\n            _logger.LogInformation(\"Unloaded story pack: {PackId}\", packId);\n        }\n    }\n}\n```\n\n## Content Creation Workflow\n\n### 1. Manual Content Creation\n\n```csharp\npublic class StoryPackBuilder\n{\n    private StoryPack _pack;\n    \n    public StoryPackBuilder(string id, string theme)\n    {\n        _pack = new StoryPack\n        {\n            Id = id,\n            Theme = theme,\n            Metadata = new StoryMetadata\n            {\n                CreatedDate = DateTime.UtcNow,\n                ModifiedDate = DateTime.UtcNow\n            }\n        };\n    }\n    \n    public StoryPackBuilder WithDescription(string description)\n    {\n        _pack.Description = description;\n        return this;\n    }\n    \n    public StoryPackBuilder WithDifficulty(Difficulty difficulty)\n    {\n        _pack.Metadata.Difficulty = difficulty;\n        return this;\n    }\n    \n    public StoryPackBuilder AddRoom(Room room)\n    {\n        _pack.Rooms.Add(room);\n        return this;\n    }\n    \n    public StoryPackBuilder AddObject(GameObject obj)\n    {\n        _pack.Objects[obj.Id] = obj;\n        return this;\n    }\n    \n    public StoryPackBuilder SetStartingRoom(string roomId)\n    {\n        _pack.StartingRoomId = roomId;\n        return this;\n    }\n    \n    public StoryPack Build()\n    {\n        // Validate before building\n        if (string.IsNullOrEmpty(_pack.StartingRoomId))\n        {\n            throw new InvalidOperationException(\n                \"Starting room must be set\");\n        }\n        \n        if (_pack.Rooms.Count == 0)\n        {\n            throw new InvalidOperationException(\n                \"Pack must contain at least one room\");\n        }\n        \n        return _pack;\n    }\n}\n```\n\n### 2. AI-Assisted Content Generation\n\n```csharp\npublic class AiContentGenerator\n{\n    private readonly ILlmApiClient _llmClient;\n    private readonly ILogger _logger;\n    \n    public async Task<StoryPack> GenerateStoryPackAsync(\n        string theme,\n        ContentGenerationOptions options)\n    {\n        _logger.LogInformation(\n            \"Generating story pack for theme: {Theme}\", theme);\n        \n        // Step 1: Generate pack metadata\n        var metadata = await GenerateMetadataAsync(theme, options);\n        \n        // Step 2: Generate rooms\n        var rooms = await GenerateRoomsAsync(theme, options.RoomCount);\n        \n        // Step 3: Generate objects for each room\n        var objects = new Dictionary<string, GameObject>();\n        foreach (var room in rooms)\n        {\n            var roomObjects = await GenerateRoomObjectsAsync(\n                theme, room, options.ObjectsPerRoom);\n            \n            foreach (var obj in roomObjects)\n            {\n                objects[obj.Id] = obj;\n                room.ObjectIds.Add(obj.Id);\n            }\n        }\n        \n        // Step 4: Create interconnections\n        ConnectRooms(rooms, options.Connectivity);\n        \n        // Step 5: Add puzzles and special items\n        await AddPuzzlesAsync(rooms, objects, options.PuzzleCount);\n        \n        var pack = new StoryPack\n        {\n            Id = GenerateId(theme),\n            Theme = theme,\n            Description = metadata.Description,\n            Version = \"1.0.0\",\n            Author = \"AI Generated\",\n            StartingRoomId = rooms.First().Id,\n            Rooms = rooms,\n            Objects = objects,\n            Metadata = metadata\n        };\n        \n        _logger.LogInformation(\n            \"Generated story pack: {Rooms} rooms, {Objects} objects\",\n            pack.Rooms.Count, pack.Objects.Count);\n        \n        return pack;\n    }\n    \n    private async Task<StoryMetadata> GenerateMetadataAsync(\n        string theme,\n        ContentGenerationOptions options)\n    {\n        var prompt = $@\"\nGenerate metadata for a text adventure game with theme: '{theme}'.\nInclude a compelling description (2-3 sentences), difficulty level, \nestimated play time, and 3-5 relevant tags.\n\nOutput as JSON:\n{{\n  \"\"description\"\": \"\"...\"\",\n  \"\"difficulty\"\": \"\"Easy|Medium|Hard\"\",\n  \"\"estimatedPlayTime\"\": 30,\n  \"\"tags\"\": [\"\"tag1\"\", \"\"tag2\"\", \"\"tag3\"\"]\n}}\";\n        \n        var response = await _llmClient.GenerateAsync(prompt);\n        return JsonSerializer.Deserialize<StoryMetadata>(response);\n    }\n    \n    private async Task<List<Room>> GenerateRoomsAsync(\n        string theme,\n        int count)\n    {\n        var prompt = $@\"\nGenerate {count} interconnected rooms for a '{theme}' themed adventure game.\nEach room should have:\n- Unique ID (lowercase, underscores)\n- Vivid description (2-3 sentences)\n- Light level (Bright, Normal, Dim, Dark, PitchBlack)\n- Suggested ambient sound\n\nOutput as JSON array.\";\n        \n        var response = await _llmClient.GenerateAsync(prompt);\n        return JsonSerializer.Deserialize<List<Room>>(response);\n    }\n    \n    private async Task<List<GameObject>> GenerateRoomObjectsAsync(\n        string theme,\n        Room room,\n        int count)\n    {\n        var prompt = $@\"\nGenerate {count} interactive objects for this room:\nTheme: {theme}\nRoom: {room.Description}\n\nObjects should include:\n- Mix of collectible items and furniture\n- Appropriate actions (take, use, examine, etc.)\n- Success/failure messages\n- State changes where relevant\n\nOutput as JSON array.\";\n        \n        var response = await _llmClient.GenerateAsync(prompt);\n        return JsonSerializer.Deserialize<List<GameObject>>(response);\n    }\n    \n    private void ConnectRooms(\n        List<Room> rooms,\n        double connectivity)\n    {\n        // Create a network of room connections\n        // Higher connectivity = more paths between rooms\n        \n        var random = new Random();\n        \n        for (int i = 0; i < rooms.Count - 1; i++)\n        {\n            // Always connect to next room (minimum connectivity)\n            var direction = GetRandomDirection();\n            rooms[i].Exits[direction] = rooms[i + 1].Id;\n            rooms[i + 1].Exits[GetOppositeDirection(direction)] = \n                rooms[i].Id;\n            \n            // Add extra connections based on connectivity factor\n            if (random.NextDouble() < connectivity)\n            {\n                var targetIndex = random.Next(rooms.Count);\n                if (targetIndex != i)\n                {\n                    direction = GetRandomDirection();\n                    if (!rooms[i].Exits.ContainsKey(direction))\n                    {\n                        rooms[i].Exits[direction] = rooms[targetIndex].Id;\n                    }\n                }\n            }\n        }\n    }\n    \n    private async Task AddPuzzlesAsync(\n        List<Room> rooms,\n        Dictionary<string, GameObject> objects,\n        int puzzleCount)\n    {\n        // Generate puzzle scenarios\n        for (int i = 0; i < puzzleCount; i++)\n        {\n            var prompt = $@\"\nGenerate a puzzle for a text adventure game.\nInclude:\n- Locked door or container\n- Key or solution item\n- Clues in room descriptions\n- Satisfying resolution\n\nOutput as JSON with room IDs and object definitions.\";\n            \n            var response = await _llmClient.GenerateAsync(prompt);\n            // Parse and integrate puzzle into rooms and objects\n        }\n    }\n    \n    private string GetRandomDirection()\n    {\n        var directions = new[] { \"north\", \"south\", \"east\", \"west\", \n                                \"up\", \"down\" };\n        return directions[new Random().Next(directions.Length)];\n    }\n    \n    private string GetOppositeDirection(string direction)\n    {\n        return direction switch\n        {\n            \"north\" => \"south\",\n            \"south\" => \"north\",\n            \"east\" => \"west\",\n            \"west\" => \"east\",\n            \"up\" => \"down\",\n            \"down\" => \"up\",\n            _ => direction\n        };\n    }\n    \n    private string GenerateId(string theme)\n    {\n        return theme.ToLowerInvariant()\n            .Replace(\" \", \"_\")\n            .Replace(\"-\", \"_\");\n    }\n}\n\npublic class ContentGenerationOptions\n{\n    public int RoomCount { get; set; } = 6;\n    public int ObjectsPerRoom { get; set; } = 3;\n    public int PuzzleCount { get; set; } = 2;\n    public double Connectivity { get; set; } = 0.3;\n}\n```\n\n## Content Validation\n\n```csharp\npublic class StoryPackValidator\n{\n    public ValidationResult Validate(StoryPack pack)\n    {\n        var errors = new List<string>();\n        var warnings = new List<string>();\n        \n        // Check required fields\n        if (string.IsNullOrEmpty(pack.Id))\n            errors.Add(\"Pack ID is required\");\n        \n        if (string.IsNullOrEmpty(pack.Theme))\n            errors.Add(\"Theme is required\");\n        \n        if (pack.Rooms.Count == 0)\n            errors.Add(\"Pack must contain at least one room\");\n        \n        // Check starting room\n        if (!pack.Rooms.Any(r => r.Id == pack.StartingRoomId))\n            errors.Add($\"Starting room not found: {pack.StartingRoomId}\");\n        \n        // Validate rooms\n        foreach (var room in pack.Rooms)\n        {\n            ValidateRoom(room, pack, errors, warnings);\n        }\n        \n        // Validate objects\n        foreach (var obj in pack.Objects.Values)\n        {\n            ValidateObject(obj, errors, warnings);\n        }\n        \n        return new ValidationResult\n        {\n            IsValid = errors.Count == 0,\n            Errors = errors,\n            Warnings = warnings\n        };\n    }\n    \n    private void ValidateRoom(\n        Room room,\n        StoryPack pack,\n        List<string> errors,\n        List<string> warnings)\n    {\n        // Check description\n        if (string.IsNullOrWhiteSpace(room.Description))\n            errors.Add($\"Room {room.Id} has no description\");\n        \n        // Check exits\n        foreach (var exit in room.Exits)\n        {\n            if (!pack.Rooms.Any(r => r.Id == exit.Value))\n            {\n                warnings.Add(\n                    $\"Room {room.Id} exit '{exit.Key}' \" +\n                    $\"points to non-existent room: {exit.Value}\");\n            }\n        }\n        \n        // Check object references\n        foreach (var objId in room.ObjectIds)\n        {\n            if (!pack.Objects.ContainsKey(objId))\n            {\n                errors.Add(\n                    $\"Room {room.Id} references \" +\n                    $\"non-existent object: {objId}\");\n            }\n        }\n    }\n    \n    private void ValidateObject(\n        GameObject obj,\n        List<string> errors,\n        List<string> warnings)\n    {\n        if (string.IsNullOrEmpty(obj.Name))\n            errors.Add($\"Object {obj.Id} has no name\");\n        \n        if (string.IsNullOrEmpty(obj.Description))\n            warnings.Add($\"Object {obj.Id} has no description\");\n        \n        if (obj.Actions.Count == 0)\n            warnings.Add($\"Object {obj.Id} has no actions\");\n    }\n}\n```\n\n## Content Import/Export\n\n```csharp\npublic class ContentExporter\n{\n    public async Task ExportPackAsync(\n        StoryPack pack,\n        string outputPath)\n    {\n        var options = new JsonSerializerOptions\n        {\n            WriteIndented = true,\n            PropertyNamingPolicy = JsonNamingPolicy.CamelCase\n        };\n        \n        var json = JsonSerializer.Serialize(pack, options);\n        await File.WriteAllTextAsync(outputPath, json);\n    }\n    \n    public async Task<StoryPack> ImportPackAsync(string filePath)\n    {\n        var json = await File.ReadAllTextAsync(filePath);\n        \n        var options = new JsonSerializerOptions\n        {\n            PropertyNameCaseInsensitive = true\n        };\n        \n        return JsonSerializer.Deserialize<StoryPack>(json, options);\n    }\n}\n```\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 04-data-models.md, 06-game-engine.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/09-content-management.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/04-data-models.md\ndocs/07-ui-ux-design.md\ndocs/08-maui-implementation.md\ndocs/09-content-management.md\ndocs/06-game-engine.md\ndocs/03-technical-stack.md\ndocs/05-voice-pipeline.md\n\n# Current Time\n10/23/2025, 7:27:45 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n104,548 / 127.805K tokens used (82%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll complete the final 2 documents to finish the comprehensive architecture documentation.\n\n<write_to_file>\n<path>docs/10-deployment-strategy.md</path>\n<content># 10 - Deployment Strategy\n\n## Overview\n\nThis document outlines the deployment strategy for The Cabin, including build configurations, release management, distribution channels, and update mechanisms.\n\n## Build Configurations\n\n### Debug Build\n\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n    <AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>\n    <AndroidLinkMode>None</AndroidLinkMode>\n    <AndroidUseInterpreter>true</AndroidUseInterpreter>\n    <DebugSymbols>true</DebugSymbols>\n    <Optimize>false</Optimize>\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\n</PropertyGroup>\n```\n\n**Characteristics**:\n- Full debugging support\n- No code optimization\n- Larger APK size (~60-80 MB)\n- Faster build times\n- All logging enabled\n\n### Release Build\n\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n    <AndroidPackageFormat>apk</AndroidPackageFormat>\n    <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n    <AndroidLinkMode>SdkOnly</AndroidLinkMode>\n    <AndroidUseAapt2>true</AndroidUseAapt2>\n    <AndroidCreatePackagePerAbi>false</AndroidCreatePackagePerAbi>\n    <DebugSymbols>false</DebugSymbols>\n    <Optimize>true</Optimize>\n    <EnableLLVM>false</EnableLLVM>\n    <AndroidEnableMultiDex>true</AndroidEnableMultiDex>\n</PropertyGroup>\n```\n\n**Characteristics**:\n- AOT compilation enabled\n- Code optimization\n- Smaller APK size (~40-50 MB)\n- Production-ready\n- Minimal logging\n\n## Version Management\n\n### Versioning Strategy\n\nFollowing Semantic Versioning (SemVer): `MAJOR.MINOR.PATCH`\n\n```xml\n<PropertyGroup>\n    <ApplicationDisplayVersion>1.0.0</ApplicationDisplayVersion>\n    <ApplicationVersion>1</ApplicationVersion>\n</PropertyGroup>\n```\n\n- **MAJOR**: Breaking changes, major features\n- **MINOR**: New features, backward compatible\n- **PATCH**: Bug fixes, minor improvements\n\n### Version Code (Android)\n\n```csharp\npublic static class VersionInfo\n{\n    public const string Version = \"1.0.0\";\n    public const int VersionCode = 1;\n    public const string BuildDate = \"2025-10-23\";\n    \n    public static string GetFullVersion()\n    {\n        return $\"{Version} ({VersionCode}) - {BuildDate}\";\n    }\n}\n```\n\n## Code Signing\n\n### Android App Signing\n\n#### Development/Debug Signing\n\n```bash\n# Uses debug keystore automatically\n# Location: %USERPROFILE%\\.android\\debug.keystore\nkeytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey\n```\n\n#### Production Signing\n\n```bash\n# Generate release keystore\nkeytool -genkey -v -keystore thecabin-release.keystore -alias thecabin -keyalg RSA -keysize 2048 -validity 10000\n\n# Sign APK\njarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore thecabin-release.keystore app-release-unsigned.apk thecabin\n\n# Verify signature\njarsigner -verify -verbose -certs app-release.apk\n```\n\n#### Keystore Configuration\n\n```xml\n<!-- In .csproj for automated signing -->\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n    <AndroidKeyStore>true</AndroidKeyStore>\n    <AndroidSigningKeyStore>thecabin-release.keystore</AndroidSigningKeyStore>\n    <AndroidSigningKeyAlias>thecabin</AndroidSigningKeyAlias>\n    <AndroidSigningKeyPass>$(KeystorePassword)</AndroidSigningKeyPass>\n    <AndroidSigningStorePass>$(KeystorePassword)</AndroidSigningStorePass>\n</PropertyGroup>\n```\n\n**IMPORTANT**: Never commit keystore files or passwords to source control!\n\n## Build Pipeline\n\n### GitHub Actions Workflow\n\n```yaml\nname: Android Build\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  release:\n    types: [ published ]\n\njobs:\n  build:\n    runs-on: windows-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 8.0.x\n    \n    - name: Install MAUI Workloads\n      run: dotnet workload install maui\n    \n    - name: Restore Dependencies\n      run: dotnet restore TheCabin.csproj\n    \n    - name: Build Debug APK\n      if: github.event_name == 'pull_request'\n      run: dotnet build TheCabin.csproj -c Debug -f net8.0-android\n    \n    - name: Build Release APK\n      if: github.ref == 'refs/heads/main'\n      env:\n        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}\n      run: dotnet publish TheCabin.csproj -c Release -f net8.0-android\n    \n    - name: Upload APK Artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: android-apk\n        path: bin/Release/net8.0-android/publish/*.apk\n    \n    - name: Run Tests\n      run: dotnet test TheCabin.Tests/TheCabin.Tests.csproj\n```\n\n### Azure DevOps Pipeline\n\n```yaml\ntrigger:\n  branches:\n    include:\n    - main\n    - develop\n\npool:\n  vmImage: 'windows-latest'\n\nvariables:\n  buildConfiguration: 'Release'\n  \nsteps:\n- task: UseDotNet@2\n  inputs:\n    version: '8.0.x'\n\n- script: dotnet workload install maui\n  displayName: 'Install MAUI Workloads'\n\n- task: DotNetCoreCLI@2\n  displayName: 'Restore NuGet Packages'\n  inputs:\n    command: 'restore'\n    projects: '**/*.csproj'\n\n- task: DotNetCoreCLI@2\n  displayName: 'Build Release APK'\n  inputs:\n    command: 'publish'\n    projects: 'TheCabin.csproj'\n    arguments: '-c $(buildConfiguration) -f net8.0-android'\n    \n- task: CopyFiles@2\n  displayName: 'Copy APK to Staging'\n  inputs:\n    contents: '**/*.apk'\n    targetFolder: '$(Build.ArtifactStagingDirectory)'\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish APK Artifact'\n  inputs:\n    pathToPublish: '$(Build.ArtifactStagingDirectory)'\n    artifactName: 'android-build'\n```\n\n## Distribution Channels\n\n### 1. Google Play Store\n\n#### Preparation Checklist\n\n- [x] Create Google Play Console account ($25 one-time fee)\n- [x] Prepare app listing materials:\n  - App name, short description, full description\n  - Screenshots (phone, tablet, 7-inch tablet, 10-inch tablet)\n  - Feature graphic (1024 x 500 px)\n  - App icon (512 x 512 px)\n  - Promo video (optional)\n- [x] Set content rating questionnaire\n- [x] Set target audience and content\n- [x] Prepare privacy policy URL\n- [x] Configure app pricing (Free)\n\n#### Play Store Metadata\n\n```\nTitle: The Cabin - Voice Adventure\nShort Description: \nExperience immersive voice-controlled text adventures in The Cabin.\n\nFull Description:\nüéôÔ∏è VOICE-CONTROLLED ADVENTURE\nThe Cabin brings classic text adventures into the modern era with cutting-edge voice recognition. Speak your commands naturally and watch the story unfold.\n\n‚ú® KEY FEATURES\n‚Ä¢ Hands-free gameplay with voice commands\n‚Ä¢ Multiple atmospheric story packs\n‚Ä¢ Dynamic AI-powered narrative\n‚Ä¢ Save your progress and return anytime\n‚Ä¢ Offline play mode available\n\nüé≠ STORY PACKS INCLUDED\n‚Ä¢ Classic Horror: Haunted cabin mystery\n‚Ä¢ Arctic Survival: Frozen isolation\n‚Ä¢ Fantasy Magic: Wizard's workshop\n‚Ä¢ Sci-Fi Isolation: Derelict space module\n‚Ä¢ Cozy Mystery: Snowbound secrets\n\nüéÆ HOW TO PLAY\nSimply tap the microphone and speak your commands: \"look around\", \"take lantern\", \"go north\". The game understands natural language, so talk as you would to a friend.\n\nPrivacy Policy: https://thecabin.app/privacy\n```\n\n#### Release Tracks\n\n1. **Internal Testing**: Team members only (1-100 testers)\n2. **Closed Testing**: Limited audience (up to 100,000 testers)\n3. **Open Testing**: Public beta (unlimited)\n4. **Production**: Full release\n\n#### Staged Rollout\n\n```\nDay 1:  5% of users\nDay 3:  20% of users\nDay 5:  50% of users\nDay 7:  100% of users\n```\n\n### 2. Direct APK Distribution (Side-loading)\n\nFor beta testers or regions without Play Store access:\n\n```bash\n# Generate signed APK\ndotnet publish -c Release -f net8.0-android\n\n# APK location\nbin/Release/net8.0-android/publish/com.thecabin.voiceadventure-Signed.apk\n```\n\n**Distribution Methods**:\n- GitHub Releases\n- Direct download from website\n- Enterprise MDM systems\n\n### 3. Third-Party App Stores\n\nConsider additional distribution through:\n- Amazon Appstore\n- Samsung Galaxy Store\n- Huawei AppGallery\n\n## Update Mechanism\n\n### In-App Update Implementation\n\n```csharp\npublic class UpdateService\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger _logger;\n    \n    private const string UpdateCheckUrl = \n        \"https://api.thecabin.app/version/check\";\n    \n    public async Task<UpdateInfo> CheckForUpdatesAsync()\n    {\n        try\n        {\n            var currentVersion = VersionInfo.Version;\n            var response = await _httpClient.GetAsync(\n                $\"{UpdateCheckUrl}?current={currentVersion}&platform=android\");\n            \n            if (response.IsSuccessStatusCode)\n            {\n                var json = await response.Content.ReadAsStringAsync();\n                return JsonSerializer.Deserialize<UpdateInfo>(json);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to check for updates\");\n        }\n        \n        return new UpdateInfo { UpdateAvailable = false };\n    }\n    \n    public async Task<bool> PromptUpdateAsync(UpdateInfo update)\n    {\n        if (!update.UpdateAvailable)\n            return false;\n        \n        var message = update.IsCritical\n            ? $\"Critical update available: {update.NewVersion}\\n\\n\" +\n              $\"{update.ReleaseNotes}\\n\\nThis update is required to continue.\"\n            : $\"Update available: {update.NewVersion}\\n\\n\" +\n              $\"{update.ReleaseNotes}\\n\\nWould you like to update now?\";\n        \n        var result = await Application.Current.MainPage.DisplayAlert(\n            \"Update Available\",\n            message,\n            update.IsCritical ? \"Update Now\" : \"Update\",\n            update.IsCritical ? null : \"Later\");\n        \n        if (result)\n        {\n            await OpenUpdateLinkAsync(update.UpdateUrl);\n            return true;\n        }\n        \n        return false;\n    }\n    \n    private async Task OpenUpdateLinkAsync(string url)\n    {\n        await Launcher.OpenAsync(new Uri(url));\n    }\n}\n\npublic class UpdateInfo\n{\n    public bool UpdateAvailable { get; set; }\n    public string NewVersion { get; set; }\n    public string ReleaseNotes { get; set; }\n    public string UpdateUrl { get; set; }\n    public bool IsCritical { get; set; }\n}\n```\n\n### Content Pack Updates\n\n```csharp\npublic class ContentUpdateService\n{\n    private const string ContentManifestUrl = \n        \"https://cdn.thecabin.app/content/manifest.json\";\n    \n    public async Task<List<StoryPackUpdate>> CheckContentUpdatesAsync()\n    {\n        var manifest = await FetchManifestAsync();\n        var updates = new List<StoryPackUpdate>();\n        \n        foreach (var pack in manifest.Packs)\n        {\n            var localVersion = await GetLocalPackVersionAsync(pack.Id);\n            if (localVersion == null || \n                Version.Parse(pack.Version) > Version.Parse(localVersion))\n            {\n                updates.Add(new StoryPackUpdate\n                {\n                    PackId = pack.Id,\n                    NewVersion = pack.Version,\n                    DownloadUrl = pack.DownloadUrl,\n                    SizeInMb = pack.SizeInMb\n                });\n            }\n        }\n        \n        return updates;\n    }\n    \n    public async Task DownloadContentPackAsync(\n        StoryPackUpdate update,\n        IProgress<double> progress)\n    {\n        var httpClient = new HttpClient();\n        var response = await httpClient.GetAsync(\n            update.DownloadUrl,\n            HttpCompletionOption.ResponseHeadersRead);\n        \n        var totalBytes = response.Content.Headers.ContentLength ?? 0;\n        var downloadedBytes = 0L;\n        \n        using var contentStream = await response.Content.ReadAsStreamAsync();\n        using var fileStream = File.Create(\n            GetContentPackPath(update.PackId));\n        \n        var buffer = new byte[8192];\n        int bytesRead;\n        \n        while ((bytesRead = await contentStream.ReadAsync(buffer, 0, buffer.Length)) > 0)\n        {\n            await fileStream.WriteAsync(buffer, 0, bytesRead);\n            downloadedBytes += bytesRead;\n            \n            if (totalBytes > 0)\n            {\n                progress?.Report((double)downloadedBytes / totalBytes);\n            }\n        }\n    }\n    \n    private string GetContentPackPath(string packId)\n    {\n        return Path.Combine(\n            FileSystem.AppDataDirectory,\n            \"StorePacks\",\n            $\"{packId}.json\");\n    }\n}\n```\n\n## Monitoring and Analytics\n\n### Crash Reporting\n\n```csharp\n// Using Microsoft App Center\npublic static class AppCenterConfig\n{\n    public static void Initialize()\n    {\n        AppCenter.Start(\n            \"android={APPCENTER_SECRET}\",\n            typeof(Analytics),\n            typeof(Crashes));\n        \n        Crashes.GetErrorAttachments = (ErrorReport report) =>\n        {\n            return new[]\n            {\n                ErrorAttachmentLog.AttachmentWithText(\n                    GetDiagnosticInfo(),\n                    \"diagnostic_info.txt\")\n            };\n        };\n    }\n    \n    private static string GetDiagnosticInfo()\n    {\n        return $@\"\nApp Version: {VersionInfo.Version}\nDevice: {DeviceInfo.Model}\nOS: {DeviceInfo.Platform} {DeviceInfo.VersionString}\nMemory: {DeviceInfo.Idiom}\n        \";\n    }\n}\n```\n\n### Usage Analytics\n\n```csharp\npublic class AnalyticsService\n{\n    public void TrackEvent(string eventName, \n        Dictionary<string, string> properties = null)\n    {\n        Analytics.TrackEvent(eventName, properties);\n    }\n    \n    public void TrackGameSession(GameSession session)\n    {\n        TrackEvent(\"game_session_completed\", new Dictionary<string, string>\n        {\n            { \"theme\", session.ThemeId },\n            { \"duration_minutes\", session.Duration.TotalMinutes.ToString(\"F0\") },\n            { \"commands_executed\", session.CommandsExecuted.ToString() },\n            { \"puzzles_solved\", session.PuzzlesSolved.ToString() }\n        });\n    }\n    \n    public void TrackVoiceCommand(string command, bool success)\n    {\n        TrackEvent(\"voice_command\", new Dictionary<string, string>\n        {\n            { \"command_type\", command },\n            { \"success\", success.ToString() }\n        });\n    }\n}\n```\n\n## Rollback Strategy\n\n### Detecting Issues\n\n```csharp\npublic class RollbackDetector\n{\n    private readonly IAnalyticsService _analytics;\n    \n    public async Task<RollbackRecommendation> AnalyzeDeploymentAsync(\n        string version)\n    {\n        var metrics = await _analytics.GetMetricsAsync(version);\n        \n        var crashRate = metrics.Crashes / (double)metrics.Sessions;\n        var errorRate = metrics.Errors / (double)metrics.Commands;\n        \n        if (crashRate > 0.05) // 5% crash rate\n        {\n            return new RollbackRecommendation\n            {\n                ShouldRollback = true,\n                Reason = $\"High crash rate: {crashRate:P}\"\n            };\n        }\n        \n        if (errorRate > 0.20) // 20% error rate\n        {\n            return new RollbackRecommendation\n            {\n                ShouldRollback = true,\n                Reason = $\"High error rate: {errorRate:P}\"\n            };\n        }\n        \n        return new RollbackRecommendation\n        {\n            ShouldRollback = false\n        };\n    }\n}\n```\n\n### Rollback Process\n\n1. **Halt Production Rollout**: Pause staged rollout at current percentage\n2. **Investigate**: Review crash logs and user feedback\n3. **Fix or Revert**: Either hotfix and re-release, or revert to previous version\n4. **Communicate**: Notify users of issues and resolution timeline\n\n## Security Considerations\n\n### API Key Management\n\n```csharp\n// Store sensitive keys in secure storage\npublic class SecureConfigService\n{\n    public async Task<string> GetApiKeyAsync(string keyName)\n    {\n        return await SecureStorage.GetAsync(keyName);\n    }\n    \n    public async Task SetApiKeyAsync(string keyName, string value)\n    {\n        await SecureStorage.SetAsync(keyName, value);\n    }\n}\n```\n\n### ProGuard/R8 Configuration\n\n```\n# Keep model classes\n-keep class TheCabin.Models.** { *; }\n\n# Keep API client interfaces\n-keep interface TheCabin.Services.I** { *; }\n\n# Keep custom exceptions\n-keep class TheCabin.Exceptions.** { *; }\n```\n\n## Release Checklist\n\n### Pre-Release\n\n- [ ] All tests passing\n- [ ] Code review completed\n- [ ] Version numbers updated\n- [ ] Release notes prepared\n- [ ] Screenshots updated\n- [ ] Privacy policy current\n- [ ] Terms of service current\n- [ ] APK signed with release key\n- [ ] APK tested on multiple devices\n- [ ] Analytics configured\n- [ ] Crash reporting tested\n\n### Release\n\n- [ ] Upload to Play Console\n- [ ] Set release notes\n- [ ] Configure rollout percentage\n- [ ] Submit for review\n\n### Post-Release\n\n- [ ] Monitor crash reports\n- [ ] Monitor user reviews\n- [ ] Track key metrics\n- [ ] Prepare hotfix if needed\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 03-technical-stack.md, 08-maui-implementation.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [x] Write 05-voice-pipeline.md\n- [x] Write 06-game-engine.md\n- [x] Write 07-ui-ux-design.md\n- [x] Write 08-maui-implementation.md\n- [x] Write 09-content-management.md\n- [x] Write 10-deployment-strategy.md\n- [ ] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/10-deployment-strategy.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/10-deployment-strategy.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/10-deployment-strategy.md\">\n# 10 - Deployment Strategy\n\n## Overview\n\nThis document outlines the deployment strategy for The Cabin, including build configurations, release management, distribution channels, and update mechanisms.\n\n## Build Configurations\n\n### Debug Build\n\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\n    <AndroidEnableProfiledAot>false</AndroidEnableProfiledAot>\n    <AndroidLinkMode>None</AndroidLinkMode>\n    <AndroidUseInterpreter>true</AndroidUseInterpreter>\n    <DebugSymbols>true</DebugSymbols>\n    <Optimize>false</Optimize>\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\n</PropertyGroup>\n```\n\n**Characteristics**:\n- Full debugging support\n- No code optimization\n- Larger APK size (~60-80 MB)\n- Faster build times\n- All logging enabled\n\n### Release Build\n\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n    <AndroidPackageFormat>apk</AndroidPackageFormat>\n    <AndroidEnableProfiledAot>true</AndroidEnableProfiledAot>\n    <AndroidLinkMode>SdkOnly</AndroidLinkMode>\n    <AndroidUseAapt2>true</AndroidUseAapt2>\n    <AndroidCreatePackagePerAbi>false</AndroidCreatePackagePerAbi>\n    <DebugSymbols>false</DebugSymbols>\n    <Optimize>true</Optimize>\n    <EnableLLVM>false</EnableLLVM>\n    <AndroidEnableMultiDex>true</AndroidEnableMultiDex>\n</PropertyGroup>\n```\n\n**Characteristics**:\n- AOT compilation enabled\n- Code optimization\n- Smaller APK size (~40-50 MB)\n- Production-ready\n- Minimal logging\n\n## Version Management\n\n### Versioning Strategy\n\nFollowing Semantic Versioning (SemVer): `MAJOR.MINOR.PATCH`\n\n```xml\n<PropertyGroup>\n    <ApplicationDisplayVersion>1.0.0</ApplicationDisplayVersion>\n    <ApplicationVersion>1</ApplicationVersion>\n</PropertyGroup>\n```\n\n- **MAJOR**: Breaking changes, major features\n- **MINOR**: New features, backward compatible\n- **PATCH**: Bug fixes, minor improvements\n\n### Version Code (Android)\n\n```csharp\npublic static class VersionInfo\n{\n    public const string Version = \"1.0.0\";\n    public const int VersionCode = 1;\n    public const string BuildDate = \"2025-10-23\";\n    \n    public static string GetFullVersion()\n    {\n        return $\"{Version} ({VersionCode}) - {BuildDate}\";\n    }\n}\n```\n\n## Code Signing\n\n### Android App Signing\n\n#### Development/Debug Signing\n\n```bash\n# Uses debug keystore automatically\n# Location: %USERPROFILE%\\.android\\debug.keystore\nkeytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey\n```\n\n#### Production Signing\n\n```bash\n# Generate release keystore\nkeytool -genkey -v -keystore thecabin-release.keystore -alias thecabin -keyalg RSA -keysize 2048 -validity 10000\n\n# Sign APK\njarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore thecabin-release.keystore app-release-unsigned.apk thecabin\n\n# Verify signature\njarsigner -verify -verbose -certs app-release.apk\n```\n\n#### Keystore Configuration\n\n```xml\n<!-- In .csproj for automated signing -->\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n    <AndroidKeyStore>true</AndroidKeyStore>\n    <AndroidSigningKeyStore>thecabin-release.keystore</AndroidSigningKeyStore>\n    <AndroidSigningKeyAlias>thecabin</AndroidSigningKeyAlias>\n    <AndroidSigningKeyPass>$(KeystorePassword)</AndroidSigningKeyPass>\n    <AndroidSigningStorePass>$(KeystorePassword)</AndroidSigningStorePass>\n</PropertyGroup>\n```\n\n**IMPORTANT**: Never commit keystore files or passwords to source control!\n\n## Build Pipeline\n\n### GitHub Actions Workflow\n\n```yaml\nname: Android Build\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  release:\n    types: [ published ]\n\njobs:\n  build:\n    runs-on: windows-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: 8.0.x\n    \n    - name: Install MAUI Workloads\n      run: dotnet workload install maui\n    \n    - name: Restore Dependencies\n      run: dotnet restore TheCabin.csproj\n    \n    - name: Build Debug APK\n      if: github.event_name == 'pull_request'\n      run: dotnet build TheCabin.csproj -c Debug -f net8.0-android\n    \n    - name: Build Release APK\n      if: github.ref == 'refs/heads/main'\n      env:\n        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}\n      run: dotnet publish TheCabin.csproj -c Release -f net8.0-android\n    \n    - name: Upload APK Artifact\n      uses: actions/upload-artifact@v3\n      with:\n        name: android-apk\n        path: bin/Release/net8.0-android/publish/*.apk\n    \n    - name: Run Tests\n      run: dotnet test TheCabin.Tests/TheCabin.Tests.csproj\n```\n\n### Azure DevOps Pipeline\n\n```yaml\ntrigger:\n  branches:\n    include:\n    - main\n    - develop\n\npool:\n  vmImage: 'windows-latest'\n\nvariables:\n  buildConfiguration: 'Release'\n  \nsteps:\n- task: UseDotNet@2\n  inputs:\n    version: '8.0.x'\n\n- script: dotnet workload install maui\n  displayName: 'Install MAUI Workloads'\n\n- task: DotNetCoreCLI@2\n  displayName: 'Restore NuGet Packages'\n  inputs:\n    command: 'restore'\n    projects: '**/*.csproj'\n\n- task: DotNetCoreCLI@2\n  displayName: 'Build Release APK'\n  inputs:\n    command: 'publish'\n    projects: 'TheCabin.csproj'\n    arguments: '-c $(buildConfiguration) -f net8.0-android'\n    \n- task: CopyFiles@2\n  displayName: 'Copy APK to Staging'\n  inputs:\n    contents: '**/*.apk'\n    targetFolder: '$(Build.ArtifactStagingDirectory)'\n\n- task: PublishBuildArtifacts@1\n  displayName: 'Publish APK Artifact'\n  inputs:\n    pathToPublish: '$(Build.ArtifactStagingDirectory)'\n    artifactName: 'android-build'\n```\n\n## Distribution Channels\n\n### 1. Google Play Store\n\n#### Preparation Checklist\n\n- [x] Create Google Play Console account ($25 one-time fee)\n- [x] Prepare app listing materials:\n  - App name, short description, full description\n  - Screenshots (phone, tablet, 7-inch tablet, 10-inch tablet)\n  - Feature graphic (1024 x 500 px)\n  - App icon (512 x 512 px)\n  - Promo video (optional)\n- [x] Set content rating questionnaire\n- [x] Set target audience and content\n- [x] Prepare privacy policy URL\n- [x] Configure app pricing (Free)\n\n#### Play Store Metadata\n\n```\nTitle: The Cabin - Voice Adventure\nShort Description: \nExperience immersive voice-controlled text adventures in The Cabin.\n\nFull Description:\nüéôÔ∏è VOICE-CONTROLLED ADVENTURE\nThe Cabin brings classic text adventures into the modern era with cutting-edge voice recognition. Speak your commands naturally and watch the story unfold.\n\n‚ú® KEY FEATURES\n‚Ä¢ Hands-free gameplay with voice commands\n‚Ä¢ Multiple atmospheric story packs\n‚Ä¢ Dynamic AI-powered narrative\n‚Ä¢ Save your progress and return anytime\n‚Ä¢ Offline play mode available\n\nüé≠ STORY PACKS INCLUDED\n‚Ä¢ Classic Horror: Haunted cabin mystery\n‚Ä¢ Arctic Survival: Frozen isolation\n‚Ä¢ Fantasy Magic: Wizard's workshop\n‚Ä¢ Sci-Fi Isolation: Derelict space module\n‚Ä¢ Cozy Mystery: Snowbound secrets\n\nüéÆ HOW TO PLAY\nSimply tap the microphone and speak your commands: \"look around\", \"take lantern\", \"go north\". The game understands natural language, so talk as you would to a friend.\n\nPrivacy Policy: https://thecabin.app/privacy\n```\n\n#### Release Tracks\n\n1. **Internal Testing**: Team members only (1-100 testers)\n2. **Closed Testing**: Limited audience (up to 100,000 testers)\n3. **Open Testing**: Public beta (unlimited)\n4. **Production**: Full release\n\n#### Staged Rollout\n\n```\nDay 1:  5% of users\nDay 3:  20% of users\nDay 5:  50% of users\nDay 7:  100% of users\n```\n\n### 2. Direct APK Distribution (Side-loading)\n\nFor beta testers or regions without Play Store access:\n\n```bash\n# Generate signed APK\ndotnet publish -c Release -f net8.0-android\n\n# APK location\nbin/Release/net8.0-android/publish/com.thecabin.voiceadventure-Signed.apk\n```\n\n**Distribution Methods**:\n- GitHub Releases\n- Direct download from website\n- Enterprise MDM systems\n\n### 3. Third-Party App Stores\n\nConsider additional distribution through:\n- Amazon Appstore\n- Samsung Galaxy Store\n- Huawei AppGallery\n\n## Update Mechanism\n\n### In-App Update Implementation\n\n```csharp\npublic class UpdateService\n{\n    private readonly HttpClient _httpClient;\n    private readonly ILogger _logger;\n    \n    private const string UpdateCheckUrl = \n        \"https://api.thecabin.app/version/check\";\n    \n    public async Task<UpdateInfo> CheckForUpdatesAsync()\n    {\n        try\n        {\n            var currentVersion = VersionInfo.Version;\n            var response = await _httpClient.GetAsync(\n                $\"{UpdateCheckUrl}?current={currentVersion}&platform=android\");\n            \n            if (response.IsSuccessStatusCode)\n            {\n                var json = await response.Content.ReadAsStringAsync();\n                return JsonSerializer.Deserialize<UpdateInfo>(json);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Failed to check for updates\");\n        }\n        \n        return new UpdateInfo { UpdateAvailable = false };\n    }\n    \n    public async Task<bool> PromptUpdateAsync(UpdateInfo update)\n    {\n        if (!update.UpdateAvailable)\n            return false;\n        \n        var message = update.IsCritical\n            ? $\"Critical update available: {update.NewVersion}\\n\\n\" +\n              $\"{update.ReleaseNotes}\\n\\nThis update is required to continue.\"\n            : $\"Update available: {update.NewVersion}\\n\\n\" +\n              $\"{update.ReleaseNotes}\\n\\nWould you like to update now?\";\n        \n        var result = await Application.Current.MainPage.DisplayAlert(\n            \"Update Available\",\n            message,\n            update.IsCritical ? \"Update Now\" : \"Update\",\n            update.IsCritical ? null : \"Later\");\n        \n        if (result)\n        {\n            await OpenUpdateLinkAsync(update.UpdateUrl);\n            return true;\n        }\n        \n        return false;\n    }\n    \n    private async Task OpenUpdateLinkAsync(string url)\n    {\n        await Launcher.OpenAsync(new Uri(url));\n    }\n}\n\npublic class UpdateInfo\n{\n    public bool UpdateAvailable { get; set; }\n    public string NewVersion { get; set; }\n    public string ReleaseNotes { get; set; }\n    public string UpdateUrl { get; set; }\n    public bool IsCritical { get; set; }\n}\n```\n\n### Content Pack Updates\n\n```csharp\npublic class ContentUpdateService\n{\n    private const string ContentManifestUrl = \n        \"https://cdn.thecabin.app/content/manifest.json\";\n    \n    public async Task<List<StoryPackUpdate>> CheckContentUpdatesAsync()\n    {\n        var manifest = await FetchManifestAsync();\n        var updates = new List<StoryPackUpdate>();\n        \n        foreach (var pack in manifest.Packs)\n        {\n            var localVersion = await GetLocalPackVersionAsync(pack.Id);\n            if (localVersion == null || \n                Version.Parse(pack.Version) > Version.Parse(localVersion))\n            {\n                updates.Add(new StoryPackUpdate\n                {\n                    PackId = pack.Id,\n                    NewVersion = pack.Version,\n                    DownloadUrl = pack.DownloadUrl,\n                    SizeInMb = pack.SizeInMb\n                });\n            }\n        }\n        \n        return updates;\n    }\n    \n    public async Task DownloadContentPackAsync(\n        StoryPackUpdate update,\n        IProgress<double> progress)\n    {\n        var httpClient = new HttpClient();\n        var response = await httpClient.GetAsync(\n            update.DownloadUrl,\n            HttpCompletionOption.ResponseHeadersRead);\n        \n        var totalBytes = response.Content.Headers.ContentLength ?? 0;\n        var downloadedBytes = 0L;\n        \n        using var contentStream = await response.Content.ReadAsStreamAsync();\n        using var fileStream = File.Create(\n            GetContentPackPath(update.PackId));\n        \n        var buffer = new byte[8192];\n        int bytesRead;\n        \n        while ((bytesRead = await contentStream.ReadAsync(buffer, 0, buffer.Length)) > 0)\n        {\n            await fileStream.WriteAsync(buffer, 0, bytesRead);\n            downloadedBytes += bytesRead;\n            \n            if (totalBytes > 0)\n            {\n                progress?.Report((double)downloadedBytes / totalBytes);\n            }\n        }\n    }\n    \n    private string GetContentPackPath(string packId)\n    {\n        return Path.Combine(\n            FileSystem.AppDataDirectory,\n            \"StorePacks\",\n            $\"{packId}.json\");\n    }\n}\n```\n\n## Monitoring and Analytics\n\n### Crash Reporting\n\n```csharp\n// Using Microsoft App Center\npublic static class AppCenterConfig\n{\n    public static void Initialize()\n    {\n        AppCenter.Start(\n            \"android={APPCENTER_SECRET}\",\n            typeof(Analytics),\n            typeof(Crashes));\n        \n        Crashes.GetErrorAttachments = (ErrorReport report) =>\n        {\n            return new[]\n            {\n                ErrorAttachmentLog.AttachmentWithText(\n                    GetDiagnosticInfo(),\n                    \"diagnostic_info.txt\")\n            };\n        };\n    }\n    \n    private static string GetDiagnosticInfo()\n    {\n        return $@\"\nApp Version: {VersionInfo.Version}\nDevice: {DeviceInfo.Model}\nOS: {DeviceInfo.Platform} {DeviceInfo.VersionString}\nMemory: {DeviceInfo.Idiom}\n        \";\n    }\n}\n```\n\n### Usage Analytics\n\n```csharp\npublic class AnalyticsService\n{\n    public void TrackEvent(string eventName, \n        Dictionary<string, string> properties = null)\n    {\n        Analytics.TrackEvent(eventName, properties);\n    }\n    \n    public void TrackGameSession(GameSession session)\n    {\n        TrackEvent(\"game_session_completed\", new Dictionary<string, string>\n        {\n            { \"theme\", session.ThemeId },\n            { \"duration_minutes\", session.Duration.TotalMinutes.ToString(\"F0\") },\n            { \"commands_executed\", session.CommandsExecuted.ToString() },\n            { \"puzzles_solved\", session.PuzzlesSolved.ToString() }\n        });\n    }\n    \n    public void TrackVoiceCommand(string command, bool success)\n    {\n        TrackEvent(\"voice_command\", new Dictionary<string, string>\n        {\n            { \"command_type\", command },\n            { \"success\", success.ToString() }\n        });\n    }\n}\n```\n\n## Rollback Strategy\n\n### Detecting Issues\n\n```csharp\npublic class RollbackDetector\n{\n    private readonly IAnalyticsService _analytics;\n    \n    public async Task<RollbackRecommendation> AnalyzeDeploymentAsync(\n        string version)\n    {\n        var metrics = await _analytics.GetMetricsAsync(version);\n        \n        var crashRate = metrics.Crashes / (double)metrics.Sessions;\n        var errorRate = metrics.Errors / (double)metrics.Commands;\n        \n        if (crashRate > 0.05) // 5% crash rate\n        {\n            return new RollbackRecommendation\n            {\n                ShouldRollback = true,\n                Reason = $\"High crash rate: {crashRate:P}\"\n            };\n        }\n        \n        if (errorRate > 0.20) // 20% error rate\n        {\n            return new RollbackRecommendation\n            {\n                ShouldRollback = true,\n                Reason = $\"High error rate: {errorRate:P}\"\n            };\n        }\n        \n        return new RollbackRecommendation\n        {\n            ShouldRollback = false\n        };\n    }\n}\n```\n\n### Rollback Process\n\n1. **Halt Production Rollout**: Pause staged rollout at current percentage\n2. **Investigate**: Review crash logs and user feedback\n3. **Fix or Revert**: Either hotfix and re-release, or revert to previous version\n4. **Communicate**: Notify users of issues and resolution timeline\n\n## Security Considerations\n\n### API Key Management\n\n```csharp\n// Store sensitive keys in secure storage\npublic class SecureConfigService\n{\n    public async Task<string> GetApiKeyAsync(string keyName)\n    {\n        return await SecureStorage.GetAsync(keyName);\n    }\n    \n    public async Task SetApiKeyAsync(string keyName, string value)\n    {\n        await SecureStorage.SetAsync(keyName, value);\n    }\n}\n```\n\n### ProGuard/R8 Configuration\n\n```\n# Keep model classes\n-keep class TheCabin.Models.** { *; }\n\n# Keep API client interfaces\n-keep interface TheCabin.Services.I** { *; }\n\n# Keep custom exceptions\n-keep class TheCabin.Exceptions.** { *; }\n```\n\n## Release Checklist\n\n### Pre-Release\n\n- [ ] All tests passing\n- [ ] Code review completed\n- [ ] Version numbers updated\n- [ ] Release notes prepared\n- [ ] Screenshots updated\n- [ ] Privacy policy current\n- [ ] Terms of service current\n- [ ] APK signed with release key\n- [ ] APK tested on multiple devices\n- [ ] Analytics configured\n- [ ] Crash reporting tested\n\n### Release\n\n- [ ] Upload to Play Console\n- [ ] Set release notes\n- [ ] Configure rollout percentage\n- [ ] Submit for review\n\n### Post-Release\n\n- [ ] Monitor crash reports\n- [ ] Monitor user reviews\n- [ ] Track key metrics\n- [ ] Prepare hotfix if needed\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 03-technical-stack.md, 08-maui-implementation.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/10-deployment-strategy.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/04-data-models.md\ndocs/07-ui-ux-design.md\ndocs/08-maui-implementation.md\ndocs/09-content-management.md\ndocs/10-deployment-strategy.md\ndocs/06-game-engine.md\ndocs/03-technical-stack.md\ndocs/05-voice-pipeline.md\n\n# Recently Modified Files\nThese files have been modified since you last accessed them (file was just edited so you may need to re-read it before editing):\ndocs/03-technical-stack.md\n\n# Current Time\n10/23/2025, 7:29:09 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n102,360 / 127.805K tokens used (80%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"I'll now create the final document to complete the comprehensive architecture documentation.\n\n<write_to_file>\n<path>docs/11-future-roadmap.md</path>\n<content># 11 - Future Roadmap\n\n## Overview\n\nThis document outlines the future development roadmap for The Cabin, including planned features, platform expansions, and long-term vision.\n\n## Version Roadmap\n\n### Version 1.0 - Initial Release (Q1 2025)\n**Status**: Foundation Release\n\n**Core Features**:\n- ‚úÖ Voice-controlled text adventure gameplay\n- ‚úÖ 5 pre-built story packs\n- ‚úÖ Android platform support\n- ‚úÖ Offline play mode\n- ‚úÖ Save/load game functionality\n- ‚úÖ Basic TTS narration\n- ‚úÖ LLM-powered command parsing\n\n**Target Metrics**:\n- 10,000 downloads in first month\n- 4.0+ star rating\n- < 2% crash rate\n\n---\n\n### Version 1.1 - Polish & Refinement (Q2 2025)\n**Status**: Planned\n\n**Features**:\n- [ ] Improved voice recognition accuracy\n- [ ] Enhanced UI animations and transitions\n- [ ] Additional voice customization options\n- [ ] Cloud save sync (optional)\n- [ ] Achievement system\n- [ ] Daily challenges\n- [ ] Performance optimizations\n\n**Bug Fixes & Improvements**:\n- Address user feedback from v1.0\n- Optimize battery usage during voice sessions\n- Reduce APK size by 15-20%\n- Improve offline mode reliability\n\n---\n\n### Version 1.5 - Content Expansion (Q3 2025)\n**Status**: Planned\n\n**Features**:\n- [ ] 5 new story packs (total: 10)\n- [ ] User-generated content support\n- [ ] Story pack workshop/marketplace\n- [ ] Advanced puzzle mechanics\n- [ ] Multi-ending narratives\n- [ ] Character customization\n- [ ] Inventory management improvements\n\n**New Story Themes**:\n1. **Noir Detective**: 1940s mystery investigation\n2. **Post-Apocalyptic**: Survival in wasteland\n3. **Victorian Ghost**: Haunted manor mystery\n4. **Cyberpunk Runner**: Futuristic street survival\n5. **Medieval Quest**: Fantasy adventure\n\n---\n\n### Version 2.0 - Multiplayer & Social (Q4 2025)\n**Status**: Conceptual\n\n**Major Features**:\n- [ ] **Cooperative Voice Sessions**: 2-player shared adventures\n- [ ] **Competitive Challenges**: Timed puzzle races\n- [ ] **Social Hub**: Share progress and achievements\n- [ ] **Leaderboards**: Global and friends rankings\n- [ ] **Live Events**: Weekly themed challenges\n\n**Technical Requirements**:\n- Real-time communication infrastructure\n- Game state synchronization\n- Voice chat integration\n- Anti-cheat measures\n- Matchmaking system\n\n**Implementation Approach**:\n```csharp\npublic interface IMultiplayerSession\n{\n    Task<SessionInfo> CreateSessionAsync(string storyPackId);\n    Task JoinSessionAsync(string sessionId);\n    Task<PlayerAction> WaitForPlayerTurnAsync();\n    Task BroadcastActionAsync(PlayerAction action);\n    Task SyncGameStateAsync(GameState state);\n}\n```\n\n---\n\n### Version 2.5 - AI-Generated Content (Q1 2026)\n**Status**: Research Phase\n\n**Features**:\n- [ ] **Dynamic Story Generation**: AI creates unique adventures\n- [ ] **Procedural Narratives**: Infinite replayability\n- [ ] **Adaptive Difficulty**: AI adjusts to player skill\n- [ ] **Natural Dialogue**: More fluid NPC conversations\n- [ ] **Context-Aware Responses**: Better understanding of player intent\n\n**AI Integration**:\n```csharp\npublic class DynamicStoryGenerator\n{\n    public async Task<StoryPack> GenerateDynamicAdventureAsync(\n        GenerationParameters parameters)\n    {\n        // Use GPT-4 or similar to create:\n        // - Unique setting and theme\n        // - Interconnected rooms\n        // - Puzzles and challenges\n        // - Multiple endings\n        // - Character arcs\n        \n        var story = await _aiEngine.GenerateAsync(parameters);\n        return await ValidateAndOptimizeAsync(story);\n    }\n}\n```\n\n---\n\n## Platform Expansions\n\n### iOS Support (Q2 2026)\n**Priority**: High\n\n**Requirements**:\n- Xcode 15+ and macOS development environment\n- iOS 15.0+ target\n- Swift/Objective-C platform-specific code\n- Apple App Store submission\n\n**Implementation Considerations**:\n- iOS Speech Recognition framework\n- AVFoundation for TTS\n- SwiftUI integration options\n- TestFlight beta testing\n- App Store review guidelines compliance\n\n**Estimated Effort**: 3-4 months\n\n---\n\n### Windows Desktop (Q3 2026)\n**Priority**: Medium\n\n**Features**:\n- Native Windows 11 application\n- Keyboard shortcuts for power users\n- Mouse and keyboard input alternatives\n- Larger screen optimizations\n- Desktop-specific features (e.g., multiple windows)\n\n**Technical Stack**:\n- WinUI 3 / Windows App SDK\n- Windows Speech Platform\n- Microsoft Store distribution\n\n**Estimated Effort**: 2-3 months\n\n---\n\n### Web Version (Q4 2026)\n**Priority**: Low-Medium\n\n**Features**:\n- Browser-based gameplay\n- Progressive Web App (PWA)\n- Cross-platform compatibility\n- Web Speech API integration\n- Cloud-only saves\n\n**Technical Approach**:\n- Blazor WebAssembly\n- SignalR for real-time features\n- IndexedDB for offline storage\n- Web Workers for background processing\n\n**Estimated Effort**: 4-5 months\n\n---\n\n## Advanced Features\n\n### AR Integration (2027+)\n**Status**: Experimental\n\n**Vision**:\nTransform physical spaces into game environments using augmented reality.\n\n**Concepts**:\n- **Room Scanning**: Map real rooms to game locations\n- **Object Recognition**: Real items become game objects\n- **Spatial Audio**: 3D sound positioning\n- **Physical Interaction**: Move around to explore\n\n**Technical Challenges**:\n- ARCore/ARKit integration\n- Indoor positioning accuracy\n- Battery consumption\n- Device compatibility\n\n---\n\n### Smart Speaker Integration (2027+)\n**Status**: Experimental\n\n**Platforms**:\n- Amazon Alexa\n- Google Assistant\n- Apple HomePod\n\n**Features**:\n- Voice-only gameplay (no screen required)\n- Ambient sound effects through smart speakers\n- Multi-room audio support\n- Household multiplayer sessions\n\n**Implementation**:\n```javascript\n// Alexa Skill Example\nconst LaunchRequestHandler = {\n    canHandle(handlerInput) {\n        return handlerInput.requestEnvelope.request.type === 'LaunchRequest';\n    },\n    handle(handlerInput) {\n        const speechText = 'Welcome to The Cabin. Begin your adventure.';\n        return handlerInput.responseBuilder\n            .speak(speechText)\n            .reprompt(speechText)\n            .getResponse();\n    }\n};\n```\n\n---\n\n### Accessibility Enhancements\n\n#### Phase 1 (v1.2)\n- [ ] Screen reader optimization\n- [ ] High contrast mode\n- [ ] Colorblind-friendly palette\n- [ ] Adjustable text sizes\n- [ ] Voice command alternatives\n\n#### Phase 2 (v1.5)\n- [ ] Closed captioning for audio\n- [ ] Switch control support\n- [ ] Haptic feedback options\n- [ ] Reduced motion mode\n- [ ] Dyslexia-friendly fonts\n\n#### Phase 3 (v2.0)\n- [ ] Audio descriptions for all scenes\n- [ ] Customizable control schemes\n- [ ] One-handed mode\n- [ ] Eye-tracking support (experimental)\n\n---\n\n## Content Strategy\n\n### Year 1 (2025)\n- **10 story packs** (5 at launch + 5 updates)\n- **Monthly mini-adventures**: Short 15-minute stories\n- **Seasonal events**: Halloween, Winter, Spring themes\n- **Community contests**: Best user-generated story\n\n### Year 2 (2026)\n- **20 additional story packs**\n- **Genre expansions**: Romance, Comedy, Thriller\n- **Celebrity voice packs**: Professional narrators\n- **Educational content**: History, Science themes\n- **Licensed content partnerships**: Books, movies, games\n\n### Year 3 (2027+)\n- **User workshop marketplace**\n- **AI-generated infinite content**\n- **Modding tools and API**\n- **Content creator program**\n\n---\n\n## Monetization Strategy\n\n### Free Tier\n- 5 base story packs\n- Local save only\n- Standard voice options\n- Ads between sessions (optional)\n\n### Premium Subscription ($4.99/month or $39.99/year)\n- All story packs included\n- Cloud saves and sync\n- Premium voice options\n- Ad-free experience\n- Early access to new content\n- Exclusive monthly stories\n\n### One-Time Purchases\n- Individual story packs: $1.99 - $3.99\n- Story pack bundles: $9.99 (5 packs)\n- Voice pack DLC: $2.99\n- Special editions: $4.99\n\n### In-App Purchases (Optional)\n- Cosmetic themes\n- Custom voice narrators\n- Achievement boosters\n- Hint systems\n\n**Projected Revenue Model**:\n```\nYear 1: 70% Free, 25% Premium, 5% Purchases\nYear 2: 60% Free, 30% Premium, 10% Purchases\nYear 3: 50% Free, 35% Premium, 15% Purchases\n```\n\n---\n\n## Technical Debt & Refactoring\n\n### Priority 1 (Before v2.0)\n- [ ] Migrate to .NET 9\n- [ ] Implement comprehensive unit test coverage (80%+)\n- [ ] Refactor command parsing for better extensibility\n- [ ] Optimize database queries and caching\n- [ ] Improve error handling and recovery\n\n### Priority 2 (Before v3.0)\n- [ ] Microservices architecture for backend\n- [ ] GraphQL API implementation\n- [ ] Implement event sourcing for game state\n- [ ] Advanced telemetry and observability\n- [ ] A/B testing framework\n\n### Priority 3 (Ongoing)\n- [ ] Documentation maintenance\n- [ ] Code quality improvements\n- [ ] Dependency updates\n- [ ] Security audits\n- [ ] Performance profiling\n\n---\n\n## Community & Ecosystem\n\n### Developer Tools\n- [ ] **Story Pack Editor**: Visual tool for content creation\n- [ ] **Testing Simulator**: Test stories without building\n- [ ] **API Documentation**: For integrations\n- [ ] **SDK**: For third-party extensions\n- [ ] **Plugin System**: Extensibility framework\n\n### Community Features\n- [ ] **Official Forum**: Discussion and support\n- [ ] **Discord Server**: Real-time community\n- [ ] **Reddit Community**: User-driven content\n- [ ] **YouTube Channel**: Tutorials and showcases\n- [ ] **Wiki**: Community-maintained documentation\n\n### Content Creator Support\n- [ ] Revenue sharing for popular packs\n- [ ] Featured creator spotlight\n- [ ] Creation tutorials and templates\n- [ ] Quality assurance tools\n- [ ] Analytics dashboard\n\n---\n\n## Research & Innovation\n\n### AI/ML Research Areas\n1. **Better Voice Understanding**: Context-aware parsing\n2. **Emotion Detection**: Respond to player tone\n3. **Adaptive Storytelling**: Learn player preferences\n4. **Natural Language Generation**: More varied responses\n5. **Voice Cloning**: Personalized narration\n\n### Experimental Features\n- **Binaural Audio**: Immersive 3D sound\n- **Gesture Control**: Supplement voice commands\n- **Brain-Computer Interface**: Accessibility research\n- **Procedural Music**: Dynamic soundtracks\n- **Haptic Storytelling**: Tactile feedback\n\n---\n\n## Success Metrics\n\n### App Performance\n- Monthly Active Users (MAU): Target 100K by end of Year 1\n- Daily Active Users (DAU): 30-day retention > 40%\n- Average session duration: > 20 minutes\n- Crash-free rate: > 99%\n- App Store rating: > 4.5 stars\n\n### Engagement\n- Stories completed per user: > 3\n- Average commands per session: > 15\n- Voice recognition accuracy: > 90%\n- User-generated content submissions: 100+ per month\n- Community forum active users: 1000+\n\n### Revenue\n- Conversion to premium: > 5% of users\n- Average revenue per user (ARPU): > $2/year\n- Churn rate: < 10% monthly for premium\n- Customer lifetime value (LTV): > $25\n\n---\n\n## Risk Management\n\n### Technical Risks\n| Risk | Impact | Mitigation |\n|------|--------|------------|\n| Voice recognition accuracy issues | High | Multiple STT providers, fallback options |\n| LLM API costs too high | Medium | Local models, caching, rate limiting |\n| Platform policy changes | Medium | Diversify distribution channels |\n| Performance on low-end devices | Medium | Tiered graphics, optimization |\n\n### Business Risks\n| Risk | Impact | Mitigation |\n|------|--------|------------|\n| Low user adoption | High | Marketing campaign, PR, influencers |\n| Competition from similar apps | Medium | Unique features, quality content |\n| Monetization doesn't meet goals | High | Flexible pricing, A/B testing |\n| Content creation costs | Medium | AI generation, community content |\n\n### Legal Risks\n| Risk | Impact | Mitigation |\n|------|--------|------------|\n| Voice data privacy concerns | High | Clear policies, minimal data collection |\n| Content licensing issues | Medium | Original content, proper licensing |\n| Accessibility compliance | Low | Follow WCAG guidelines |\n| Age rating changes | Medium | Content moderation, parental controls |\n\n---\n\n## Long-Term Vision (2028+)\n\n**The Cabin Platform**: An ecosystem for interactive voice-driven storytelling\n\n**Key Pillars**:\n1. **Open Platform**: Anyone can create and publish\n2. **AI-Powered**: Infinite, personalized stories\n3. **Multi-Modal**: Voice, text, AR, VR integration\n4. **Social Experience**: Shared adventures globally\n5. **Educational**: Learning through interactive fiction\n\n**Ultimate Goal**: Become the leading platform for voice-controlled interactive storytelling, democratizing content creation and making adventures accessible to everyone, everywhere.\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 01-project-overview.md, 10-deployment-strategy.md\n</content>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [x] Write 05-voice-pipeline.md\n- [x] Write 06-game-engine.md\n- [x] Write 07-ui-ux-design.md\n- [x] Write 08-maui-implementation.md\n- [x] Write 09-content-management.md\n- [x] Write 10-deployment-strategy.md\n- [x] Write 11-future-roadmap.md\n</task_progress>\n</write_to_file>"}]},{"role":"user","content":[{"type":"text","text":"[write_to_file for 'docs/11-future-roadmap.md'] Result:"},{"type":"text","text":"The content was successfully saved to docs/11-future-roadmap.md.\n\nHere is the full, updated content of the file that was saved:\n\n<final_file_content path=\"docs/11-future-roadmap.md\">\n# 11 - Future Roadmap\n\n## Overview\n\nThis document outlines the future development roadmap for The Cabin, including planned features, platform expansions, and long-term vision.\n\n## Version Roadmap\n\n### Version 1.0 - Initial Release (Q1 2025)\n**Status**: Foundation Release\n\n**Core Features**:\n- ‚úÖ Voice-controlled text adventure gameplay\n- ‚úÖ 5 pre-built story packs\n- ‚úÖ Android platform support\n- ‚úÖ Offline play mode\n- ‚úÖ Save/load game functionality\n- ‚úÖ Basic TTS narration\n- ‚úÖ LLM-powered command parsing\n\n**Target Metrics**:\n- 10,000 downloads in first month\n- 4.0+ star rating\n- < 2% crash rate\n\n---\n\n### Version 1.1 - Polish & Refinement (Q2 2025)\n**Status**: Planned\n\n**Features**:\n- [ ] Improved voice recognition accuracy\n- [ ] Enhanced UI animations and transitions\n- [ ] Additional voice customization options\n- [ ] Cloud save sync (optional)\n- [ ] Achievement system\n- [ ] Daily challenges\n- [ ] Performance optimizations\n\n**Bug Fixes & Improvements**:\n- Address user feedback from v1.0\n- Optimize battery usage during voice sessions\n- Reduce APK size by 15-20%\n- Improve offline mode reliability\n\n---\n\n### Version 1.5 - Content Expansion (Q3 2025)\n**Status**: Planned\n\n**Features**:\n- [ ] 5 new story packs (total: 10)\n- [ ] User-generated content support\n- [ ] Story pack workshop/marketplace\n- [ ] Advanced puzzle mechanics\n- [ ] Multi-ending narratives\n- [ ] Character customization\n- [ ] Inventory management improvements\n\n**New Story Themes**:\n1. **Noir Detective**: 1940s mystery investigation\n2. **Post-Apocalyptic**: Survival in wasteland\n3. **Victorian Ghost**: Haunted manor mystery\n4. **Cyberpunk Runner**: Futuristic street survival\n5. **Medieval Quest**: Fantasy adventure\n\n---\n\n### Version 2.0 - Multiplayer & Social (Q4 2025)\n**Status**: Conceptual\n\n**Major Features**:\n- [ ] **Cooperative Voice Sessions**: 2-player shared adventures\n- [ ] **Competitive Challenges**: Timed puzzle races\n- [ ] **Social Hub**: Share progress and achievements\n- [ ] **Leaderboards**: Global and friends rankings\n- [ ] **Live Events**: Weekly themed challenges\n\n**Technical Requirements**:\n- Real-time communication infrastructure\n- Game state synchronization\n- Voice chat integration\n- Anti-cheat measures\n- Matchmaking system\n\n**Implementation Approach**:\n```csharp\npublic interface IMultiplayerSession\n{\n    Task<SessionInfo> CreateSessionAsync(string storyPackId);\n    Task JoinSessionAsync(string sessionId);\n    Task<PlayerAction> WaitForPlayerTurnAsync();\n    Task BroadcastActionAsync(PlayerAction action);\n    Task SyncGameStateAsync(GameState state);\n}\n```\n\n---\n\n### Version 2.5 - AI-Generated Content (Q1 2026)\n**Status**: Research Phase\n\n**Features**:\n- [ ] **Dynamic Story Generation**: AI creates unique adventures\n- [ ] **Procedural Narratives**: Infinite replayability\n- [ ] **Adaptive Difficulty**: AI adjusts to player skill\n- [ ] **Natural Dialogue**: More fluid NPC conversations\n- [ ] **Context-Aware Responses**: Better understanding of player intent\n\n**AI Integration**:\n```csharp\npublic class DynamicStoryGenerator\n{\n    public async Task<StoryPack> GenerateDynamicAdventureAsync(\n        GenerationParameters parameters)\n    {\n        // Use GPT-4 or similar to create:\n        // - Unique setting and theme\n        // - Interconnected rooms\n        // - Puzzles and challenges\n        // - Multiple endings\n        // - Character arcs\n        \n        var story = await _aiEngine.GenerateAsync(parameters);\n        return await ValidateAndOptimizeAsync(story);\n    }\n}\n```\n\n---\n\n## Platform Expansions\n\n### iOS Support (Q2 2026)\n**Priority**: High\n\n**Requirements**:\n- Xcode 15+ and macOS development environment\n- iOS 15.0+ target\n- Swift/Objective-C platform-specific code\n- Apple App Store submission\n\n**Implementation Considerations**:\n- iOS Speech Recognition framework\n- AVFoundation for TTS\n- SwiftUI integration options\n- TestFlight beta testing\n- App Store review guidelines compliance\n\n**Estimated Effort**: 3-4 months\n\n---\n\n### Windows Desktop (Q3 2026)\n**Priority**: Medium\n\n**Features**:\n- Native Windows 11 application\n- Keyboard shortcuts for power users\n- Mouse and keyboard input alternatives\n- Larger screen optimizations\n- Desktop-specific features (e.g., multiple windows)\n\n**Technical Stack**:\n- WinUI 3 / Windows App SDK\n- Windows Speech Platform\n- Microsoft Store distribution\n\n**Estimated Effort**: 2-3 months\n\n---\n\n### Web Version (Q4 2026)\n**Priority**: Low-Medium\n\n**Features**:\n- Browser-based gameplay\n- Progressive Web App (PWA)\n- Cross-platform compatibility\n- Web Speech API integration\n- Cloud-only saves\n\n**Technical Approach**:\n- Blazor WebAssembly\n- SignalR for real-time features\n- IndexedDB for offline storage\n- Web Workers for background processing\n\n**Estimated Effort**: 4-5 months\n\n---\n\n## Advanced Features\n\n### AR Integration (2027+)\n**Status**: Experimental\n\n**Vision**:\nTransform physical spaces into game environments using augmented reality.\n\n**Concepts**:\n- **Room Scanning**: Map real rooms to game locations\n- **Object Recognition**: Real items become game objects\n- **Spatial Audio**: 3D sound positioning\n- **Physical Interaction**: Move around to explore\n\n**Technical Challenges**:\n- ARCore/ARKit integration\n- Indoor positioning accuracy\n- Battery consumption\n- Device compatibility\n\n---\n\n### Smart Speaker Integration (2027+)\n**Status**: Experimental\n\n**Platforms**:\n- Amazon Alexa\n- Google Assistant\n- Apple HomePod\n\n**Features**:\n- Voice-only gameplay (no screen required)\n- Ambient sound effects through smart speakers\n- Multi-room audio support\n- Household multiplayer sessions\n\n**Implementation**:\n```javascript\n// Alexa Skill Example\nconst LaunchRequestHandler = {\n    canHandle(handlerInput) {\n        return handlerInput.requestEnvelope.request.type === 'LaunchRequest';\n    },\n    handle(handlerInput) {\n        const speechText = 'Welcome to The Cabin. Begin your adventure.';\n        return handlerInput.responseBuilder\n            .speak(speechText)\n            .reprompt(speechText)\n            .getResponse();\n    }\n};\n```\n\n---\n\n### Accessibility Enhancements\n\n#### Phase 1 (v1.2)\n- [ ] Screen reader optimization\n- [ ] High contrast mode\n- [ ] Colorblind-friendly palette\n- [ ] Adjustable text sizes\n- [ ] Voice command alternatives\n\n#### Phase 2 (v1.5)\n- [ ] Closed captioning for audio\n- [ ] Switch control support\n- [ ] Haptic feedback options\n- [ ] Reduced motion mode\n- [ ] Dyslexia-friendly fonts\n\n#### Phase 3 (v2.0)\n- [ ] Audio descriptions for all scenes\n- [ ] Customizable control schemes\n- [ ] One-handed mode\n- [ ] Eye-tracking support (experimental)\n\n---\n\n## Content Strategy\n\n### Year 1 (2025)\n- **10 story packs** (5 at launch + 5 updates)\n- **Monthly mini-adventures**: Short 15-minute stories\n- **Seasonal events**: Halloween, Winter, Spring themes\n- **Community contests**: Best user-generated story\n\n### Year 2 (2026)\n- **20 additional story packs**\n- **Genre expansions**: Romance, Comedy, Thriller\n- **Celebrity voice packs**: Professional narrators\n- **Educational content**: History, Science themes\n- **Licensed content partnerships**: Books, movies, games\n\n### Year 3 (2027+)\n- **User workshop marketplace**\n- **AI-generated infinite content**\n- **Modding tools and API**\n- **Content creator program**\n\n---\n\n## Monetization Strategy\n\n### Free Tier\n- 5 base story packs\n- Local save only\n- Standard voice options\n- Ads between sessions (optional)\n\n### Premium Subscription ($4.99/month or $39.99/year)\n- All story packs included\n- Cloud saves and sync\n- Premium voice options\n- Ad-free experience\n- Early access to new content\n- Exclusive monthly stories\n\n### One-Time Purchases\n- Individual story packs: $1.99 - $3.99\n- Story pack bundles: $9.99 (5 packs)\n- Voice pack DLC: $2.99\n- Special editions: $4.99\n\n### In-App Purchases (Optional)\n- Cosmetic themes\n- Custom voice narrators\n- Achievement boosters\n- Hint systems\n\n**Projected Revenue Model**:\n```\nYear 1: 70% Free, 25% Premium, 5% Purchases\nYear 2: 60% Free, 30% Premium, 10% Purchases\nYear 3: 50% Free, 35% Premium, 15% Purchases\n```\n\n---\n\n## Technical Debt & Refactoring\n\n### Priority 1 (Before v2.0)\n- [ ] Migrate to .NET 9\n- [ ] Implement comprehensive unit test coverage (80%+)\n- [ ] Refactor command parsing for better extensibility\n- [ ] Optimize database queries and caching\n- [ ] Improve error handling and recovery\n\n### Priority 2 (Before v3.0)\n- [ ] Microservices architecture for backend\n- [ ] GraphQL API implementation\n- [ ] Implement event sourcing for game state\n- [ ] Advanced telemetry and observability\n- [ ] A/B testing framework\n\n### Priority 3 (Ongoing)\n- [ ] Documentation maintenance\n- [ ] Code quality improvements\n- [ ] Dependency updates\n- [ ] Security audits\n- [ ] Performance profiling\n\n---\n\n## Community & Ecosystem\n\n### Developer Tools\n- [ ] **Story Pack Editor**: Visual tool for content creation\n- [ ] **Testing Simulator**: Test stories without building\n- [ ] **API Documentation**: For integrations\n- [ ] **SDK**: For third-party extensions\n- [ ] **Plugin System**: Extensibility framework\n\n### Community Features\n- [ ] **Official Forum**: Discussion and support\n- [ ] **Discord Server**: Real-time community\n- [ ] **Reddit Community**: User-driven content\n- [ ] **YouTube Channel**: Tutorials and showcases\n- [ ] **Wiki**: Community-maintained documentation\n\n### Content Creator Support\n- [ ] Revenue sharing for popular packs\n- [ ] Featured creator spotlight\n- [ ] Creation tutorials and templates\n- [ ] Quality assurance tools\n- [ ] Analytics dashboard\n\n---\n\n## Research & Innovation\n\n### AI/ML Research Areas\n1. **Better Voice Understanding**: Context-aware parsing\n2. **Emotion Detection**: Respond to player tone\n3. **Adaptive Storytelling**: Learn player preferences\n4. **Natural Language Generation**: More varied responses\n5. **Voice Cloning**: Personalized narration\n\n### Experimental Features\n- **Binaural Audio**: Immersive 3D sound\n- **Gesture Control**: Supplement voice commands\n- **Brain-Computer Interface**: Accessibility research\n- **Procedural Music**: Dynamic soundtracks\n- **Haptic Storytelling**: Tactile feedback\n\n---\n\n## Success Metrics\n\n### App Performance\n- Monthly Active Users (MAU): Target 100K by end of Year 1\n- Daily Active Users (DAU): 30-day retention > 40%\n- Average session duration: > 20 minutes\n- Crash-free rate: > 99%\n- App Store rating: > 4.5 stars\n\n### Engagement\n- Stories completed per user: > 3\n- Average commands per session: > 15\n- Voice recognition accuracy: > 90%\n- User-generated content submissions: 100+ per month\n- Community forum active users: 1000+\n\n### Revenue\n- Conversion to premium: > 5% of users\n- Average revenue per user (ARPU): > $2/year\n- Churn rate: < 10% monthly for premium\n- Customer lifetime value (LTV): > $25\n\n---\n\n## Risk Management\n\n### Technical Risks\n| Risk | Impact | Mitigation |\n|------|--------|------------|\n| Voice recognition accuracy issues | High | Multiple STT providers, fallback options |\n| LLM API costs too high | Medium | Local models, caching, rate limiting |\n| Platform policy changes | Medium | Diversify distribution channels |\n| Performance on low-end devices | Medium | Tiered graphics, optimization |\n\n### Business Risks\n| Risk | Impact | Mitigation |\n|------|--------|------------|\n| Low user adoption | High | Marketing campaign, PR, influencers |\n| Competition from similar apps | Medium | Unique features, quality content |\n| Monetization doesn't meet goals | High | Flexible pricing, A/B testing |\n| Content creation costs | Medium | AI generation, community content |\n\n### Legal Risks\n| Risk | Impact | Mitigation |\n|------|--------|------------|\n| Voice data privacy concerns | High | Clear policies, minimal data collection |\n| Content licensing issues | Medium | Original content, proper licensing |\n| Accessibility compliance | Low | Follow WCAG guidelines |\n| Age rating changes | Medium | Content moderation, parental controls |\n\n---\n\n## Long-Term Vision (2028+)\n\n**The Cabin Platform**: An ecosystem for interactive voice-driven storytelling\n\n**Key Pillars**:\n1. **Open Platform**: Anyone can create and publish\n2. **AI-Powered**: Infinite, personalized stories\n3. **Multi-Modal**: Voice, text, AR, VR integration\n4. **Social Experience**: Shared adventures globally\n5. **Educational**: Learning through interactive fiction\n\n**Ultimate Goal**: Become the leading platform for voice-controlled interactive storytelling, democratizing content creation and making adventures accessible to everyone, everywhere.\n\n---\n\n**Document Version**: 1.0  \n**Last Updated**: 2025-10-23  \n**Related Documents**: 01-project-overview.md, 10-deployment-strategy.md\n\n</final_file_content>\n\nIMPORTANT: For any future changes to this file, use the final_file_content shown above as your reference. This content reflects the current state of the file, including any auto-formatting (e.g., if you used single quotes but the formatter converted them to double quotes). Always base your SEARCH/REPLACE operations on this final version to ensure accuracy.\n\n"},{"type":"text","text":"<environment_details>\n# Visual Studio Code Visible Files\ndocs/11-future-roadmap.md\n\n# Visual Studio Code Open Tabs\ndocs/01-project-overview.md\ndocs/02-system-architecture.md\ndocs/04-data-models.md\ndocs/07-ui-ux-design.md\ndocs/08-maui-implementation.md\ndocs/09-content-management.md\ndocs/10-deployment-strategy.md\ndocs/11-future-roadmap.md\ndocs/06-game-engine.md\ndocs/03-technical-stack.md\ndocs/05-voice-pipeline.md\n\n# Recently Modified Files\nThese files have been modified since you last accessed them (file was just edited so you may need to re-read it before editing):\ndocs/10-deployment-strategy.md\n\n# Current Time\n10/23/2025, 7:30:26 PM (America/Los_Angeles, UTC-7:00)\n\n# Context Window Usage\n67,429 / 127.805K tokens used (53%)\n\n# Current Mode\nACT MODE\n</environment_details>"}]},{"role":"assistant","content":[{"type":"text","text":"<attempt_completion>\n<result>\nI've successfully created a comprehensive game design and architecture documentation for The Cabin Android voice-controlled adventure game using .NET MAUI. The documentation is organized in 11 numbered markdown files under the `/docs/` folder:\n\n## Documentation Structure\n\n1. **01-project-overview.md** - Executive summary, key features, and game concept\n2. **02-system-architecture.md** - Complete system architecture with diagrams and component interactions\n3. **03-technical-stack.md** - Detailed technology choices for Android, .NET MAUI, voice recognition, AI/LLM integration, and data storage\n4. **04-data-models.md** - Comprehensive data structures for game state, rooms, objects, player data, and story packs\n5. **05-voice-pipeline.md** - Voice recognition, command parsing, and text-to-speech implementation\n6. **06-game-engine.md** - Game state machine, command routing, handlers, inventory management, puzzles, and save/load systems\n7. **07-ui-ux-design.md** - Screen layouts, XAML implementations, animations, themes, and accessibility features\n8. **08-maui-implementation.md** - Complete .NET MAUI project structure, dependency injection, ViewModels, platform-specific code, and build configuration\n9. **09-content-management.md** - Story pack format, content creation workflows, AI-assisted generation, validation, and import/export\n10. **10-deployment-strategy.md** - Build configurations, version management, code signing, CI/CD pipelines, distribution channels (Google Play Store), update mechanisms, monitoring, and release checklists\n11. **11-future-roadmap.md** - Version roadmap, platform expansions (iOS, Windows, Web), advanced features (AR, smart speakers), monetization strategy, and long-term vision\n\n## Key Highlights\n\n‚úÖ **Complete Architecture**: Full system design with voice pipeline, game engine, and data models\n‚úÖ **Implementation Ready**: Detailed C# code examples, XAML layouts, and MAUI configuration\n‚úÖ **Production Ready**: Deployment strategy with CI/CD, Play Store submission, and monitoring\n‚úÖ **Scalable Design**: Modular architecture supporting future features and platform expansions\n‚úÖ **Voice-First Approach**: Hands-free gameplay with speech recognition and natural language parsing\n‚úÖ **Content Management**: Flexible story pack system with AI-assisted generation capabilities\n\nAll documentation files include version history, cross-references to related documents, and are ready for implementation. The existing story pack JSON files (classic_horror.json, arctic_survival.json, etc.) align perfectly with the documented architecture.\n</result>\n<task_progress>\n- [x] Analyze game design document\n- [x] Review existing story pack structure\n- [x] Create documentation structure in /docs/ folder\n- [x] Write 01-project-overview.md\n- [x] Write 02-system-architecture.md\n- [x] Write 03-technical-stack.md\n- [x] Write 04-data-models.md\n- [x] Write 05-voice-pipeline.md\n- [x] Write 06-game-engine.md\n- [x] Write 07-ui-ux-design.md\n- [x] Write 08-maui-implementation.md\n- [x] Write 09-content-management.md\n- [x] Write 10-deployment-strategy.md\n- [x] Write 11-future-roadmap.md\n</task_progress>\n</attempt_completion>"}]}]